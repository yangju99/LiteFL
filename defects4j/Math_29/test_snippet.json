[
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.SparseRealVectorTestImpl(double[])",
        "snippet": "        public SparseRealVectorTestImpl(double[] d) {\n            data = d.clone();\n        }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 13)-(line 42,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unsupported()",
        "snippet": "        private UnsupportedOperationException unsupported() {\n            return new UnsupportedOperationException(\"Not supported, unneeded for test purposes\");\n        }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "",
        "child_ranges": [
            "(line 46,col 13)-(line 46,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.map(org.apache.commons.math3.analysis.UnivariateFunction)",
        "snippet": "        @Override\n        public RealVector map(UnivariateFunction function) {\n            throw unsupported();\n        }\n",
        "begin_line": 49,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 13)-(line 51,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)",
        "snippet": "        @Override\n        public RealVector mapToSelf(UnivariateFunction function) {\n            throw unsupported();\n        }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 13)-(line 56,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.iterator()",
        "snippet": "        @Override\n        public Iterator<Entry> iterator() {\n            throw unsupported();\n        }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 61,col 13)-(line 61,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.copy()",
        "snippet": "        @Override\n        public RealVector copy() {\n            return new SparseRealVectorTestImpl(data);\n        }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 66,col 13)-(line 66,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.add(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector add(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 13)-(line 71,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.subtract(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector subtract(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "child_ranges": [
            "(line 77,col 13)-(line 77,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAdd(double)",
        "snippet": "        @Override\n        public RealVector mapAdd(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 82,col 13)-(line 82,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapAddToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapAddToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 13)-(line 87,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtract(double)",
        "snippet": "        @Override\n        public RealVector mapSubtract(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 13)-(line 92,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapSubtractToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapSubtractToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 13)-(line 97,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiply(double)",
        "snippet": "        @Override\n        public RealVector mapMultiply(double d) {\n            double[] out = new double[data.length];\n            for (int i = 0; i < data.length; i++) {\n                out[i] = data[i] * d;\n            }\n            return new OpenMapRealVector(out);\n        }\n",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 13)-(line 102,col 51)",
            "(line 103,col 13)-(line 105,col 13)",
            "(line 106,col 13)-(line 106,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapMultiplyToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapMultiplyToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 13)-(line 111,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivide(double)",
        "snippet": "        @Override\n        public RealVector mapDivide(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 13)-(line 116,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.mapDivideToSelf(double)",
        "snippet": "        @Override\n        public RealVector mapDivideToSelf(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 13)-(line 121,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeMultiply(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector ebeMultiply(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 13)-(line 126,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.ebeDivide(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector ebeDivide(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 129,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 131,col 13)-(line 131,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.dotProduct(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public double dotProduct(RealVector v) {\n            double dot = 0;\n            for (int i = 0; i < data.length; i++) {\n                dot += data[i] * v.getEntry(i);\n            }\n            return dot;\n        }\n",
        "begin_line": 134,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 136,col 13)-(line 136,col 27)",
            "(line 137,col 13)-(line 139,col 13)",
            "(line 140,col 13)-(line 140,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getNorm()",
        "snippet": "        @Override\n        public double getNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 143,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 13)-(line 145,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Norm()",
        "snippet": "        @Override\n        public double getL1Norm() {\n            throw unsupported();\n        }\n",
        "begin_line": 148,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 150,col 13)-(line 150,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfNorm()",
        "snippet": "        @Override\n        public double getLInfNorm() {\n            throw unsupported();\n        }\n",
        "begin_line": 153,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 155,col 13)-(line 155,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDistance(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public double getDistance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 158,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 160,col 13)-(line 160,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getL1Distance(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public double getL1Distance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 13)-(line 165,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getLInfDistance(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public double getLInfDistance(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 170,col 13)-(line 170,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitVector()",
        "snippet": "        @Override\n        public RealVector unitVector() {\n            throw unsupported();\n        }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 175,col 13)-(line 175,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.unitize()",
        "snippet": "        @Override\n        public void unitize() {\n            throw unsupported();\n        }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 13)-(line 180,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.projection(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector projection(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 13)-(line 185,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.outerProduct(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealMatrix outerProduct(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 188,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 13)-(line 190,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getEntry(int)",
        "snippet": "        @Override\n        public double getEntry(int index) {\n            return data[index];\n        }\n",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 195,col 13)-(line 195,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getDimension()",
        "snippet": "        @Override\n        public int getDimension() {\n            return data.length;\n        }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 13)-(line 200,col 31)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public RealVector append(RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 203,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 205,col 13)-(line 205,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.append(double)",
        "snippet": "        @Override\n        public RealVector append(double d) {\n            throw unsupported();\n        }\n",
        "begin_line": 208,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 13)-(line 210,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.getSubVector(int, int)",
        "snippet": "        @Override\n        public RealVector getSubVector(int index, int n) {\n            throw unsupported();\n        }\n",
        "begin_line": 213,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 13)-(line 215,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setEntry(int, double)",
        "snippet": "        @Override\n        public void setEntry(int index, double value) {\n            data[index] = value;\n        }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 13)-(line 220,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.setSubVector(int, org.apache.commons.math3.linear.RealVector)",
        "snippet": "        @Override\n        public void setSubVector(int index, RealVector v) {\n            throw unsupported();\n        }\n",
        "begin_line": 223,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 225,col 13)-(line 225,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.set(double)",
        "snippet": "        @Override\n        public void set(double value) {\n            throw unsupported();\n        }\n",
        "begin_line": 228,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 230,col 13)-(line 230,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.toArray()",
        "snippet": "        @Override\n        public double[] toArray() {\n            return data.clone();\n        }\n",
        "begin_line": 233,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 13)-(line 235,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isNaN()",
        "snippet": "        @Override\n        public boolean isNaN() {\n            boolean isNaN = false;\n            for (int i = 0; i < data.length; i++) {\n                isNaN |= Double.isNaN(data[i]);\n            }\n            return isNaN;\n        }\n",
        "begin_line": 238,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 240,col 13)-(line 240,col 34)",
            "(line 241,col 13)-(line 243,col 13)",
            "(line 244,col 13)-(line 244,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.SparseRealVectorTestImpl.isInfinite()",
        "snippet": "        @Override\n        public boolean isInfinite() {\n            boolean isInfinite = false;\n            for (int i = 0; i < data.length; i++) {\n                final double x = data[i];\n                if (Double.isNaN(x)) {\n                    return false;\n                }\n                isInfinite |= Double.isInfinite(x);\n            }\n            return isInfinite;\n        }\n",
        "begin_line": 247,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 249,col 13)-(line 249,col 39)",
            "(line 250,col 13)-(line 256,col 13)",
            "(line 257,col 13)-(line 257,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.create(double[])",
        "snippet": "    @Override\n    public RealVector create(double[] data) {\n        return new OpenMapRealVector(data);\n    }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 263,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.createAlien(double[])",
        "snippet": "    @Override\n    public RealVector createAlien(double[] data) {\n        return new SparseRealVectorTestImpl(data);\n    }\n",
        "begin_line": 266,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.testConstructors()",
        "snippet": "    @Test\n    public void testConstructors() {\n\n        OpenMapRealVector v0 = new OpenMapRealVector();\n        Assert.assertEquals(\"testData len\", 0, v0.getDimension());\n\n        OpenMapRealVector v1 = new OpenMapRealVector(7);\n        Assert.assertEquals(\"testData len\", 7, v1.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v1.getEntry(6), 0);\n\n        OpenMapRealVector v3 = new OpenMapRealVector(vec1);\n        Assert.assertEquals(\"testData len\", 3, v3.getDimension());\n        Assert.assertEquals(\"testData is 2.0 \", 2.0, v3.getEntry(1), 0);\n\n        //SparseRealVector v4 = new SparseRealVector(vec4, 3, 2);\n        //Assert.assertEquals(\"testData len\", 2, v4.getDimension());\n        //Assert.assertEquals(\"testData is 4.0 \", 4.0, v4.getEntry(0));\n        //try {\n        //    new SparseRealVector(vec4, 8, 3);\n        //    Assert.fail(\"MathIllegalArgumentException expected\");\n        //} catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        //}\n\n        RealVector v5_i = new OpenMapRealVector(dvec1);\n        Assert.assertEquals(\"testData len\", 9, v5_i.getDimension());\n        Assert.assertEquals(\"testData is 9.0 \", 9.0, v5_i.getEntry(8), 0);\n\n        OpenMapRealVector v5 = new OpenMapRealVector(dvec1);\n        Assert.assertEquals(\"testData len\", 9, v5.getDimension());\n        Assert.assertEquals(\"testData is 9.0 \", 9.0, v5.getEntry(8), 0);\n\n        OpenMapRealVector v7 = new OpenMapRealVector(v1);\n        Assert.assertEquals(\"testData len\", 7, v7.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v7.getEntry(6), 0);\n\n        SparseRealVectorTestImpl v7_i = new SparseRealVectorTestImpl(vec1);\n\n        OpenMapRealVector v7_2 = new OpenMapRealVector(v7_i);\n        Assert.assertEquals(\"testData len\", 3, v7_2.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 2.0d, v7_2.getEntry(1), 0);\n\n        OpenMapRealVector v8 = new OpenMapRealVector(v1);\n        Assert.assertEquals(\"testData len\", 7, v8.getDimension());\n        Assert.assertEquals(\"testData is 0.0 \", 0.0, v8.getEntry(6), 0);\n\n    }\n",
        "begin_line": 271,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 55)",
            "(line 275,col 9)-(line 275,col 66)",
            "(line 277,col 9)-(line 277,col 56)",
            "(line 278,col 9)-(line 278,col 66)",
            "(line 279,col 9)-(line 279,col 72)",
            "(line 281,col 9)-(line 281,col 59)",
            "(line 282,col 9)-(line 282,col 66)",
            "(line 283,col 9)-(line 283,col 72)",
            "(line 295,col 9)-(line 295,col 55)",
            "(line 296,col 9)-(line 296,col 68)",
            "(line 297,col 9)-(line 297,col 74)",
            "(line 299,col 9)-(line 299,col 60)",
            "(line 300,col 9)-(line 300,col 66)",
            "(line 301,col 9)-(line 301,col 72)",
            "(line 303,col 9)-(line 303,col 57)",
            "(line 304,col 9)-(line 304,col 66)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 307,col 9)-(line 307,col 75)",
            "(line 309,col 9)-(line 309,col 61)",
            "(line 310,col 9)-(line 310,col 68)",
            "(line 311,col 9)-(line 311,col 75)",
            "(line 313,col 9)-(line 313,col 57)",
            "(line 314,col 9)-(line 314,col 66)",
            "(line 315,col 9)-(line 315,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.testConcurrentModification()",
        "snippet": "    @Test\n    public void testConcurrentModification() {\n        final RealVector u = new OpenMapRealVector(3, 1e-6);\n        u.setEntry(0, 1);\n        u.setEntry(1, 0);\n        u.setEntry(2, 2);\n\n        final RealVector v1 = new OpenMapRealVector(3, 1e-6);\n        v1.setEntry(0, 0);\n        v1.setEntry(1, 3);\n        v1.setEntry(2, 0);\n\n        u.ebeMultiply(v1);\n        u.ebeDivide(v1);\n    }\n",
        "begin_line": 320,
        "end_line": 334,
        "comment": " Check that the operations do not throw an exception (cf. MATH-645). ",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 60)",
            "(line 323,col 9)-(line 323,col 25)",
            "(line 324,col 9)-(line 324,col 25)",
            "(line 325,col 9)-(line 325,col 25)",
            "(line 327,col 9)-(line 327,col 61)",
            "(line 328,col 9)-(line 328,col 26)",
            "(line 329,col 9)-(line 329,col 26)",
            "(line 330,col 9)-(line 330,col 26)",
            "(line 332,col 9)-(line 332,col 26)",
            "(line 333,col 9)-(line 333,col 24)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.SparseRealVectorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java",
        "signature": "org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideSameType()",
        "snippet": "    @Test\n    public void testEbeDivideSameType() {} // Fails in super class\n",
        "begin_line": 336,
        "end_line": 337,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.create(double[])",
        "snippet": "    public abstract RealVector create(double[] data);\n",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n     * Creates a new instance of {@link RealVector}, with specified entries.\n     * The returned vector must be of the type currently tested. It should be\n     * noted that some tests assume that no references to the specified\n     * {@code double[]} are kept in the returned object: if necessary, defensive\n     * copy of this array should be made.\n     *\n     * @param data the entries of the vector to be created\n     * @return a new {@link RealVector} of the type to be tested\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.createAlien(double[])",
        "snippet": "    public abstract RealVector createAlien(double[] data);\n",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n     * Creates a new instance of {@link RealVector}, with specified entries.\n     * The type of the returned vector must be different from the type currently\n     * tested. It should be noted that some tests assume that no references to\n     * the specified {@code double[]} are kept in the returned object: if\n     * necessary, defensive copy of this array should be made.\n     *\n     * @param data the entries of the vector to be created\n     * @return a new {@link RealVector} of an alien type\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.getPreferredEntryValue()",
        "snippet": "    public double getPreferredEntryValue() {\n        return 0.0;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Returns a preferred value of the entries, to be tested specifically. Some\n     * implementations of {@link RealVector} (e.g. {@link OpenMapRealVector}) do\n     * not store specific values of entries. In order to ensure that all tests\n     * take into account this specific value, some entries of the vectors to be\n     * tested are deliberately set to the value returned by the present method.\n     * The default implementation returns {@code 0.0}.\n     *\n     * @return a value which <em>should</em> be present in all vectors to be\n     * tested\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.assertClose(java.lang.String, double[], double[], double)",
        "snippet": "    protected void assertClose(String msg, double[] m, double[] n,\n            double tolerance) {\n        if (m.length != n.length) {\n            Assert.fail(\"vectors have different lengths\");\n        }\n        for (int i = 0; i < m.length; i++) {\n            Assert.assertEquals(msg + \" \" +  i + \" elements differ\", m[i],n[i],tolerance);\n        }\n    }\n",
        "begin_line": 105,
        "end_line": 113,
        "comment": " verifies that two vectors are close (sup norm) ",
        "child_ranges": [
            "(line 107,col 9)-(line 109,col 9)",
            "(line 110,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.RealVectorAbstractTest()",
        "snippet": "    public RealVectorAbstractTest() {\n        final double x = getPreferredEntryValue();\n        data1 = new double[] {x, 1d, 2d, x, x};\n        data2 = new double[] {x, x, 3d, x, 4d, x};\n    }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 50)",
            "(line 142,col 9)-(line 142,col 47)",
            "(line 143,col 9)-(line 143,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetDimension()",
        "snippet": "    @Test\n    public void testGetDimension() {\n        Assert.assertEquals(data1.length, create(data1).getDimension());\n    }\n",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetEntry()",
        "snippet": "    @Test\n    public void testGetEntry() {\n        final RealVector v = create(data1);\n        for (int i = 0; i < data1.length; i++) {\n            Assert.assertEquals(\"entry \" + i, data1[i], v.getEntry(i), 0d);\n        }\n    }\n",
        "begin_line": 155,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 43)",
            "(line 158,col 9)-(line 160,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetEntryInvalidIndex1()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testGetEntryInvalidIndex1() {\n        create(data1).getEntry(-1);\n    }\n",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetEntryInvalidIndex2()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testGetEntryInvalidIndex2() {\n        create(data1).getEntry(data1.length);\n    }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetEntry()",
        "snippet": "    @Test\n    public void testSetEntry() {\n        final double[] expected = MathArrays.copyOf(data1);\n        final RealVector actual = create(data1);\n\n        /*\n         * Try setting to any value.\n         */\n        for (int i = 0; i < data1.length; i++) {\n            final double oldValue = data1[i];\n            final double newValue = oldValue + 1d;\n            expected[i] = newValue;\n            actual.setEntry(i, newValue);\n            TestUtils.assertEquals(\"while setting entry #\" + i, expected,\n                actual, 0d);\n            expected[i] = oldValue;\n            actual.setEntry(i, oldValue);\n        }\n\n        /*\n         * Try setting to the preferred value.\n         */\n        final double x = getPreferredEntryValue();\n        for (int i = 0; i < data1.length; i++) {\n            final double oldValue = data1[i];\n            final double newValue = x;\n            expected[i] = newValue;\n            actual.setEntry(i, newValue);\n            TestUtils.assertEquals(\"while setting entry #\" + i, expected,\n                actual, 0d);\n            expected[i] = oldValue;\n            actual.setEntry(i, oldValue);\n        }\n    }\n",
        "begin_line": 173,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 176,col 48)",
            "(line 181,col 9)-(line 190,col 9)",
            "(line 195,col 9)-(line 195,col 50)",
            "(line 196,col 9)-(line 205,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetEntryInvalidIndex1()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testSetEntryInvalidIndex1() {\n        create(data1).setEntry(-1, getPreferredEntryValue());\n    }\n",
        "begin_line": 208,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetEntryInvalidIndex2()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testSetEntryInvalidIndex2() {\n        create(data1).setEntry(data1.length, getPreferredEntryValue());\n    }\n",
        "begin_line": 213,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddToEntry()",
        "snippet": "    @Test\n    public void testAddToEntry() {\n        final double[] expected = MathArrays.copyOf(data1);\n        final RealVector actual = create(data1);\n\n        /*\n         * Try adding any value.\n         */\n        double increment = 1d;\n        for (int i = 0; i < data1.length; i++) {\n            final double oldValue = data1[i];\n            expected[i] += increment;\n            actual.addToEntry(i, increment);\n            TestUtils.assertEquals(\"while incrementing entry #\" + i, expected,\n                actual, 0d);\n            expected[i] = oldValue;\n            actual.setEntry(i, oldValue);\n        }\n\n        /*\n         * Try incrementing so that result is equal to preferred value.\n         */\n        final double x = getPreferredEntryValue();\n        for (int i = 0; i < data1.length; i++) {\n            final double oldValue = data1[i];\n            increment = x - oldValue;\n            expected[i] = x;\n            actual.addToEntry(i, increment);\n            TestUtils.assertEquals(\"while incrementing entry #\" + i, expected,\n                actual, 0d);\n            expected[i] = oldValue;\n            actual.setEntry(i, oldValue);\n        }\n    }\n",
        "begin_line": 218,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 59)",
            "(line 221,col 9)-(line 221,col 48)",
            "(line 226,col 9)-(line 226,col 30)",
            "(line 227,col 9)-(line 235,col 9)",
            "(line 240,col 9)-(line 240,col 50)",
            "(line 241,col 9)-(line 250,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddToEntryInvalidIndex1()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testAddToEntryInvalidIndex1() {\n        create(data1).addToEntry(-1, getPreferredEntryValue());\n    }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 255,col 9)-(line 255,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddToEntryInvalidIndex2()",
        "snippet": "    @Test(expected=OutOfRangeException.class)\n    public void testAddToEntryInvalidIndex2() {\n        create(data1).addToEntry(data1.length, getPreferredEntryValue());\n    }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.doTestAppendVector(java.lang.String, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, double)",
        "snippet": "    private void doTestAppendVector(final String message, final RealVector v1,\n        final RealVector v2, final double delta) {\n\n        final int n1 = v1.getDimension();\n        final int n2 = v2.getDimension();\n        final RealVector v = v1.append(v2);\n        Assert.assertEquals(message, n1 + n2, v.getDimension());\n        for (int i = 0; i < n1; i++) {\n            final String msg = message + \", entry #\" + i;\n            Assert.assertEquals(msg, v1.getEntry(i), v.getEntry(i), delta);\n        }\n        for (int i = 0; i < n2; i++) {\n            final String msg = message + \", entry #\" + (n1 + i);\n            Assert.assertEquals(msg, v2.getEntry(i), v.getEntry(n1 + i), delta);\n        }\n    }\n",
        "begin_line": 263,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 266,col 9)-(line 266,col 41)",
            "(line 267,col 9)-(line 267,col 41)",
            "(line 268,col 9)-(line 268,col 43)",
            "(line 269,col 9)-(line 269,col 64)",
            "(line 270,col 9)-(line 273,col 9)",
            "(line 274,col 9)-(line 277,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAppendVector()",
        "snippet": "    @Test\n    public void testAppendVector() {\n        doTestAppendVector(\"same type\", create(data1), create(data2), 0d);\n        doTestAppendVector(\"mixed types\", create(data1), createAlien(data2), 0d);\n    }\n",
        "begin_line": 280,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 282,col 9)-(line 282,col 74)",
            "(line 283,col 9)-(line 283,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.doTestAppendScalar(java.lang.String, org.apache.commons.math3.linear.RealVector, double, double)",
        "snippet": "    private void doTestAppendScalar(final String message, final RealVector v,\n        final double d, final double delta) {\n\n        final int n = v.getDimension();\n        final RealVector w = v.append(d);\n        Assert.assertEquals(message, n + 1, w.getDimension());\n        for (int i = 0; i < n; i++) {\n            final String msg = message + \", entry #\" + i;\n            Assert.assertEquals(msg, v.getEntry(i), w.getEntry(i), delta);\n        }\n        final String msg = message + \", entry #\" + n;\n        Assert.assertEquals(msg, d, w.getEntry(n), delta);\n    }\n",
        "begin_line": 286,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 39)",
            "(line 290,col 9)-(line 290,col 41)",
            "(line 291,col 9)-(line 291,col 62)",
            "(line 292,col 9)-(line 295,col 9)",
            "(line 296,col 9)-(line 296,col 53)",
            "(line 297,col 9)-(line 297,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAppendScalar()",
        "snippet": "    @Test\n    public void testAppendScalar() {\n\n        doTestAppendScalar(\"\", create(data1), 1d, 0d);\n        doTestAppendScalar(\"\", create(data1), getPreferredEntryValue(), 0d);\n    }\n",
        "begin_line": 300,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 54)",
            "(line 304,col 9)-(line 304,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetSubVector()",
        "snippet": "    @Test\n    public void testGetSubVector() {\n        final double x = getPreferredEntryValue();\n        final double[] data = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n        final int index = 1;\n        final int n = data.length - 5;\n        final RealVector actual = create(data).getSubVector(index, n);\n        final double[] expected = new double[n];\n        System.arraycopy(data, index, expected, 0, n);\n        TestUtils.assertEquals(\"\", expected, actual, 0d);\n    }\n",
        "begin_line": 307,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 50)",
            "(line 310,col 9)-(line 310,col 83)",
            "(line 311,col 9)-(line 311,col 28)",
            "(line 312,col 9)-(line 312,col 38)",
            "(line 313,col 9)-(line 313,col 70)",
            "(line 314,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 315,col 54)",
            "(line 316,col 9)-(line 316,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetSubVectorInvalidIndex1()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testGetSubVectorInvalidIndex1() {\n        final int n = 10;\n        create(new double[n]).getSubVector(-1, 2);\n    }\n",
        "begin_line": 319,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 25)",
            "(line 322,col 9)-(line 322,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetSubVectorInvalidIndex2()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testGetSubVectorInvalidIndex2() {\n        final int n = 10;\n        create(new double[n]).getSubVector(n, 2);\n    }\n",
        "begin_line": 325,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 25)",
            "(line 328,col 9)-(line 328,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetSubVectorInvalidIndex3()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testGetSubVectorInvalidIndex3() {\n        final int n = 10;\n        create(new double[n]).getSubVector(0, n + 1);\n    }\n",
        "begin_line": 331,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 25)",
            "(line 334,col 9)-(line 334,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testGetSubVectorInvalidIndex4()",
        "snippet": "    @Test(expected = NotPositiveException.class)\n    public void testGetSubVectorInvalidIndex4() {\n        final int n = 10;\n        create(new double[n]).getSubVector(3, -2);\n    }\n",
        "begin_line": 337,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 339,col 9)-(line 339,col 25)",
            "(line 340,col 9)-(line 340,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetSubVectorSameType()",
        "snippet": "    @Test\n    public void testSetSubVectorSameType() {\n        final double x = getPreferredEntryValue();\n        final double[] expected = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n        final double[] sub = {5d, x, 6d, 7d, 8d};\n        final RealVector actual = create(expected);\n        final int index = 2;\n        actual.setSubVector(index, create(sub));\n\n        for (int i = 0; i < sub.length; i++){\n            expected[index + i] = sub[i];\n        }\n        TestUtils.assertEquals(\"\", expected, actual, 0d);\n    }\n",
        "begin_line": 343,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 345,col 9)-(line 345,col 50)",
            "(line 346,col 9)-(line 346,col 87)",
            "(line 347,col 9)-(line 347,col 49)",
            "(line 348,col 9)-(line 348,col 51)",
            "(line 349,col 9)-(line 349,col 28)",
            "(line 350,col 9)-(line 350,col 48)",
            "(line 352,col 9)-(line 354,col 9)",
            "(line 355,col 9)-(line 355,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetSubVectorMixedType()",
        "snippet": "    @Test\n    public void testSetSubVectorMixedType() {\n        final double x = getPreferredEntryValue();\n        final double[] expected = {x, x, x, 1d, x, 2d, x, x, 3d, x, x, x, 4d, x, x, x};\n        final double[] sub = {5d, x, 6d, 7d, 8d};\n        final RealVector actual = create(expected);\n        final int index = 2;\n        actual.setSubVector(index, createAlien(sub));\n\n        for (int i = 0; i < sub.length; i++){\n            expected[index + i] = sub[i];\n        }\n        TestUtils.assertEquals(\"\", expected, actual, 0d);\n    }\n",
        "begin_line": 358,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 87)",
            "(line 362,col 9)-(line 362,col 49)",
            "(line 363,col 9)-(line 363,col 51)",
            "(line 364,col 9)-(line 364,col 28)",
            "(line 365,col 9)-(line 365,col 53)",
            "(line 367,col 9)-(line 369,col 9)",
            "(line 370,col 9)-(line 370,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetSubVectorInvalidIndex1()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testSetSubVectorInvalidIndex1() {\n        create(new double[10]).setSubVector(-1, create(new double[2]));\n    }\n",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetSubVectorInvalidIndex2()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testSetSubVectorInvalidIndex2() {\n        create(new double[10]).setSubVector(10, create(new double[2]));\n    }\n",
        "begin_line": 378,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSetSubVectorInvalidIndex3()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testSetSubVectorInvalidIndex3() {\n        create(new double[10]).setSubVector(9, create(new double[2]));\n    }\n",
        "begin_line": 383,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testIsNaN()",
        "snippet": "    @Test\n    public void testIsNaN() {\n        final RealVector v = create(new double[] {0, 1, 2});\n\n        Assert.assertFalse(v.isNaN());\n        v.setEntry(1, Double.NaN);\n        Assert.assertTrue(v.isNaN());\n    }\n",
        "begin_line": 388,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 390,col 9)-(line 390,col 60)",
            "(line 392,col 9)-(line 392,col 38)",
            "(line 393,col 9)-(line 393,col 34)",
            "(line 394,col 9)-(line 394,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testIsInfinite()",
        "snippet": "    @Test\n    public void testIsInfinite() {\n        final RealVector v = create(new double[] { 0, 1, 2 });\n\n        Assert.assertFalse(v.isInfinite());\n        v.setEntry(0, Double.POSITIVE_INFINITY);\n        Assert.assertTrue(v.isInfinite());\n        v.setEntry(1, Double.NaN);\n        Assert.assertFalse(v.isInfinite());\n    }\n",
        "begin_line": 397,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 399,col 9)-(line 399,col 62)",
            "(line 401,col 9)-(line 401,col 43)",
            "(line 402,col 9)-(line 402,col 48)",
            "(line 403,col 9)-(line 403,col 42)",
            "(line 404,col 9)-(line 404,col 34)",
            "(line 405,col 9)-(line 405,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperation(org.apache.commons.math3.linear.RealVectorAbstractTest.BinaryOperation, boolean)",
        "snippet": "    private void doTestEbeBinaryOperation(final BinaryOperation op, final boolean mixed) {\n        /*\n         * Make sure that x, y, z are three different values. Also, x is the\n         * preferred value (e.g. the value which is not stored in sparse\n         * implementations).\n         */\n        final double x = getPreferredEntryValue();\n        final double y = x + 1d;\n        final double z = y + 1d;\n\n        /*\n         * This is an attempt at covering most particular cases of combining\n         * two values.\n         *\n         * 1. Addition\n         *    --------\n         * The following cases should be covered\n         * (2 * x) + (-x)\n         * (-x) + 2 * x\n         * x + y\n         * y + x\n         * y + z\n         * y + (x - y)\n         * (y - x) + x\n         *\n         * The values to be considered are: x, y, z, 2 * x, -x, x - y, y - x.\n         *\n         * 2. Subtraction\n         *    -----------\n         * The following cases should be covered\n         * (2 * x) - x\n         * x - y\n         * y - x\n         * y - z\n         * y - (y - x)\n         * (y + x) - y\n         *\n         * The values to be considered are: x, y, z, x + y, y - x.\n         *\n         * 3. Multiplication\n         *    --------------\n         * (x * x) * (1 / x)\n         * (1 / x) * (x * x)\n         * x * y\n         * y * x\n         * y * z\n         *\n         * The values to be considered are: x, y, z, 1 / x, x * x.\n         *\n         * 4. Division\n         *    --------\n         * (x * x) / x\n         * x / y\n         * y / x\n         * y / z\n         *\n         * The values to be considered are: x, y, z, x * x.\n         *\n         * Also to be considered NaN, POSITIVE_INFINITY, NEGATIVE_INFINITY.\n         */\n        final double[] values = {x, y, z, 2 * x, -x, 1 / x, x * x, x + y, x - y, y - x};\n        final double[] data1 = new double[values.length * values.length];\n        final double[] data2 = new double[values.length * values.length];\n        int k = 0;\n        for (int i = 0; i < values.length; i++) {\n            for (int j = 0; j < values.length; j++) {\n                data1[k] = values[i];\n                data2[k] = values[j];\n                ++k;\n            }\n        }\n        final RealVector v1 = create(data1);\n        final RealVector v2 = mixed ? createAlien(data2) : create(data2);\n        final RealVector actual;\n        switch (op) {\n            case ADD:\n                actual = v1.add(v2);\n                break;\n            case SUB:\n                actual = v1.subtract(v2);\n                break;\n            case MUL:\n                actual = v1.ebeMultiply(v2);\n                break;\n            case DIV:\n                actual = v1.ebeDivide(v2);\n                break;\n            default:\n                throw new AssertionError(\"unexpected value\");\n        }\n        final double[] expected = new double[data1.length];\n        for (int i = 0; i < expected.length; i++) {\n            switch (op) {\n                case ADD:\n                    expected[i] = data1[i] + data2[i];\n                    break;\n                case SUB:\n                    expected[i] = data1[i] - data2[i];\n                    break;\n                case MUL:\n                    expected[i] = data1[i] * data2[i];\n                    break;\n                case DIV:\n                    expected[i] = data1[i] / data2[i];\n                    break;\n                default:\n                    throw new AssertionError(\"unexpected value\");\n            }\n        }\n        for (int i = 0; i < expected.length; i++) {\n            final String msg = \"entry #\"+i+\", left = \"+data1[i]+\", right = \" + data2[i];\n            Assert.assertEquals(msg, expected[i], actual.getEntry(i), 0.0);\n        }\n    }\n",
        "begin_line": 408,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 50)",
            "(line 415,col 9)-(line 415,col 32)",
            "(line 416,col 9)-(line 416,col 32)",
            "(line 468,col 9)-(line 468,col 88)",
            "(line 469,col 9)-(line 469,col 73)",
            "(line 470,col 9)-(line 470,col 73)",
            "(line 471,col 9)-(line 471,col 18)",
            "(line 472,col 9)-(line 478,col 9)",
            "(line 479,col 9)-(line 479,col 44)",
            "(line 480,col 9)-(line 480,col 73)",
            "(line 481,col 9)-(line 481,col 32)",
            "(line 482,col 9)-(line 497,col 9)",
            "(line 498,col 9)-(line 498,col 59)",
            "(line 499,col 9)-(line 516,col 9)",
            "(line 517,col 9)-(line 520,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.doTestEbeBinaryOperationDimensionMismatch(org.apache.commons.math3.linear.RealVectorAbstractTest.BinaryOperation)",
        "snippet": "    private void doTestEbeBinaryOperationDimensionMismatch(final BinaryOperation op) {\n        final int n = 10;\n        switch (op) {\n            case ADD:\n                create(new double[n]).add(create(new double[n + 1]));\n                break;\n            case SUB:\n                create(new double[n]).subtract(create(new double[n + 1]));\n                break;\n            case MUL:\n                create(new double[n]).ebeMultiply(create(new double[n + 1]));\n                break;\n            case DIV:\n                create(new double[n]).ebeDivide(create(new double[n + 1]));\n                break;\n            default:\n                throw new AssertionError(\"unexpected value\");\n        }\n    }\n",
        "begin_line": 523,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 524,col 9)-(line 524,col 25)",
            "(line 525,col 9)-(line 540,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddSameType()",
        "snippet": "    @Test\n    public void testAddSameType() {\n        doTestEbeBinaryOperation(BinaryOperation.ADD, false);\n    }\n",
        "begin_line": 543,
        "end_line": 546,
        "comment": "",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddMixedTypes()",
        "snippet": "    @Test\n    public void testAddMixedTypes() {\n        doTestEbeBinaryOperation(BinaryOperation.ADD, true);\n    }\n",
        "begin_line": 548,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 550,col 9)-(line 550,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testAddDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testAddDimensionMismatch() {\n        doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.ADD);\n    }\n",
        "begin_line": 553,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 555,col 9)-(line 555,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSubtractSameType()",
        "snippet": "    @Test\n    public void testSubtractSameType() {\n        doTestEbeBinaryOperation(BinaryOperation.SUB, false);\n    }\n",
        "begin_line": 558,
        "end_line": 561,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSubtractMixedTypes()",
        "snippet": "    @Test\n    public void testSubtractMixedTypes() {\n        doTestEbeBinaryOperation(BinaryOperation.SUB, true);\n    }\n",
        "begin_line": 563,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 565,col 9)-(line 565,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSubtractDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testSubtractDimensionMismatch() {\n        doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.SUB);\n    }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 570,col 9)-(line 570,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplySameType()",
        "snippet": "    @Test\n    public void testEbeMultiplySameType() {\n        doTestEbeBinaryOperation(BinaryOperation.MUL, false);\n    }\n",
        "begin_line": 573,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 575,col 9)-(line 575,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyMixedTypes()",
        "snippet": "    @Test\n    public void testEbeMultiplyMixedTypes() {\n        doTestEbeBinaryOperation(BinaryOperation.MUL, true);\n    }\n",
        "begin_line": 578,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeMultiplyDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testEbeMultiplyDimensionMismatch() {\n        doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.MUL);\n    }\n",
        "begin_line": 583,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 9)-(line 585,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeDivideSameType()",
        "snippet": "    @Test\n    public void testEbeDivideSameType() {\n        doTestEbeBinaryOperation(BinaryOperation.DIV, false);\n    }\n",
        "begin_line": 588,
        "end_line": 591,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeDivideMixedTypes()",
        "snippet": "    @Test\n    public void testEbeDivideMixedTypes() {\n        doTestEbeBinaryOperation(BinaryOperation.DIV, true);\n    }\n",
        "begin_line": 593,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 595,col 9)-(line 595,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testEbeDivideDimensionMismatch()",
        "snippet": "    @Test(expected = DimensionMismatchException.class)\n    public void testEbeDivideDimensionMismatch() {\n        doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.DIV);\n    }\n",
        "begin_line": 598,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testDataInOut()",
        "snippet": "    @Test\n    public void testDataInOut() {\n        final RealVector v1 = create(vec1);\n        final RealVector v2 = create(vec2);\n        final RealVector v4 = create(vec4);\n        final RealVector v2_t = createAlien(vec2);\n\n        final RealVector v_set1 = v1.copy();\n        v_set1.setEntry(1, 11.0);\n        Assert.assertEquals(\"testData is 11.0 \", 11.0, v_set1.getEntry(1), 0);\n        try {\n            v_set1.setEntry(3, 11.0);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        final RealVector v_set2 = v4.copy();\n        v_set2.setSubVector(3, v1);\n        Assert.assertEquals(\"testData is 1.0 \", 1.0, v_set2.getEntry(3), 0);\n        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set2.getEntry(6), 0);\n        try {\n            v_set2.setSubVector(7, v1);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        final RealVector v_set3 = v1.copy();\n        v_set3.set(13.0);\n        Assert.assertEquals(\"testData is 13.0 \", 13.0, v_set3.getEntry(2), 0);\n\n        try {\n            v_set3.getEntry(23);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        final RealVector v_set4 = v4.copy();\n        v_set4.setSubVector(3, v2_t);\n        Assert.assertEquals(\"testData is 1.0 \", 4.0, v_set4.getEntry(3), 0);\n        Assert.assertEquals(\"testData is 7.0 \", 7.0, v_set4.getEntry(6), 0);\n        try {\n            v_set4.setSubVector(7, v2_t);\n            Assert.fail(\"OutOfRangeException expected\");\n        } catch (OutOfRangeException ex) {\n            // expected behavior\n        }\n\n        final RealVector vout10 = v1.copy();\n        final RealVector vout10_2 = v1.copy();\n        Assert.assertEquals(vout10, vout10_2);\n        vout10_2.setEntry(0, 1.1);\n        Assert.assertNotSame(vout10, vout10_2);\n    }\n",
        "begin_line": 603,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 605,col 9)-(line 605,col 43)",
            "(line 606,col 9)-(line 606,col 43)",
            "(line 607,col 9)-(line 607,col 43)",
            "(line 608,col 9)-(line 608,col 50)",
            "(line 610,col 9)-(line 610,col 44)",
            "(line 611,col 9)-(line 611,col 33)",
            "(line 612,col 9)-(line 612,col 78)",
            "(line 613,col 9)-(line 618,col 9)",
            "(line 620,col 9)-(line 620,col 44)",
            "(line 621,col 9)-(line 621,col 35)",
            "(line 622,col 9)-(line 622,col 76)",
            "(line 623,col 9)-(line 623,col 76)",
            "(line 624,col 9)-(line 629,col 9)",
            "(line 631,col 9)-(line 631,col 44)",
            "(line 632,col 9)-(line 632,col 25)",
            "(line 633,col 9)-(line 633,col 78)",
            "(line 635,col 9)-(line 640,col 9)",
            "(line 642,col 9)-(line 642,col 44)",
            "(line 643,col 9)-(line 643,col 37)",
            "(line 644,col 9)-(line 644,col 76)",
            "(line 645,col 9)-(line 645,col 76)",
            "(line 646,col 9)-(line 651,col 9)",
            "(line 653,col 9)-(line 653,col 44)",
            "(line 654,col 9)-(line 654,col 46)",
            "(line 655,col 9)-(line 655,col 46)",
            "(line 656,col 9)-(line 656,col 34)",
            "(line 657,col 9)-(line 657,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testMapFunctions()",
        "snippet": "    @Test\n    public void testMapFunctions() {\n        final RealVector v1 = create(vec1);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAdd = v1.mapAdd(2.0d);\n        double[] result_mapAdd = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAdd,v_mapAdd.toArray(),normTolerance);\n\n        //octave =  v1 .+ 2.0\n        RealVector v_mapAddToSelf = v1.copy();\n        v_mapAddToSelf.mapAddToSelf(2.0d);\n        double[] result_mapAddToSelf = {3d, 4d, 5d};\n        assertClose(\"compare vectors\" ,result_mapAddToSelf,v_mapAddToSelf.toArray(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtract = v1.mapSubtract(2.0d);\n        double[] result_mapSubtract = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtract,v_mapSubtract.toArray(),normTolerance);\n\n        //octave =  v1 .- 2.0\n        RealVector v_mapSubtractToSelf = v1.copy();\n        v_mapSubtractToSelf.mapSubtractToSelf(2.0d);\n        double[] result_mapSubtractToSelf = {-1d, 0d, 1d};\n        assertClose(\"compare vectors\" ,result_mapSubtractToSelf,v_mapSubtractToSelf.toArray(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiply = v1.mapMultiply(2.0d);\n        double[] result_mapMultiply = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiply,v_mapMultiply.toArray(),normTolerance);\n\n        //octave =  v1 .* 2.0\n        RealVector v_mapMultiplyToSelf = v1.copy();\n        v_mapMultiplyToSelf.mapMultiplyToSelf(2.0d);\n        double[] result_mapMultiplyToSelf = {2d, 4d, 6d};\n        assertClose(\"compare vectors\" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.toArray(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivide = v1.mapDivide(2.0d);\n        double[] result_mapDivide = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivide,v_mapDivide.toArray(),normTolerance);\n\n        //octave =  v1 ./ 2.0\n        RealVector v_mapDivideToSelf = v1.copy();\n        v_mapDivideToSelf.mapDivideToSelf(2.0d);\n        double[] result_mapDivideToSelf = {.5d, 1d, 1.5d};\n        assertClose(\"compare vectors\" ,result_mapDivideToSelf,v_mapDivideToSelf.toArray(),normTolerance);\n\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPow = v1.map(new Power(2));\n        double[] result_mapPow = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPow,v_mapPow.toArray(),normTolerance);\n\n        //octave =  v1 .^ 2.0\n        RealVector v_mapPowToSelf = v1.copy();\n        v_mapPowToSelf.mapToSelf(new Power(2));\n        double[] result_mapPowToSelf = {1d, 4d, 9d};\n        assertClose(\"compare vectors\" ,result_mapPowToSelf,v_mapPowToSelf.toArray(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExp = v1.map(new Exp());\n        double[] result_mapExp = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExp,v_mapExp.toArray(),normTolerance);\n\n        //octave =  exp(v1)\n        RealVector v_mapExpToSelf = v1.copy();\n        v_mapExpToSelf.mapToSelf(new Exp());\n        double[] result_mapExpToSelf = {2.718281828459045e+00d,7.389056098930650e+00d, 2.008553692318767e+01d};\n        assertClose(\"compare vectors\" ,result_mapExpToSelf,v_mapExpToSelf.toArray(),normTolerance);\n\n\n        //octave =  ???\n        RealVector v_mapExpm1 = v1.map(new Expm1());\n        double[] result_mapExpm1 = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1,v_mapExpm1.toArray(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapExpm1ToSelf = v1.copy();\n        v_mapExpm1ToSelf.mapToSelf(new Expm1());\n        double[] result_mapExpm1ToSelf = {1.718281828459045d,6.38905609893065d, 19.085536923187668d};\n        assertClose(\"compare vectors\" ,result_mapExpm1ToSelf,v_mapExpm1ToSelf.toArray(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog = v1.map(new Log());\n        double[] result_mapLog = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLog,v_mapLog.toArray(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLogToSelf = v1.copy();\n        v_mapLogToSelf.mapToSelf(new Log());\n        double[] result_mapLogToSelf = {0d,6.931471805599453e-01d, 1.098612288668110e+00d};\n        assertClose(\"compare vectors\" ,result_mapLogToSelf,v_mapLogToSelf.toArray(),normTolerance);\n\n        //octave =  log10(v1)\n        RealVector v_mapLog10 = v1.map(new Log10());\n        double[] result_mapLog10 = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10,v_mapLog10.toArray(),normTolerance);\n\n        //octave =  log(v1)\n        RealVector v_mapLog10ToSelf = v1.copy();\n        v_mapLog10ToSelf.mapToSelf(new Log10());\n        double[] result_mapLog10ToSelf = {0d,3.010299956639812e-01d, 4.771212547196624e-01d};\n        assertClose(\"compare vectors\" ,result_mapLog10ToSelf,v_mapLog10ToSelf.toArray(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1p = v1.map(new Log1p());\n        double[] result_mapLog1p = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1p,v_mapLog1p.toArray(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapLog1pToSelf = v1.copy();\n        v_mapLog1pToSelf.mapToSelf(new Log1p());\n        double[] result_mapLog1pToSelf = {0.6931471805599453d,1.0986122886681096d,1.3862943611198906d};\n        assertClose(\"compare vectors\" ,result_mapLog1pToSelf,v_mapLog1pToSelf.toArray(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCosh = v1.map(new Cosh());\n        double[] result_mapCosh = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCosh,v_mapCosh.toArray(),normTolerance);\n\n        //octave =  cosh(v1)\n        RealVector v_mapCoshToSelf = v1.copy();\n        v_mapCoshToSelf.mapToSelf(new Cosh());\n        double[] result_mapCoshToSelf = {1.543080634815244e+00d,3.762195691083631e+00d, 1.006766199577777e+01d};\n        assertClose(\"compare vectors\" ,result_mapCoshToSelf,v_mapCoshToSelf.toArray(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinh = v1.map(new Sinh());\n        double[] result_mapSinh = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinh,v_mapSinh.toArray(),normTolerance);\n\n        //octave =  sinh(v1)\n        RealVector v_mapSinhToSelf = v1.copy();\n        v_mapSinhToSelf.mapToSelf(new Sinh());\n        double[] result_mapSinhToSelf = {1.175201193643801e+00d,3.626860407847019e+00d, 1.001787492740990e+01d};\n        assertClose(\"compare vectors\" ,result_mapSinhToSelf,v_mapSinhToSelf.toArray(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanh = v1.map(new Tanh());\n        double[] result_mapTanh = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanh,v_mapTanh.toArray(),normTolerance);\n\n        //octave =  tanh(v1)\n        RealVector v_mapTanhToSelf = v1.copy();\n        v_mapTanhToSelf.mapToSelf(new Tanh());\n        double[] result_mapTanhToSelf = {7.615941559557649e-01d,9.640275800758169e-01d,9.950547536867305e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanhToSelf,v_mapTanhToSelf.toArray(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCos = v1.map(new Cos());\n        double[] result_mapCos = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCos,v_mapCos.toArray(),normTolerance);\n\n        //octave =  cos(v1)\n        RealVector v_mapCosToSelf = v1.copy();\n        v_mapCosToSelf.mapToSelf(new Cos());\n        double[] result_mapCosToSelf = {5.403023058681398e-01d,-4.161468365471424e-01d, -9.899924966004454e-01d};\n        assertClose(\"compare vectors\" ,result_mapCosToSelf,v_mapCosToSelf.toArray(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSin = v1.map(new Sin());\n        double[] result_mapSin = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSin,v_mapSin.toArray(),normTolerance);\n\n        //octave =  sin(v1)\n        RealVector v_mapSinToSelf = v1.copy();\n        v_mapSinToSelf.mapToSelf(new Sin());\n        double[] result_mapSinToSelf = {8.414709848078965e-01d,9.092974268256817e-01d,1.411200080598672e-01d};\n        assertClose(\"compare vectors\" ,result_mapSinToSelf,v_mapSinToSelf.toArray(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTan = v1.map(new Tan());\n        double[] result_mapTan = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTan,v_mapTan.toArray(),normTolerance);\n\n        //octave =  tan(v1)\n        RealVector v_mapTanToSelf = v1.copy();\n        v_mapTanToSelf.mapToSelf(new Tan());\n        double[] result_mapTanToSelf = {1.557407724654902e+00d,-2.185039863261519e+00d,-1.425465430742778e-01d};\n        assertClose(\"compare vectors\" ,result_mapTanToSelf,v_mapTanToSelf.toArray(),normTolerance);\n\n        double[] vat_a = {0d, 0.5d, 1.0d};\n        final RealVector vat = create(vat_a);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcos = vat.map(new Acos());\n        double[] result_mapAcos = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcos,v_mapAcos.toArray(),normTolerance);\n\n        //octave =  acos(vat)\n        RealVector v_mapAcosToSelf = vat.copy();\n        v_mapAcosToSelf.mapToSelf(new Acos());\n        double[] result_mapAcosToSelf = {1.570796326794897e+00d,1.047197551196598e+00d, 0.0d};\n        assertClose(\"compare vectors\" ,result_mapAcosToSelf,v_mapAcosToSelf.toArray(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsin = vat.map(new Asin());\n        double[] result_mapAsin = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsin,v_mapAsin.toArray(),normTolerance);\n\n        //octave =  asin(vat)\n        RealVector v_mapAsinToSelf = vat.copy();\n        v_mapAsinToSelf.mapToSelf(new Asin());\n        double[] result_mapAsinToSelf = {0.0d,5.235987755982989e-01d,1.570796326794897e+00d};\n        assertClose(\"compare vectors\" ,result_mapAsinToSelf,v_mapAsinToSelf.toArray(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtan = vat.map(new Atan());\n        double[] result_mapAtan = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtan,v_mapAtan.toArray(),normTolerance);\n\n        //octave =  atan(vat)\n        RealVector v_mapAtanToSelf = vat.copy();\n        v_mapAtanToSelf.mapToSelf(new Atan());\n        double[] result_mapAtanToSelf = {0.0d,4.636476090008061e-01d,7.853981633974483e-01d};\n        assertClose(\"compare vectors\" ,result_mapAtanToSelf,v_mapAtanToSelf.toArray(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInv = v1.map(new Inverse());\n        double[] result_mapInv = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInv,v_mapInv.toArray(),normTolerance);\n\n        //octave =  v1 .^-1\n        RealVector v_mapInvToSelf = v1.copy();\n        v_mapInvToSelf.mapToSelf(new Inverse());\n        double[] result_mapInvToSelf = {1d,0.5d,3.333333333333333e-01d};\n        assertClose(\"compare vectors\" ,result_mapInvToSelf,v_mapInvToSelf.toArray(),normTolerance);\n\n        double[] abs_a = {-1.0d, 0.0d, 1.0d};\n        final RealVector abs_v = create(abs_a);\n\n        //octave =  abs(abs_v)\n        RealVector v_mapAbs = abs_v.map(new Abs());\n        double[] result_mapAbs = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbs,v_mapAbs.toArray(),normTolerance);\n\n        //octave = abs(abs_v)\n        RealVector v_mapAbsToSelf = abs_v.copy();\n        v_mapAbsToSelf.mapToSelf(new Abs());\n        double[] result_mapAbsToSelf = {1d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapAbsToSelf,v_mapAbsToSelf.toArray(),normTolerance);\n\n        //octave =   sqrt(v1)\n        RealVector v_mapSqrt = v1.map(new Sqrt());\n        double[] result_mapSqrt = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrt,v_mapSqrt.toArray(),normTolerance);\n\n        //octave =  sqrt(v1)\n        RealVector v_mapSqrtToSelf = v1.copy();\n        v_mapSqrtToSelf.mapToSelf(new Sqrt());\n        double[] result_mapSqrtToSelf = {1d,1.414213562373095e+00d,1.732050807568877e+00d};\n        assertClose(\"compare vectors\" ,result_mapSqrtToSelf,v_mapSqrtToSelf.toArray(),normTolerance);\n\n        double[] cbrt_a = {-2.0d, 0.0d, 2.0d};\n        final RealVector cbrt_v = create(cbrt_a);\n\n        //octave =  ???\n        RealVector v_mapCbrt = cbrt_v.map(new Cbrt());\n        double[] result_mapCbrt = {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrt,v_mapCbrt.toArray(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapCbrtToSelf = cbrt_v.copy();\n        v_mapCbrtToSelf.mapToSelf(new Cbrt());\n        double[] result_mapCbrtToSelf =  {-1.2599210498948732d,0d,1.2599210498948732d};\n        assertClose(\"compare vectors\" ,result_mapCbrtToSelf,v_mapCbrtToSelf.toArray(),normTolerance);\n\n        double[] ceil_a = {-1.1d, 0.9d, 1.1d};\n        ArrayRealVector ceil_v = new ArrayRealVector(ceil_a);\n\n        //octave =  ceil(ceil_v)\n        RealVector v_mapCeil = ceil_v.map(new Ceil());\n        double[] result_mapCeil = {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeil,v_mapCeil.toArray(),normTolerance);\n\n        //octave = ceil(ceil_v)\n        RealVector v_mapCeilToSelf = ceil_v.copy();\n        v_mapCeilToSelf.mapToSelf(new Ceil());\n        double[] result_mapCeilToSelf =  {-1d,1d,2d};\n        assertClose(\"compare vectors\" ,result_mapCeilToSelf,v_mapCeilToSelf.toArray(),normTolerance);\n\n        //octave =  floor(ceil_v)\n        RealVector v_mapFloor = ceil_v.map(new Floor());\n        double[] result_mapFloor = {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloor,v_mapFloor.toArray(),normTolerance);\n\n        //octave = floor(ceil_v)\n        RealVector v_mapFloorToSelf = ceil_v.copy();\n        v_mapFloorToSelf.mapToSelf(new Floor());\n        double[] result_mapFloorToSelf =  {-2d,0d,1d};\n        assertClose(\"compare vectors\" ,result_mapFloorToSelf,v_mapFloorToSelf.toArray(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapRint = ceil_v.map(new Rint());\n        double[] result_mapRint = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRint,v_mapRint.toArray(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapRintToSelf = ceil_v.copy();\n        v_mapRintToSelf.mapToSelf(new Rint());\n        double[] result_mapRintToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapRintToSelf,v_mapRintToSelf.toArray(),normTolerance);\n\n        //octave =  ???\n        RealVector v_mapSignum = ceil_v.map(new Signum());\n        double[] result_mapSignum = {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignum,v_mapSignum.toArray(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapSignumToSelf = ceil_v.copy();\n        v_mapSignumToSelf.mapToSelf(new Signum());\n        double[] result_mapSignumToSelf =  {-1d,1d,1d};\n        assertClose(\"compare vectors\" ,result_mapSignumToSelf,v_mapSignumToSelf.toArray(),normTolerance);\n\n\n        // Is with the used resolutions of limited value as test\n        //octave =  ???\n        RealVector v_mapUlp = ceil_v.map(new Ulp());\n        double[] result_mapUlp = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlp,v_mapUlp.toArray(),normTolerance);\n\n        //octave = ???\n        RealVector v_mapUlpToSelf = ceil_v.copy();\n        v_mapUlpToSelf.mapToSelf(new Ulp());\n        double[] result_mapUlpToSelf = {2.220446049250313E-16d,1.1102230246251565E-16d,2.220446049250313E-16d};\n        assertClose(\"compare vectors\" ,result_mapUlpToSelf,v_mapUlpToSelf.toArray(),normTolerance);\n    }\n",
        "begin_line": 660,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 662,col 9)-(line 662,col 43)",
            "(line 665,col 9)-(line 665,col 46)",
            "(line 666,col 9)-(line 666,col 46)",
            "(line 667,col 9)-(line 667,col 87)",
            "(line 670,col 9)-(line 670,col 46)",
            "(line 671,col 9)-(line 671,col 42)",
            "(line 672,col 9)-(line 672,col 52)",
            "(line 673,col 9)-(line 673,col 99)",
            "(line 676,col 9)-(line 676,col 56)",
            "(line 677,col 9)-(line 677,col 52)",
            "(line 678,col 9)-(line 678,col 97)",
            "(line 681,col 9)-(line 681,col 51)",
            "(line 682,col 9)-(line 682,col 52)",
            "(line 683,col 9)-(line 683,col 58)",
            "(line 684,col 9)-(line 684,col 109)",
            "(line 687,col 9)-(line 687,col 56)",
            "(line 688,col 9)-(line 688,col 51)",
            "(line 689,col 9)-(line 689,col 97)",
            "(line 692,col 9)-(line 692,col 51)",
            "(line 693,col 9)-(line 693,col 52)",
            "(line 694,col 9)-(line 694,col 57)",
            "(line 695,col 9)-(line 695,col 109)",
            "(line 698,col 9)-(line 698,col 52)",
            "(line 699,col 9)-(line 699,col 52)",
            "(line 700,col 9)-(line 700,col 93)",
            "(line 703,col 9)-(line 703,col 49)",
            "(line 704,col 9)-(line 704,col 48)",
            "(line 705,col 9)-(line 705,col 58)",
            "(line 706,col 9)-(line 706,col 105)",
            "(line 710,col 9)-(line 710,col 51)",
            "(line 711,col 9)-(line 711,col 46)",
            "(line 712,col 9)-(line 712,col 87)",
            "(line 715,col 9)-(line 715,col 46)",
            "(line 716,col 9)-(line 716,col 47)",
            "(line 717,col 9)-(line 717,col 52)",
            "(line 718,col 9)-(line 718,col 99)",
            "(line 721,col 9)-(line 721,col 48)",
            "(line 722,col 9)-(line 722,col 105)",
            "(line 723,col 9)-(line 723,col 87)",
            "(line 726,col 9)-(line 726,col 46)",
            "(line 727,col 9)-(line 727,col 44)",
            "(line 728,col 9)-(line 728,col 111)",
            "(line 729,col 9)-(line 729,col 99)",
            "(line 733,col 9)-(line 733,col 52)",
            "(line 734,col 9)-(line 734,col 95)",
            "(line 735,col 9)-(line 735,col 91)",
            "(line 738,col 9)-(line 738,col 48)",
            "(line 739,col 9)-(line 739,col 48)",
            "(line 740,col 9)-(line 740,col 101)",
            "(line 741,col 9)-(line 741,col 103)",
            "(line 744,col 9)-(line 744,col 48)",
            "(line 745,col 9)-(line 745,col 85)",
            "(line 746,col 9)-(line 746,col 87)",
            "(line 749,col 9)-(line 749,col 46)",
            "(line 750,col 9)-(line 750,col 44)",
            "(line 751,col 9)-(line 751,col 91)",
            "(line 752,col 9)-(line 752,col 99)",
            "(line 755,col 9)-(line 755,col 52)",
            "(line 756,col 9)-(line 756,col 87)",
            "(line 757,col 9)-(line 757,col 91)",
            "(line 760,col 9)-(line 760,col 48)",
            "(line 761,col 9)-(line 761,col 48)",
            "(line 762,col 9)-(line 762,col 93)",
            "(line 763,col 9)-(line 763,col 103)",
            "(line 766,col 9)-(line 766,col 52)",
            "(line 767,col 9)-(line 767,col 97)",
            "(line 768,col 9)-(line 768,col 91)",
            "(line 771,col 9)-(line 771,col 48)",
            "(line 772,col 9)-(line 772,col 48)",
            "(line 773,col 9)-(line 773,col 103)",
            "(line 774,col 9)-(line 774,col 103)",
            "(line 777,col 9)-(line 777,col 50)",
            "(line 778,col 9)-(line 778,col 106)",
            "(line 779,col 9)-(line 779,col 89)",
            "(line 782,col 9)-(line 782,col 47)",
            "(line 783,col 9)-(line 783,col 46)",
            "(line 784,col 9)-(line 784,col 112)",
            "(line 785,col 9)-(line 785,col 101)",
            "(line 788,col 9)-(line 788,col 50)",
            "(line 789,col 9)-(line 789,col 106)",
            "(line 790,col 9)-(line 790,col 89)",
            "(line 793,col 9)-(line 793,col 47)",
            "(line 794,col 9)-(line 794,col 46)",
            "(line 795,col 9)-(line 795,col 112)",
            "(line 796,col 9)-(line 796,col 101)",
            "(line 799,col 9)-(line 799,col 50)",
            "(line 800,col 9)-(line 800,col 105)",
            "(line 801,col 9)-(line 801,col 89)",
            "(line 804,col 9)-(line 804,col 47)",
            "(line 805,col 9)-(line 805,col 46)",
            "(line 806,col 9)-(line 806,col 111)",
            "(line 807,col 9)-(line 807,col 101)",
            "(line 810,col 9)-(line 810,col 48)",
            "(line 811,col 9)-(line 811,col 107)",
            "(line 812,col 9)-(line 812,col 87)",
            "(line 815,col 9)-(line 815,col 46)",
            "(line 816,col 9)-(line 816,col 44)",
            "(line 817,col 9)-(line 817,col 113)",
            "(line 818,col 9)-(line 818,col 99)",
            "(line 821,col 9)-(line 821,col 48)",
            "(line 822,col 9)-(line 822,col 104)",
            "(line 823,col 9)-(line 823,col 87)",
            "(line 826,col 9)-(line 826,col 46)",
            "(line 827,col 9)-(line 827,col 44)",
            "(line 828,col 9)-(line 828,col 110)",
            "(line 829,col 9)-(line 829,col 99)",
            "(line 832,col 9)-(line 832,col 48)",
            "(line 833,col 9)-(line 833,col 106)",
            "(line 834,col 9)-(line 834,col 87)",
            "(line 837,col 9)-(line 837,col 46)",
            "(line 838,col 9)-(line 838,col 44)",
            "(line 839,col 9)-(line 839,col 112)",
            "(line 840,col 9)-(line 840,col 99)",
            "(line 842,col 9)-(line 842,col 42)",
            "(line 843,col 9)-(line 843,col 45)",
            "(line 846,col 9)-(line 846,col 51)",
            "(line 847,col 9)-(line 847,col 88)",
            "(line 848,col 9)-(line 848,col 89)",
            "(line 851,col 9)-(line 851,col 48)",
            "(line 852,col 9)-(line 852,col 46)",
            "(line 853,col 9)-(line 853,col 94)",
            "(line 854,col 9)-(line 854,col 101)",
            "(line 857,col 9)-(line 857,col 51)",
            "(line 858,col 9)-(line 858,col 87)",
            "(line 859,col 9)-(line 859,col 89)",
            "(line 862,col 9)-(line 862,col 48)",
            "(line 863,col 9)-(line 863,col 46)",
            "(line 864,col 9)-(line 864,col 93)",
            "(line 865,col 9)-(line 865,col 101)",
            "(line 868,col 9)-(line 868,col 51)",
            "(line 869,col 9)-(line 869,col 87)",
            "(line 870,col 9)-(line 870,col 89)",
            "(line 873,col 9)-(line 873,col 48)",
            "(line 874,col 9)-(line 874,col 46)",
            "(line 875,col 9)-(line 875,col 93)",
            "(line 876,col 9)-(line 876,col 101)",
            "(line 879,col 9)-(line 879,col 52)",
            "(line 880,col 9)-(line 880,col 66)",
            "(line 881,col 9)-(line 881,col 87)",
            "(line 884,col 9)-(line 884,col 46)",
            "(line 885,col 9)-(line 885,col 48)",
            "(line 886,col 9)-(line 886,col 72)",
            "(line 887,col 9)-(line 887,col 99)",
            "(line 889,col 9)-(line 889,col 45)",
            "(line 890,col 9)-(line 890,col 47)",
            "(line 893,col 9)-(line 893,col 51)",
            "(line 894,col 9)-(line 894,col 44)",
            "(line 895,col 9)-(line 895,col 87)",
            "(line 898,col 9)-(line 898,col 49)",
            "(line 899,col 9)-(line 899,col 44)",
            "(line 900,col 9)-(line 900,col 50)",
            "(line 901,col 9)-(line 901,col 99)",
            "(line 904,col 9)-(line 904,col 50)",
            "(line 905,col 9)-(line 905,col 85)",
            "(line 906,col 9)-(line 906,col 89)",
            "(line 909,col 9)-(line 909,col 47)",
            "(line 910,col 9)-(line 910,col 46)",
            "(line 911,col 9)-(line 911,col 91)",
            "(line 912,col 9)-(line 912,col 101)",
            "(line 914,col 9)-(line 914,col 46)",
            "(line 915,col 9)-(line 915,col 49)",
            "(line 918,col 9)-(line 918,col 54)",
            "(line 919,col 9)-(line 919,col 80)",
            "(line 920,col 9)-(line 920,col 89)",
            "(line 923,col 9)-(line 923,col 51)",
            "(line 924,col 9)-(line 924,col 46)",
            "(line 925,col 9)-(line 925,col 87)",
            "(line 926,col 9)-(line 926,col 101)",
            "(line 928,col 9)-(line 928,col 46)",
            "(line 929,col 9)-(line 929,col 61)",
            "(line 932,col 9)-(line 932,col 54)",
            "(line 933,col 9)-(line 933,col 46)",
            "(line 934,col 9)-(line 934,col 89)",
            "(line 937,col 9)-(line 937,col 51)",
            "(line 938,col 9)-(line 938,col 46)",
            "(line 939,col 9)-(line 939,col 53)",
            "(line 940,col 9)-(line 940,col 101)",
            "(line 943,col 9)-(line 943,col 56)",
            "(line 944,col 9)-(line 944,col 47)",
            "(line 945,col 9)-(line 945,col 91)",
            "(line 948,col 9)-(line 948,col 52)",
            "(line 949,col 9)-(line 949,col 48)",
            "(line 950,col 9)-(line 950,col 54)",
            "(line 951,col 9)-(line 951,col 103)",
            "(line 954,col 9)-(line 954,col 54)",
            "(line 955,col 9)-(line 955,col 46)",
            "(line 956,col 9)-(line 956,col 89)",
            "(line 959,col 9)-(line 959,col 51)",
            "(line 960,col 9)-(line 960,col 46)",
            "(line 961,col 9)-(line 961,col 53)",
            "(line 962,col 9)-(line 962,col 101)",
            "(line 965,col 9)-(line 965,col 58)",
            "(line 966,col 9)-(line 966,col 48)",
            "(line 967,col 9)-(line 967,col 93)",
            "(line 970,col 9)-(line 970,col 53)",
            "(line 971,col 9)-(line 971,col 50)",
            "(line 972,col 9)-(line 972,col 55)",
            "(line 973,col 9)-(line 973,col 105)",
            "(line 978,col 9)-(line 978,col 52)",
            "(line 979,col 9)-(line 979,col 105)",
            "(line 980,col 9)-(line 980,col 87)",
            "(line 983,col 9)-(line 983,col 50)",
            "(line 984,col 9)-(line 984,col 44)",
            "(line 985,col 9)-(line 985,col 111)",
            "(line 986,col 9)-(line 986,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testBasicFunctions()",
        "snippet": "    @Test\n    public void testBasicFunctions() {\n        final RealVector v1 = create(vec1);\n        final RealVector v2 = create(vec2);\n        final RealVector v5 = create(vec5);\n        final RealVector v_null = create(vec_null);\n\n        final RealVector v2_t = createAlien(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        Assert.assertEquals(\"compare values  \", 8.4261497731763586307,\n                            d_getNorm, normTolerance);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        Assert.assertEquals(\"compare values  \", 17.0, d_getL1Norm,\n                            normTolerance);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        Assert.assertEquals(\"compare values  \", 6.0, d_getLInfNorm,\n                            normTolerance);\n\n        // octave = sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n                            dist, normTolerance);\n\n        // octave = sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        Assert.assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),\n                            dist_2, normTolerance);\n\n        // octave = ???\n        double d_getL1Distance = v1.getL1Distance(v2);\n        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance,\n                            normTolerance);\n\n        double d_getL1Distance_2 = v1.getL1Distance(v2_t);\n        Assert.assertEquals(\"compare values  \", 9d, d_getL1Distance_2,\n                            normTolerance);\n\n        // octave = ???\n        double d_getLInfDistance = v1.getLInfDistance(v2);\n        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance,\n                            normTolerance);\n\n        double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);\n        Assert.assertEquals(\"compare values  \", 3d, d_getLInfDistance_2,\n                            normTolerance);\n\n        // octave dot(v1,v2)\n        double dot = v1.dotProduct(v2);\n        Assert.assertEquals(\"compare val \", 32d, dot, normTolerance);\n\n        // octave dot(v1,v2_t)\n        double dot_2 = v1.dotProduct(v2_t);\n        Assert.assertEquals(\"compare val \", 32d, dot_2, normTolerance);\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        Assert.assertEquals(\"compare val \", 4d, m_outerProduct.getEntry(0, 0),\n                            normTolerance);\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        Assert.assertEquals(\"compare val \", 4d,\n                            m_outerProduct_2.getEntry(0, 0), normTolerance);\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\", v_unitVector.toArray(),\n                    v_unitVector_2.toArray(), normTolerance);\n\n        try {\n            v_null.unitVector();\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected behavior\n        }\n\n        RealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.toArray(),v_unitize.toArray(),normTolerance);\n        try {\n            v_null.unitize();\n            Assert.fail(\"Expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected behavior\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.toArray(), result_projection, normTolerance);\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.toArray(), result_projection_2, normTolerance);\n    }\n",
        "begin_line": 989,
        "end_line": 1086,
        "comment": "",
        "child_ranges": [
            "(line 991,col 9)-(line 991,col 43)",
            "(line 992,col 9)-(line 992,col 43)",
            "(line 993,col 9)-(line 993,col 43)",
            "(line 994,col 9)-(line 994,col 51)",
            "(line 996,col 9)-(line 996,col 50)",
            "(line 999,col 9)-(line 999,col 40)",
            "(line 1000,col 9)-(line 1001,col 54)",
            "(line 1004,col 9)-(line 1004,col 44)",
            "(line 1005,col 9)-(line 1006,col 43)",
            "(line 1009,col 9)-(line 1009,col 48)",
            "(line 1010,col 9)-(line 1011,col 43)",
            "(line 1014,col 9)-(line 1014,col 41)",
            "(line 1015,col 9)-(line 1016,col 49)",
            "(line 1019,col 9)-(line 1019,col 45)",
            "(line 1020,col 9)-(line 1021,col 51)",
            "(line 1024,col 9)-(line 1024,col 54)",
            "(line 1025,col 9)-(line 1026,col 43)",
            "(line 1028,col 9)-(line 1028,col 58)",
            "(line 1029,col 9)-(line 1030,col 43)",
            "(line 1033,col 9)-(line 1033,col 58)",
            "(line 1034,col 9)-(line 1035,col 43)",
            "(line 1037,col 9)-(line 1037,col 62)",
            "(line 1038,col 9)-(line 1039,col 43)",
            "(line 1042,col 9)-(line 1042,col 39)",
            "(line 1043,col 9)-(line 1043,col 69)",
            "(line 1046,col 9)-(line 1046,col 43)",
            "(line 1047,col 9)-(line 1047,col 71)",
            "(line 1049,col 9)-(line 1049,col 56)",
            "(line 1050,col 9)-(line 1051,col 43)",
            "(line 1053,col 9)-(line 1053,col 60)",
            "(line 1054,col 9)-(line 1055,col 76)",
            "(line 1057,col 9)-(line 1057,col 50)",
            "(line 1058,col 9)-(line 1058,col 63)",
            "(line 1059,col 9)-(line 1060,col 61)",
            "(line 1062,col 9)-(line 1067,col 9)",
            "(line 1069,col 9)-(line 1069,col 41)",
            "(line 1070,col 9)-(line 1070,col 28)",
            "(line 1071,col 9)-(line 1071,col 96)",
            "(line 1072,col 9)-(line 1077,col 9)",
            "(line 1079,col 9)-(line 1079,col 52)",
            "(line 1080,col 9)-(line 1080,col 96)",
            "(line 1081,col 9)-(line 1081,col 94)",
            "(line 1083,col 9)-(line 1083,col 56)",
            "(line 1084,col 9)-(line 1084,col 98)",
            "(line 1085,col 9)-(line 1085,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testOuterProduct()",
        "snippet": "    @Test\n    public void testOuterProduct() {\n        final RealVector u = create(new double[] {1, 2, -3});\n        final RealVector v = create(new double[] {4, -2});\n\n        final RealMatrix uv = u.outerProduct(v);\n\n        final double tol = Math.ulp(1d);\n        Assert.assertEquals(4, uv.getEntry(0, 0), tol);\n        Assert.assertEquals(-2, uv.getEntry(0, 1), tol);\n        Assert.assertEquals(8, uv.getEntry(1, 0), tol);\n        Assert.assertEquals(-4, uv.getEntry(1, 1), tol);\n        Assert.assertEquals(-12, uv.getEntry(2, 0), tol);\n        Assert.assertEquals(6, uv.getEntry(2, 1), tol);\n    }\n",
        "begin_line": 1088,
        "end_line": 1102,
        "comment": "",
        "child_ranges": [
            "(line 1090,col 9)-(line 1090,col 61)",
            "(line 1091,col 9)-(line 1091,col 58)",
            "(line 1093,col 9)-(line 1093,col 48)",
            "(line 1095,col 9)-(line 1095,col 40)",
            "(line 1096,col 9)-(line 1096,col 55)",
            "(line 1097,col 9)-(line 1097,col 56)",
            "(line 1098,col 9)-(line 1098,col 55)",
            "(line 1099,col 9)-(line 1099,col 56)",
            "(line 1100,col 9)-(line 1100,col 57)",
            "(line 1101,col 9)-(line 1101,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testMisc()",
        "snippet": "    @Test\n    public void testMisc() {\n        RealVector v1 = create(vec1);\n        RealVector v4 = create(vec4);\n        RealVector v4_2 = create(vec4);\n\n        String out1 = v1.toString();\n        Assert.assertTrue(\"some output \",  out1.length()!=0);\n        try {\n            v1.checkVectorDimensions(2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        }\n\n       try {\n            v1.checkVectorDimensions(v4);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        }\n\n        try {\n            v1.checkVectorDimensions(v4_2);\n            Assert.fail(\"MathIllegalArgumentException expected\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 1104,
        "end_line": 1132,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 9)-(line 1106,col 37)",
            "(line 1107,col 9)-(line 1107,col 37)",
            "(line 1108,col 9)-(line 1108,col 39)",
            "(line 1110,col 9)-(line 1110,col 36)",
            "(line 1111,col 9)-(line 1111,col 61)",
            "(line 1112,col 9)-(line 1117,col 9)",
            "(line 1119,col 8)-(line 1124,col 9)",
            "(line 1126,col 9)-(line 1131,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testPredicates()",
        "snippet": "    @Test\n    public void testPredicates() {\n        final RealVector v = create(new double[] { 0, 1, 2 });\n\n        v.setEntry(0, 0);\n        Assert.assertEquals(v, create(new double[] { 0, 1, 2 }));\n        Assert.assertNotSame(v, create(new double[] { 0, 1, 2 + FastMath.ulp(2)}));\n        Assert.assertNotSame(v, create(new double[] { 0, 1, 2, 3 }));\n\n        Assert.assertTrue(v.equals(v));\n        Assert.assertTrue(v.equals(v.copy()));\n        Assert.assertFalse(v.equals(null));\n        Assert.assertFalse(v.equals(v.getSubVector(0, v.getDimension() - 1)));\n        Assert.assertTrue(v.equals(v.getSubVector(0, v.getDimension())));\n    }\n",
        "begin_line": 1134,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1136,col 9)-(line 1136,col 62)",
            "(line 1138,col 9)-(line 1138,col 25)",
            "(line 1139,col 9)-(line 1139,col 65)",
            "(line 1140,col 9)-(line 1140,col 83)",
            "(line 1141,col 9)-(line 1141,col 69)",
            "(line 1143,col 9)-(line 1143,col 39)",
            "(line 1144,col 9)-(line 1144,col 46)",
            "(line 1145,col 9)-(line 1145,col 43)",
            "(line 1146,col 9)-(line 1146,col 78)",
            "(line 1147,col 9)-(line 1147,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial()  {\n        RealVector v = create(new double[] { 0, 1, 2 });\n        Assert.assertEquals(v,TestUtils.serializeAndRecover(v));\n    }\n",
        "begin_line": 1150,
        "end_line": 1154,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 9)-(line 1152,col 56)",
            "(line 1153,col 9)-(line 1153,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testMinMax()",
        "snippet": "    @Test\n    public void testMinMax() {\n        final RealVector v1 = create(new double[] {0, -6, 4, 12, 7});\n        Assert.assertEquals(1, v1.getMinIndex());\n        Assert.assertEquals(-6, v1.getMinValue(), 1.0e-12);\n        Assert.assertEquals(3, v1.getMaxIndex());\n        Assert.assertEquals(12, v1.getMaxValue(), 1.0e-12);\n        final RealVector v2 = create(new double[] {Double.NaN, 3, Double.NaN, -2});\n        Assert.assertEquals(3, v2.getMinIndex());\n        Assert.assertEquals(-2, v2.getMinValue(), 1.0e-12);\n        Assert.assertEquals(1, v2.getMaxIndex());\n        Assert.assertEquals(3, v2.getMaxValue(), 1.0e-12);\n        final RealVector v3 = create(new double[] {Double.NaN, Double.NaN});\n        Assert.assertEquals(-1, v3.getMinIndex());\n        Assert.assertTrue(Double.isNaN(v3.getMinValue()));\n        Assert.assertEquals(-1, v3.getMaxIndex());\n        Assert.assertTrue(Double.isNaN(v3.getMaxValue()));\n        final RealVector v4 = create(new double[0]);\n        Assert.assertEquals(-1, v4.getMinIndex());\n        Assert.assertTrue(Double.isNaN(v4.getMinValue()));\n        Assert.assertEquals(-1, v4.getMaxIndex());\n        Assert.assertTrue(Double.isNaN(v4.getMaxValue()));\n    }\n",
        "begin_line": 1156,
        "end_line": 1178,
        "comment": "",
        "child_ranges": [
            "(line 1158,col 9)-(line 1158,col 69)",
            "(line 1159,col 9)-(line 1159,col 49)",
            "(line 1160,col 9)-(line 1160,col 59)",
            "(line 1161,col 9)-(line 1161,col 49)",
            "(line 1162,col 9)-(line 1162,col 59)",
            "(line 1163,col 9)-(line 1163,col 83)",
            "(line 1164,col 9)-(line 1164,col 49)",
            "(line 1165,col 9)-(line 1165,col 59)",
            "(line 1166,col 9)-(line 1166,col 49)",
            "(line 1167,col 9)-(line 1167,col 58)",
            "(line 1168,col 9)-(line 1168,col 76)",
            "(line 1169,col 9)-(line 1169,col 50)",
            "(line 1170,col 9)-(line 1170,col 58)",
            "(line 1171,col 9)-(line 1171,col 50)",
            "(line 1172,col 9)-(line 1172,col 58)",
            "(line 1173,col 9)-(line 1173,col 52)",
            "(line 1174,col 9)-(line 1174,col 50)",
            "(line 1175,col 9)-(line 1175,col 58)",
            "(line 1176,col 9)-(line 1176,col 50)",
            "(line 1177,col 9)-(line 1177,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCosine()",
        "snippet": "    @Test\n    public void testCosine() {\n        final RealVector v = create(new double[] {1, 0, 0});\n\n        double[] wData = new double[] {1, 1, 0};\n        RealVector w = create(wData);\n        Assert.assertEquals(FastMath.sqrt(2) / 2, v.cosine(w), normTolerance);\n\n        wData = new double[] {1, 0, 0};\n        w = create(wData);\n        Assert.assertEquals(1, v.cosine(w), normTolerance);\n\n        wData = new double[] {0, 1, 0};\n        w = create(wData);\n        Assert.assertEquals(0, v.cosine(w), 0);\n\n        wData = new double[] {-1, 0, 0};\n        w = create(wData);\n        Assert.assertEquals(-1, v.cosine(w), normTolerance);\n    }\n",
        "begin_line": 1180,
        "end_line": 1199,
        "comment": "",
        "child_ranges": [
            "(line 1182,col 9)-(line 1182,col 60)",
            "(line 1184,col 9)-(line 1184,col 48)",
            "(line 1185,col 9)-(line 1185,col 37)",
            "(line 1186,col 9)-(line 1186,col 78)",
            "(line 1188,col 9)-(line 1188,col 39)",
            "(line 1189,col 9)-(line 1189,col 26)",
            "(line 1190,col 9)-(line 1190,col 59)",
            "(line 1192,col 9)-(line 1192,col 39)",
            "(line 1193,col 9)-(line 1193,col 26)",
            "(line 1194,col 9)-(line 1194,col 47)",
            "(line 1196,col 9)-(line 1196,col 40)",
            "(line 1197,col 9)-(line 1197,col 26)",
            "(line 1198,col 9)-(line 1198,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCosinePrecondition1()",
        "snippet": "    @Test(expected=MathArithmeticException.class)\n    public void testCosinePrecondition1() {\n        final RealVector v = create(new double[] {0, 0, 0});\n        final RealVector w = create(new double[] {1, 0, 0});\n        v.cosine(w);\n    }\n",
        "begin_line": 1201,
        "end_line": 1206,
        "comment": "",
        "child_ranges": [
            "(line 1203,col 9)-(line 1203,col 60)",
            "(line 1204,col 9)-(line 1204,col 60)",
            "(line 1205,col 9)-(line 1205,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCosinePrecondition2()",
        "snippet": "    @Test(expected=MathArithmeticException.class)\n    public void testCosinePrecondition2() {\n        final RealVector v = create(new double[] {0, 0, 0});\n        final RealVector w = create(new double[] {1, 0, 0});\n        w.cosine(v);\n    }\n",
        "begin_line": 1208,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1210,col 9)-(line 1210,col 60)",
            "(line 1211,col 9)-(line 1211,col 60)",
            "(line 1212,col 9)-(line 1212,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCosinePrecondition3()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testCosinePrecondition3() {\n        final RealVector v = create(new double[] {1, 2, 3});\n        final RealVector w = create(new double[] {1, 2, 3, 4});\n        v.cosine(w);\n    }\n",
        "begin_line": 1215,
        "end_line": 1220,
        "comment": "",
        "child_ranges": [
            "(line 1217,col 9)-(line 1217,col 60)",
            "(line 1218,col 9)-(line 1218,col 63)",
            "(line 1219,col 9)-(line 1219,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombinePreconditionSameType()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testCombinePreconditionSameType() {\n        final double a = 1d;\n        final double b = 2d;\n        double[] aux = new double[] { 3d, 4d, 5d };\n        final RealVector x = create(aux);\n        aux = new double[] { 6d, 7d };\n        final RealVector y = create(aux);\n        x.combine(a, b, y);\n    }\n",
        "begin_line": 1222,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1224,col 9)-(line 1224,col 28)",
            "(line 1225,col 9)-(line 1225,col 28)",
            "(line 1226,col 9)-(line 1226,col 51)",
            "(line 1227,col 9)-(line 1227,col 41)",
            "(line 1228,col 9)-(line 1228,col 38)",
            "(line 1229,col 9)-(line 1229,col 41)",
            "(line 1230,col 9)-(line 1230,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineSameType()",
        "snippet": "    @Test\n    public void testCombineSameType() {\n        final Random random = new Random(20110726);\n        final int dim = 10;\n        final double a = (2 * random.nextDouble() - 1);\n        final double b = (2 * random.nextDouble() - 1);\n        final double[] dataX = new double[dim];\n        final double[] dataY = new double[dim];\n        final double[] expected = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            dataX[i] = 2 * random.nextDouble() - 1;\n            dataY[i] = 2 * random.nextDouble() - 1;\n            expected[i] = a * dataX[i] + b * dataY[i];\n        }\n        final RealVector x = create(dataX);\n        final RealVector y = create(dataY);\n        final double[] actual = x.combine(a, b, y).toArray();\n        for (int i = 0; i < dim; i++) {\n            final double delta;\n            if (expected[i] == 0d) {\n                delta = Math.ulp(1d);\n            } else {\n                delta = Math.ulp(expected[i]);\n            }\n            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n                                expected[i],\n                                actual[i],\n                                delta);\n        }\n    }\n",
        "begin_line": 1233,
        "end_line": 1262,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 9)-(line 1235,col 51)",
            "(line 1236,col 9)-(line 1236,col 27)",
            "(line 1237,col 9)-(line 1237,col 55)",
            "(line 1238,col 9)-(line 1238,col 55)",
            "(line 1239,col 9)-(line 1239,col 47)",
            "(line 1240,col 9)-(line 1240,col 47)",
            "(line 1241,col 9)-(line 1241,col 50)",
            "(line 1242,col 9)-(line 1246,col 9)",
            "(line 1247,col 9)-(line 1247,col 43)",
            "(line 1248,col 9)-(line 1248,col 43)",
            "(line 1249,col 9)-(line 1249,col 61)",
            "(line 1250,col 9)-(line 1261,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombinePreconditionMixedType()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testCombinePreconditionMixedType() {\n        final double a = 1d;\n        final double b = 2d;\n        double[] aux = new double[] { 3d, 4d, 5d };\n        final RealVector x = create(aux);\n        aux = new double[] { 6d, 7d };\n        final RealVector y = create(aux);\n        x.combine(a, b, y);\n    }\n",
        "begin_line": 1264,
        "end_line": 1273,
        "comment": "",
        "child_ranges": [
            "(line 1266,col 9)-(line 1266,col 28)",
            "(line 1267,col 9)-(line 1267,col 28)",
            "(line 1268,col 9)-(line 1268,col 51)",
            "(line 1269,col 9)-(line 1269,col 41)",
            "(line 1270,col 9)-(line 1270,col 38)",
            "(line 1271,col 9)-(line 1271,col 41)",
            "(line 1272,col 9)-(line 1272,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineMixedTypes()",
        "snippet": "    @Test\n    public void testCombineMixedTypes() {\n        final Random random = new Random(20110726);\n        final int dim = 10;\n        final double a = (2 * random.nextDouble() - 1);\n        final double b = (2 * random.nextDouble() - 1);\n        final double[] dataX = new double[dim];\n        final double[] dataY = new double[dim];\n        final double[] expected = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            dataX[i] = 2 * random.nextDouble() - 1;\n            dataY[i] = 2 * random.nextDouble() - 1;\n            expected[i] = a * dataX[i] + b * dataY[i];\n        }\n        final RealVector x = create(dataX);\n        final RealVector y = createAlien(dataY);\n\n        final double[] actual = x.combine(a, b, y).toArray();\n        for (int i = 0; i < dim; i++) {\n            final double delta;\n            if (expected[i] == 0d) {\n                delta = Math.ulp(1d);\n            } else {\n                delta = Math.ulp(expected[i]);\n            }\n            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n                                expected[i],\n                                actual[i],\n                                delta);\n        }\n    }\n",
        "begin_line": 1275,
        "end_line": 1305,
        "comment": "",
        "child_ranges": [
            "(line 1277,col 9)-(line 1277,col 51)",
            "(line 1278,col 9)-(line 1278,col 27)",
            "(line 1279,col 9)-(line 1279,col 55)",
            "(line 1280,col 9)-(line 1280,col 55)",
            "(line 1281,col 9)-(line 1281,col 47)",
            "(line 1282,col 9)-(line 1282,col 47)",
            "(line 1283,col 9)-(line 1283,col 50)",
            "(line 1284,col 9)-(line 1288,col 9)",
            "(line 1289,col 9)-(line 1289,col 43)",
            "(line 1290,col 9)-(line 1290,col 48)",
            "(line 1292,col 9)-(line 1292,col 61)",
            "(line 1293,col 9)-(line 1304,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineToSelfPreconditionSameType()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testCombineToSelfPreconditionSameType() {\n        final double a = 1d;\n        final double b = 2d;\n        double[] aux = new double[] { 3d, 4d, 5d };\n        final RealVector x = create(aux);\n        aux = new double[] { 6d, 7d };\n        final RealVector y = create(aux);\n        x.combineToSelf(a, b, y);\n    }\n",
        "begin_line": 1307,
        "end_line": 1316,
        "comment": "",
        "child_ranges": [
            "(line 1309,col 9)-(line 1309,col 28)",
            "(line 1310,col 9)-(line 1310,col 28)",
            "(line 1311,col 9)-(line 1311,col 51)",
            "(line 1312,col 9)-(line 1312,col 41)",
            "(line 1313,col 9)-(line 1313,col 38)",
            "(line 1314,col 9)-(line 1314,col 41)",
            "(line 1315,col 9)-(line 1315,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineToSelfSameType()",
        "snippet": "    @Test\n    public void testCombineToSelfSameType() {\n        final Random random = new Random(20110726);\n        final int dim = 10;\n        final double a = (2 * random.nextDouble() - 1);\n        final double b = (2 * random.nextDouble() - 1);\n        final double[] dataX = new double[dim];\n        final double[] dataY = new double[dim];\n        final double[] expected = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            dataX[i] = 2 * random.nextDouble() - 1;\n            dataY[i] = 2 * random.nextDouble() - 1;\n            expected[i] = a * dataX[i] + b * dataY[i];\n        }\n        final RealVector x = create(dataX);\n        final RealVector y = create(dataY);\n        Assert.assertSame(x, x.combineToSelf(a, b, y));\n        final double[] actual = x.toArray();\n        for (int i = 0; i < dim; i++) {\n            final double delta;\n            if (expected[i] == 0d) {\n                delta = Math.ulp(1d);\n            } else {\n                delta = Math.ulp(expected[i]);\n            }\n            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n                                expected[i],\n                                actual[i],\n                                delta);\n        }\n    }\n",
        "begin_line": 1318,
        "end_line": 1348,
        "comment": "",
        "child_ranges": [
            "(line 1320,col 9)-(line 1320,col 51)",
            "(line 1321,col 9)-(line 1321,col 27)",
            "(line 1322,col 9)-(line 1322,col 55)",
            "(line 1323,col 9)-(line 1323,col 55)",
            "(line 1324,col 9)-(line 1324,col 47)",
            "(line 1325,col 9)-(line 1325,col 47)",
            "(line 1326,col 9)-(line 1326,col 50)",
            "(line 1327,col 9)-(line 1331,col 9)",
            "(line 1332,col 9)-(line 1332,col 43)",
            "(line 1333,col 9)-(line 1333,col 43)",
            "(line 1334,col 9)-(line 1334,col 55)",
            "(line 1335,col 9)-(line 1335,col 44)",
            "(line 1336,col 9)-(line 1347,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineToSelfPreconditionMixedType()",
        "snippet": "    @Test(expected=DimensionMismatchException.class)\n    public void testCombineToSelfPreconditionMixedType() {\n        final double a = 1d;\n        final double b = 2d;\n        double[] aux = new double[] { 3d, 4d, 5d };\n        final RealVector x = create(aux);\n        aux = new double[] { 6d, 7d };\n        final RealVector y = createAlien(aux);\n        x.combineToSelf(a, b, y);\n    }\n",
        "begin_line": 1350,
        "end_line": 1359,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 9)-(line 1352,col 28)",
            "(line 1353,col 9)-(line 1353,col 28)",
            "(line 1354,col 9)-(line 1354,col 51)",
            "(line 1355,col 9)-(line 1355,col 41)",
            "(line 1356,col 9)-(line 1356,col 38)",
            "(line 1357,col 9)-(line 1357,col 46)",
            "(line 1358,col 9)-(line 1358,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testCombineToSelfMixedTypes()",
        "snippet": "    @Test\n    public void testCombineToSelfMixedTypes() {\n        final Random random = new Random(20110726);\n        final int dim = 10;\n        final double a = (2 * random.nextDouble() - 1);\n        final double b = (2 * random.nextDouble() - 1);\n        final double[] dataX = new double[dim];\n        final double[] dataY = new double[dim];\n        final double[] expected = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            dataX[i] = 2 * random.nextDouble() - 1;\n            dataY[i] = 2 * random.nextDouble() - 1;\n            expected[i] = a * dataX[i] + b * dataY[i];\n        }\n        final RealVector x = create(dataX);\n        final RealVector y = create(dataY);\n        Assert.assertSame(x, x.combineToSelf(a, b, y));\n        final double[] actual = x.toArray();\n        for (int i = 0; i < dim; i++) {\n            final double delta;\n            if (expected[i] == 0d) {\n                delta = Math.ulp(1d);\n            } else {\n                delta = Math.ulp(expected[i]);\n            }\n            Assert.assertEquals(\"elements [\" + i + \"] differ\",\n                                expected[i],\n                                actual[i],\n                                delta);\n        }\n    }\n",
        "begin_line": 1361,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1363,col 9)-(line 1363,col 51)",
            "(line 1364,col 9)-(line 1364,col 27)",
            "(line 1365,col 9)-(line 1365,col 55)",
            "(line 1366,col 9)-(line 1366,col 55)",
            "(line 1367,col 9)-(line 1367,col 47)",
            "(line 1368,col 9)-(line 1368,col 47)",
            "(line 1369,col 9)-(line 1369,col 50)",
            "(line 1370,col 9)-(line 1374,col 9)",
            "(line 1375,col 9)-(line 1375,col 43)",
            "(line 1376,col 9)-(line 1376,col 43)",
            "(line 1377,col 9)-(line 1377,col 55)",
            "(line 1378,col 9)-(line 1378,col 44)",
            "(line 1379,col 9)-(line 1390,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderPreservingVisitor1()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderPreservingVisitor1() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final RealVector v = create(data);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n\n            private int expectedIndex;\n\n            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                expectedIndex = 0;\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        v.walkInDefaultOrder(visitor);\n    }\n",
        "begin_line": 1398,
        "end_line": 1429,
        "comment": " The whole vector is visited. ",
        "child_ranges": [
            "(line 1400,col 9)-(line 1402,col 10)",
            "(line 1403,col 9)-(line 1403,col 42)",
            "(line 1404,col 9)-(line 1404,col 50)",
            "(line 1405,col 9)-(line 1427,col 10)",
            "(line 1428,col 9)-(line 1428,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-24b38e3d-a135-41c0-83ae-a1d308ebf32e.visit(int, double)",
        "snippet": "            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n            }\n",
        "begin_line": 1409,
        "end_line": 1414,
        "comment": "",
        "child_ranges": [
            "(line 1410,col 17)-(line 1410,col 64)",
            "(line 1411,col 17)-(line 1412,col 72)",
            "(line 1413,col 17)-(line 1413,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-15d53ede-b82f-41bb-9102-f2de4f5940e1.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                expectedIndex = 0;\n            }\n",
        "begin_line": 1416,
        "end_line": 1422,
        "comment": "",
        "child_ranges": [
            "(line 1418,col 17)-(line 1418,col 61)",
            "(line 1419,col 17)-(line 1419,col 52)",
            "(line 1420,col 17)-(line 1420,col 64)",
            "(line 1421,col 17)-(line 1421,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-7a3b7c5b-22fc-4764-9714-f5aaacc52870.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1424,
        "end_line": 1426,
        "comment": "",
        "child_ranges": [
            "(line 1425,col 17)-(line 1425,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderPreservingVisitor2()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderPreservingVisitor2() {\n        final RealVector v = create(new double[5]);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n\n            public void visit(int index, double value) {\n                // Do nothing\n            }\n\n            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        try {\n            v.walkInDefaultOrder(visitor, -1, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 5, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 0, -1);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 0, 5);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 4, 0);\n            Assert.fail();\n        } catch (NumberIsTooSmallException e) {\n            // Expected behavior\n        }\n    }\n",
        "begin_line": 1432,
        "end_line": 1480,
        "comment": " Visiting an invalid subvector. ",
        "child_ranges": [
            "(line 1434,col 9)-(line 1434,col 51)",
            "(line 1435,col 9)-(line 1435,col 50)",
            "(line 1436,col 9)-(line 1449,col 10)",
            "(line 1450,col 9)-(line 1455,col 9)",
            "(line 1456,col 9)-(line 1461,col 9)",
            "(line 1462,col 9)-(line 1467,col 9)",
            "(line 1468,col 9)-(line 1473,col 9)",
            "(line 1474,col 9)-(line 1479,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-57820911-f277-470a-aea0-d92a78160965.visit(int, double)",
        "snippet": "            public void visit(int index, double value) {\n                // Do nothing\n            }\n",
        "begin_line": 1438,
        "end_line": 1440,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-a38d119a-39df-4e17-a3e5-7fbac538b924.start(int, int, int)",
        "snippet": "            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n",
        "begin_line": 1442,
        "end_line": 1444,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-0dbaa692-3560-48db-a52c-f7be5967792a.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1446,
        "end_line": 1448,
        "comment": "",
        "child_ranges": [
            "(line 1447,col 17)-(line 1447,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderPreservingVisitor3()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderPreservingVisitor3() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final int expectedStart = 2;\n        final int expectedEnd = 7;\n        final RealVector v = create(data);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n\n            private int expectedIndex;\n\n            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                expectedIndex = expectedStart;\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        v.walkInDefaultOrder(visitor, expectedStart, expectedEnd);\n    }\n",
        "begin_line": 1483,
        "end_line": 1516,
        "comment": " Visiting a valid subvector. ",
        "child_ranges": [
            "(line 1485,col 9)-(line 1487,col 10)",
            "(line 1488,col 9)-(line 1488,col 36)",
            "(line 1489,col 9)-(line 1489,col 34)",
            "(line 1490,col 9)-(line 1490,col 42)",
            "(line 1491,col 9)-(line 1491,col 50)",
            "(line 1492,col 9)-(line 1514,col 10)",
            "(line 1515,col 9)-(line 1515,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-affc7bb5-5aca-428e-b0ba-b6a05fc7df45.visit(int, double)",
        "snippet": "            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n            }\n",
        "begin_line": 1496,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1497,col 17)-(line 1497,col 64)",
            "(line 1498,col 17)-(line 1499,col 72)",
            "(line 1500,col 17)-(line 1500,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-02a9bfc0-e196-4499-84fa-a8fd2eac2fa9.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                expectedIndex = expectedStart;\n            }\n",
        "begin_line": 1503,
        "end_line": 1509,
        "comment": "",
        "child_ranges": [
            "(line 1505,col 17)-(line 1505,col 61)",
            "(line 1506,col 17)-(line 1506,col 64)",
            "(line 1507,col 17)-(line 1507,col 60)",
            "(line 1508,col 17)-(line 1508,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-bc06ca87-03f7-4eb0-b7bf-b08342af1105.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1511,
        "end_line": 1513,
        "comment": "",
        "child_ranges": [
            "(line 1512,col 17)-(line 1512,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderPreservingVisitor1()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderPreservingVisitor1() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final RealVector v = create(data);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n            private final boolean[] visited = new boolean[data.length];\n\n            public void visit(final int actualIndex, final double actualValue) {\n                visited[actualIndex] = true;\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                Arrays.fill(visited, false);\n            }\n\n            public double end() {\n                for (int i = 0; i < data.length; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n        };\n        v.walkInOptimizedOrder(visitor);\n    }\n",
        "begin_line": 1519,
        "end_line": 1552,
        "comment": " The whole vector is visited. ",
        "child_ranges": [
            "(line 1521,col 9)-(line 1523,col 10)",
            "(line 1524,col 9)-(line 1524,col 42)",
            "(line 1525,col 9)-(line 1525,col 50)",
            "(line 1526,col 9)-(line 1550,col 10)",
            "(line 1551,col 9)-(line 1551,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-454e539c-33ef-4446-bae3-7508da7ea3f5.visit(int, double)",
        "snippet": "            public void visit(final int actualIndex, final double actualValue) {\n                visited[actualIndex] = true;\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n            }\n",
        "begin_line": 1529,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1530,col 17)-(line 1530,col 44)",
            "(line 1531,col 17)-(line 1532,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-e854306f-111d-496c-a5df-393e25ca7cb0.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                Arrays.fill(visited, false);\n            }\n",
        "begin_line": 1535,
        "end_line": 1541,
        "comment": "",
        "child_ranges": [
            "(line 1537,col 17)-(line 1537,col 61)",
            "(line 1538,col 17)-(line 1538,col 52)",
            "(line 1539,col 17)-(line 1539,col 64)",
            "(line 1540,col 17)-(line 1540,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-2a26077c-5006-4621-8263-6ca0c520638f.end()",
        "snippet": "            public double end() {\n                for (int i = 0; i < data.length; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n",
        "begin_line": 1543,
        "end_line": 1549,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 17)-(line 1547,col 17)",
            "(line 1548,col 17)-(line 1548,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderPreservingVisitor2()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderPreservingVisitor2() {\n        final RealVector v = create(new double[5]);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n\n            public void visit(int index, double value) {\n                // Do nothing\n            }\n\n            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        try {\n            v.walkInOptimizedOrder(visitor, -1, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 5, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 0, -1);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 0, 5);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 4, 0);\n            Assert.fail();\n        } catch (NumberIsTooSmallException e) {\n            // Expected behavior\n        }\n    }\n",
        "begin_line": 1555,
        "end_line": 1603,
        "comment": " Visiting an invalid subvector. ",
        "child_ranges": [
            "(line 1557,col 9)-(line 1557,col 51)",
            "(line 1558,col 9)-(line 1558,col 50)",
            "(line 1559,col 9)-(line 1572,col 10)",
            "(line 1573,col 9)-(line 1578,col 9)",
            "(line 1579,col 9)-(line 1584,col 9)",
            "(line 1585,col 9)-(line 1590,col 9)",
            "(line 1591,col 9)-(line 1596,col 9)",
            "(line 1597,col 9)-(line 1602,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-6e6b6a01-8e96-47b7-a36c-37e986ac1510.visit(int, double)",
        "snippet": "            public void visit(int index, double value) {\n                // Do nothing\n            }\n",
        "begin_line": 1561,
        "end_line": 1563,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-36a663fb-b72c-4558-8013-212503306239.start(int, int, int)",
        "snippet": "            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n",
        "begin_line": 1565,
        "end_line": 1567,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-a77b4bb9-69a6-443d-a39d-00d1899d84e7.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1569,
        "end_line": 1571,
        "comment": "",
        "child_ranges": [
            "(line 1570,col 17)-(line 1570,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderPreservingVisitor3()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderPreservingVisitor3() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final int expectedStart = 2;\n        final int expectedEnd = 7;\n        final RealVector v = create(data);\n        final RealVectorPreservingVisitor visitor;\n        visitor = new RealVectorPreservingVisitor() {\n            private final boolean[] visited = new boolean[data.length];\n\n            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                visited[actualIndex] = true;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                Arrays.fill(visited, true);\n            }\n\n            public double end() {\n                for (int i = expectedStart; i <= expectedEnd; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n        };\n        v.walkInOptimizedOrder(visitor, expectedStart, expectedEnd);\n    }\n",
        "begin_line": 1606,
        "end_line": 1641,
        "comment": " Visiting a valid subvector. ",
        "child_ranges": [
            "(line 1608,col 9)-(line 1610,col 10)",
            "(line 1611,col 9)-(line 1611,col 36)",
            "(line 1612,col 9)-(line 1612,col 34)",
            "(line 1613,col 9)-(line 1613,col 42)",
            "(line 1614,col 9)-(line 1614,col 50)",
            "(line 1615,col 9)-(line 1639,col 10)",
            "(line 1640,col 9)-(line 1640,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-8c37e133-6086-43bc-ac42-c04b97a19d31.visit(int, double)",
        "snippet": "            public void visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                visited[actualIndex] = true;\n            }\n",
        "begin_line": 1618,
        "end_line": 1622,
        "comment": "",
        "child_ranges": [
            "(line 1619,col 17)-(line 1620,col 72)",
            "(line 1621,col 17)-(line 1621,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-1c1b9074-1124-47d1-82f3-346d72f66d9f.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                Arrays.fill(visited, true);\n            }\n",
        "begin_line": 1624,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1626,col 17)-(line 1626,col 61)",
            "(line 1627,col 17)-(line 1627,col 64)",
            "(line 1628,col 17)-(line 1628,col 60)",
            "(line 1629,col 17)-(line 1629,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-d7dfbaf5-fc5d-498a-9e37-b037fa8afc61.end()",
        "snippet": "            public double end() {\n                for (int i = expectedStart; i <= expectedEnd; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n",
        "begin_line": 1632,
        "end_line": 1638,
        "comment": "",
        "child_ranges": [
            "(line 1633,col 17)-(line 1636,col 17)",
            "(line 1637,col 17)-(line 1637,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderChangingVisitor1()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderChangingVisitor1() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final RealVector v = create(data);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n\n            private int expectedIndex;\n\n            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n                return actualIndex + actualValue;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                expectedIndex = 0;\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        v.walkInDefaultOrder(visitor);\n        for (int i = 0; i < data.length; i++) {\n            Assert.assertEquals(\"entry \" + i, i + data[i], v.getEntry(i), 0.0);\n        }\n    }\n",
        "begin_line": 1644,
        "end_line": 1679,
        "comment": " The whole vector is visited. ",
        "child_ranges": [
            "(line 1646,col 9)-(line 1648,col 10)",
            "(line 1649,col 9)-(line 1649,col 42)",
            "(line 1650,col 9)-(line 1650,col 48)",
            "(line 1651,col 9)-(line 1674,col 10)",
            "(line 1675,col 9)-(line 1675,col 38)",
            "(line 1676,col 9)-(line 1678,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-83661420-3f78-4609-b9be-3fec0e9a27c6.visit(int, double)",
        "snippet": "            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n                return actualIndex + actualValue;\n            }\n",
        "begin_line": 1655,
        "end_line": 1661,
        "comment": "",
        "child_ranges": [
            "(line 1656,col 17)-(line 1656,col 64)",
            "(line 1657,col 17)-(line 1658,col 72)",
            "(line 1659,col 17)-(line 1659,col 32)",
            "(line 1660,col 17)-(line 1660,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-9a5a78fc-a4fd-48c6-95bf-45d857064f88.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                expectedIndex = 0;\n            }\n",
        "begin_line": 1663,
        "end_line": 1669,
        "comment": "",
        "child_ranges": [
            "(line 1665,col 17)-(line 1665,col 61)",
            "(line 1666,col 17)-(line 1666,col 52)",
            "(line 1667,col 17)-(line 1667,col 64)",
            "(line 1668,col 17)-(line 1668,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-bc099f62-81fe-4c96-b50c-2f94b60d0412.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1671,
        "end_line": 1673,
        "comment": "",
        "child_ranges": [
            "(line 1672,col 17)-(line 1672,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderChangingVisitor2()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderChangingVisitor2() {\n        final RealVector v = create(new double[5]);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n\n            public double visit(int index, double value) {\n                return 0.0;\n            }\n\n            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        try {\n            v.walkInDefaultOrder(visitor, -1, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 5, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 0, -1);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 0, 5);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInDefaultOrder(visitor, 4, 0);\n            Assert.fail();\n        } catch (NumberIsTooSmallException e) {\n            // Expected behavior\n        }\n    }\n",
        "begin_line": 1682,
        "end_line": 1730,
        "comment": " Visiting an invalid subvector. ",
        "child_ranges": [
            "(line 1684,col 9)-(line 1684,col 51)",
            "(line 1685,col 9)-(line 1685,col 48)",
            "(line 1686,col 9)-(line 1699,col 10)",
            "(line 1700,col 9)-(line 1705,col 9)",
            "(line 1706,col 9)-(line 1711,col 9)",
            "(line 1712,col 9)-(line 1717,col 9)",
            "(line 1718,col 9)-(line 1723,col 9)",
            "(line 1724,col 9)-(line 1729,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-85f80950-0f45-44a6-9e4c-e40dc91a4a1a.visit(int, double)",
        "snippet": "            public double visit(int index, double value) {\n                return 0.0;\n            }\n",
        "begin_line": 1688,
        "end_line": 1690,
        "comment": "",
        "child_ranges": [
            "(line 1689,col 17)-(line 1689,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-aa86f2a3-a9de-4bd9-bcd7-075c4cd23d0d.start(int, int, int)",
        "snippet": "            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n",
        "begin_line": 1692,
        "end_line": 1694,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-e12d4cf6-7a71-471f-926f-53badbc8e258.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1696,
        "end_line": 1698,
        "comment": "",
        "child_ranges": [
            "(line 1697,col 17)-(line 1697,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInDefaultOrderChangingVisitor3()",
        "snippet": "    @Test\n    public void testWalkInDefaultOrderChangingVisitor3() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final int expectedStart = 2;\n        final int expectedEnd = 7;\n        final RealVector v = create(data);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n\n            private int expectedIndex;\n\n            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n                return actualIndex + actualValue;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                expectedIndex = expectedStart;\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        v.walkInDefaultOrder(visitor, expectedStart, expectedEnd);\n        for (int i = expectedStart; i <= expectedEnd; i++) {\n            Assert.assertEquals(\"entry \" + i, i + data[i], v.getEntry(i), 0.0);\n        }\n    }\n",
        "begin_line": 1733,
        "end_line": 1770,
        "comment": " Visiting a valid subvector. ",
        "child_ranges": [
            "(line 1735,col 9)-(line 1737,col 10)",
            "(line 1738,col 9)-(line 1738,col 36)",
            "(line 1739,col 9)-(line 1739,col 34)",
            "(line 1740,col 9)-(line 1740,col 42)",
            "(line 1741,col 9)-(line 1741,col 48)",
            "(line 1742,col 9)-(line 1765,col 10)",
            "(line 1766,col 9)-(line 1766,col 66)",
            "(line 1767,col 9)-(line 1769,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-cb9ed9fb-95b2-4f61-b603-bb0635f09863.visit(int, double)",
        "snippet": "            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(expectedIndex, actualIndex);\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                ++expectedIndex;\n                return actualIndex + actualValue;\n            }\n",
        "begin_line": 1746,
        "end_line": 1752,
        "comment": "",
        "child_ranges": [
            "(line 1747,col 17)-(line 1747,col 64)",
            "(line 1748,col 17)-(line 1749,col 72)",
            "(line 1750,col 17)-(line 1750,col 32)",
            "(line 1751,col 17)-(line 1751,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-d460f8d3-3b67-4553-a885-cdab93060f22.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                expectedIndex = expectedStart;\n            }\n",
        "begin_line": 1754,
        "end_line": 1760,
        "comment": "",
        "child_ranges": [
            "(line 1756,col 17)-(line 1756,col 61)",
            "(line 1757,col 17)-(line 1757,col 64)",
            "(line 1758,col 17)-(line 1758,col 60)",
            "(line 1759,col 17)-(line 1759,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-82335d7e-9ddb-4aef-8c30-e7e97f321ef8.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1762,
        "end_line": 1764,
        "comment": "",
        "child_ranges": [
            "(line 1763,col 17)-(line 1763,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderChangingVisitor1()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderChangingVisitor1() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final RealVector v = create(data);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n            private final boolean[] visited = new boolean[data.length];\n\n            public double visit(final int actualIndex, final double actualValue) {\n                visited[actualIndex] = true;\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                return actualIndex + actualValue;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                Arrays.fill(visited, false);\n            }\n\n            public double end() {\n                for (int i = 0; i < data.length; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n        };\n        v.walkInOptimizedOrder(visitor);\n        for (int i = 0; i < data.length; i++) {\n            Assert.assertEquals(\"entry \" + i, i + data[i], v.getEntry(i), 0.0);\n        }\n    }\n",
        "begin_line": 1773,
        "end_line": 1810,
        "comment": " The whole vector is visited. ",
        "child_ranges": [
            "(line 1775,col 9)-(line 1777,col 10)",
            "(line 1778,col 9)-(line 1778,col 42)",
            "(line 1779,col 9)-(line 1779,col 48)",
            "(line 1780,col 9)-(line 1805,col 10)",
            "(line 1806,col 9)-(line 1806,col 40)",
            "(line 1807,col 9)-(line 1809,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-0ac1ff04-750d-4e3f-b03e-d1371dc2bb9a.visit(int, double)",
        "snippet": "            public double visit(final int actualIndex, final double actualValue) {\n                visited[actualIndex] = true;\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                return actualIndex + actualValue;\n            }\n",
        "begin_line": 1783,
        "end_line": 1788,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 17)-(line 1784,col 44)",
            "(line 1785,col 17)-(line 1786,col 72)",
            "(line 1787,col 17)-(line 1787,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-92408254-6411-4437-8a46-dad4f95c7591.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(0, actualStart);\n                Assert.assertEquals(data.length - 1, actualEnd);\n                Arrays.fill(visited, false);\n            }\n",
        "begin_line": 1790,
        "end_line": 1796,
        "comment": "",
        "child_ranges": [
            "(line 1792,col 17)-(line 1792,col 61)",
            "(line 1793,col 17)-(line 1793,col 52)",
            "(line 1794,col 17)-(line 1794,col 64)",
            "(line 1795,col 17)-(line 1795,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-01f546b4-d943-4d0c-b827-5c1add6a3f44.end()",
        "snippet": "            public double end() {\n                for (int i = 0; i < data.length; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n",
        "begin_line": 1798,
        "end_line": 1804,
        "comment": "",
        "child_ranges": [
            "(line 1799,col 17)-(line 1802,col 17)",
            "(line 1803,col 17)-(line 1803,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderChangingVisitor2()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderChangingVisitor2() {\n        final RealVector v = create(new double[5]);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n\n            public double visit(int index, double value) {\n                return 0.0;\n            }\n\n            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n\n            public double end() {\n                return 0.0;\n            }\n        };\n        try {\n            v.walkInOptimizedOrder(visitor, -1, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 5, 4);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 0, -1);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 0, 5);\n            Assert.fail();\n        } catch (OutOfRangeException e) {\n            // Expected behavior\n        }\n        try {\n            v.walkInOptimizedOrder(visitor, 4, 0);\n            Assert.fail();\n        } catch (NumberIsTooSmallException e) {\n            // Expected behavior\n        }\n    }\n",
        "begin_line": 1813,
        "end_line": 1861,
        "comment": " Visiting an invalid subvector. ",
        "child_ranges": [
            "(line 1815,col 9)-(line 1815,col 51)",
            "(line 1816,col 9)-(line 1816,col 48)",
            "(line 1817,col 9)-(line 1830,col 10)",
            "(line 1831,col 9)-(line 1836,col 9)",
            "(line 1837,col 9)-(line 1842,col 9)",
            "(line 1843,col 9)-(line 1848,col 9)",
            "(line 1849,col 9)-(line 1854,col 9)",
            "(line 1855,col 9)-(line 1860,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-0aebe583-0eef-4974-b019-6b64717dc4e5.visit(int, double)",
        "snippet": "            public double visit(int index, double value) {\n                return 0.0;\n            }\n",
        "begin_line": 1819,
        "end_line": 1821,
        "comment": "",
        "child_ranges": [
            "(line 1820,col 17)-(line 1820,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-c347b2f2-68d1-402b-a226-28e12d86b87e.start(int, int, int)",
        "snippet": "            public void start(int dimension, int start, int end) {\n                // Do nothing\n            }\n",
        "begin_line": 1823,
        "end_line": 1825,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-5562690c-b4cf-431b-b8d4-d8541319d46b.end()",
        "snippet": "            public double end() {\n                return 0.0;\n            }\n",
        "begin_line": 1827,
        "end_line": 1829,
        "comment": "",
        "child_ranges": [
            "(line 1828,col 17)-(line 1828,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.testWalkInOptimizedOrderChangingVisitor3()",
        "snippet": "    @Test\n    public void testWalkInOptimizedOrderChangingVisitor3() {\n        final double[] data = new double[] {\n            0d, 1d, 0d, 0d, 2d, 0d, 0d, 0d, 3d\n        };\n        final int expectedStart = 2;\n        final int expectedEnd = 7;\n        final RealVector v = create(data);\n        final RealVectorChangingVisitor visitor;\n        visitor = new RealVectorChangingVisitor() {\n            private final boolean[] visited = new boolean[data.length];\n\n            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                visited[actualIndex] = true;\n                return actualIndex + actualValue;\n            }\n\n            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                Arrays.fill(visited, true);\n            }\n\n            public double end() {\n                for (int i = expectedStart; i <= expectedEnd; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n        };\n        v.walkInOptimizedOrder(visitor, expectedStart, expectedEnd);\n        for (int i = expectedStart; i <= expectedEnd; i++) {\n            Assert.assertEquals(\"entry \" + i, i + data[i], v.getEntry(i), 0.0);\n        }\n    }\n",
        "begin_line": 1864,
        "end_line": 1903,
        "comment": " Visiting a valid subvector. ",
        "child_ranges": [
            "(line 1866,col 9)-(line 1868,col 10)",
            "(line 1869,col 9)-(line 1869,col 36)",
            "(line 1870,col 9)-(line 1870,col 34)",
            "(line 1871,col 9)-(line 1871,col 42)",
            "(line 1872,col 9)-(line 1872,col 48)",
            "(line 1873,col 9)-(line 1898,col 10)",
            "(line 1899,col 9)-(line 1899,col 68)",
            "(line 1900,col 9)-(line 1902,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-7283ee4e-02f3-4735-aef2-450d9523624d.visit(int, double)",
        "snippet": "            public double visit(final int actualIndex, final double actualValue) {\n                Assert.assertEquals(Integer.toString(actualIndex),\n                                    data[actualIndex], actualValue, 0d);\n                visited[actualIndex] = true;\n                return actualIndex + actualValue;\n            }\n",
        "begin_line": 1876,
        "end_line": 1881,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 17)-(line 1878,col 72)",
            "(line 1879,col 17)-(line 1879,col 44)",
            "(line 1880,col 17)-(line 1880,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-d04882e5-38e2-4053-a4eb-8057769942e7.start(int, int, int)",
        "snippet": "            public void start(final int actualSize, final int actualStart,\n                              final int actualEnd) {\n                Assert.assertEquals(data.length, actualSize);\n                Assert.assertEquals(expectedStart, actualStart);\n                Assert.assertEquals(expectedEnd, actualEnd);\n                Arrays.fill(visited, true);\n            }\n",
        "begin_line": 1883,
        "end_line": 1889,
        "comment": "",
        "child_ranges": [
            "(line 1885,col 17)-(line 1885,col 61)",
            "(line 1886,col 17)-(line 1886,col 64)",
            "(line 1887,col 17)-(line 1887,col 60)",
            "(line 1888,col 17)-(line 1888,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.linear.RealVectorAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.linear.SparseRealVectorTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java",
        "signature": "org.apache.commons.math3.linear.RealVectorAbstractTest.Anonymous-3748d935-599b-4cbe-a081-27ba39f5fc90.end()",
        "snippet": "            public double end() {\n                for (int i = expectedStart; i <= expectedEnd; i++) {\n                    Assert.assertTrue(\"entry \" + i + \"has not been visited\",\n                                      visited[i]);\n                }\n                return 0.0;\n            }\n",
        "begin_line": 1891,
        "end_line": 1897,
        "comment": "",
        "child_ranges": [
            "(line 1892,col 17)-(line 1895,col 17)",
            "(line 1896,col 17)-(line 1896,col 27)"
        ]
    }
]