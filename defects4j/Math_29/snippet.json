[
    {
        "name": "OpenMapRealVector.ebeMultiply#358",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.ebeMultiply(org.apache.commons.math3.linear.RealVector)",
        "snippet": "    @Override\n    public OpenMapRealVector ebeMultiply(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n        }\n        /*\n         * MATH-803: the above loop assumes that 0d * x  = 0d for any double x,\n         * which allows to consider only the non-zero entries of this. However,\n         * this fails if this[i] == 0d and (v[i] = NaN or v[i] = Infinity).\n         *\n         * These special cases are handled below.\n         */\n        return res;\n    }\n",
        "begin_line": 358,
        "end_line": 375,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.SparseRealVector": null,
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealVector": "\n     * Construct a new vector by appending a vector to this vector.\n     *\n     * @param v vector to append to this one.\n     * @return a new vector.\n     "
        },
        "susp": {
            "ochiai_susp": 0.6667
        },
        "num_failing_tests": 2
    },
    {
        "name": "OpenIntToDoubleHashMap.findInsertionIndex#267",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(int[], byte[], int, int)",
        "snippet": "    private static int findInsertionIndex(final int[] keys, final byte[] states,\n                                          final int key, final int mask) {\n        final int hash = hashOf(key);\n        int index = hash & mask;\n        if (states[index] == FREE) {\n            return index;\n        } else if (states[index] == FULL && keys[index] == key) {\n            return changeIndexSign(index);\n        }\n\n        int perturb = perturb(hash);\n        int j = index;\n        if (states[index] == FULL) {\n            while (true) {\n                j = probe(perturb, j);\n                index = j & mask;\n                perturb >>= PERTURB_SHIFT;\n\n                if (states[index] != FULL || keys[index] == key) {\n                    break;\n                }\n            }\n        }\n\n        if (states[index] == FREE) {\n            return index;\n        } else if (states[index] == FULL) {\n            // due to the loop exit condition,\n            // if (states[index] == FULL) then keys[index] == key\n            return changeIndexSign(index);\n        }\n\n        final int firstRemoved = index;\n        while (true) {\n            j = probe(perturb, j);\n            index = j & mask;\n\n            if (states[index] == FREE) {\n                return firstRemoved;\n            } else if (states[index] == FULL && keys[index] == key) {\n                return changeIndexSign(index);\n            }\n\n            perturb >>= PERTURB_SHIFT;\n\n        }\n\n    }\n",
        "begin_line": 267,
        "end_line": 314,
        "comment": "\n     * Find the index at which a key should be inserted\n     * @param keys keys table\n     * @param states states table\n     * @param key key to lookup\n     * @param mask bit mask for hash values\n     * @return index at which key should be inserted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6124
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.perturb#246",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.perturb(int)",
        "snippet": "    private static int perturb(final int hash) {\n        return hash & 0x7fffffff;\n    }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n     * Perturb the hash for starting probing.\n     * @param hash initial hash\n     * @return perturbed hash\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.probe#322",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(int, int)",
        "snippet": "    private static int probe(final int perturb, final int j) {\n        return (j << 2) + j + perturb + 1;\n    }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "\n     * Compute next probe for collision resolution\n     * @param perturb perturbed hash\n     * @param j previous probe\n     * @return next probe\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.remove#349",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.remove(int)",
        "snippet": "    public double remove(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return doRemove(index);\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\n            index = j & mask;\n            if (containsKey(key, index)) {\n                return doRemove(index);\n            }\n        }\n\n        return missingEntries;\n\n    }\n",
        "begin_line": 349,
        "end_line": 372,
        "comment": "\n     * Remove the value associated with a key.\n     * @param key key to which the value is associated\n     * @return removed value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.doRemove#390",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.doRemove(int)",
        "snippet": "    private double doRemove(int index) {\n        keys[index]   = 0;\n        states[index] = REMOVED;\n        final double previous = values[index];\n        values[index] = missingEntries;\n        --size;\n        ++count;\n        return previous;\n    }\n",
        "begin_line": 390,
        "end_line": 398,
        "comment": "\n     * Remove an element at specified index.\n     * @param index index of the element to remove\n     * @return removed value\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.setEntry#586",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.setEntry(int, double)",
        "snippet": "    @Override\n    public void setEntry(int index, double value) {\n        checkIndex(index);\n        if (!isDefaultValue(value)) {\n            entries.put(index, value);\n        } else if (entries.containsKey(index)) {\n            entries.remove(index);\n        }\n    }\n",
        "begin_line": 586,
        "end_line": 594,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.SparseRealVector": null,
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealVector": "\n     * Set a single element.\n     *\n     * @param index element index.\n     * @param value new value for the element.\n     * @throws org.apache.commons.math3.exception.OutOfRangeException\n     * if the index is not valid.\n     * @see #getEntry(int)\n     "
        },
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.containsKey#205",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.containsKey(int)",
        "snippet": "    public boolean containsKey(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return true;\n        }\n\n        if (states[index] == FREE) {\n            return false;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\n            index = j & mask;\n            if (containsKey(key, index)) {\n                return true;\n            }\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 205,
        "end_line": 228,
        "comment": "\n     * Check if a value is associated with a key.\n     * @param key key to check\n     * @return true if a value is associated with key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4804
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.put#406",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.put(int, double)",
        "snippet": "    public double put(final int key, final double value) {\n        int index = findInsertionIndex(key);\n        double previous = missingEntries;\n        boolean newMapping = true;\n        if (index < 0) {\n            index = changeIndexSign(index);\n            previous = values[index];\n            newMapping = false;\n        }\n        keys[index]   = key;\n        states[index] = FULL;\n        values[index] = value;\n        if (newMapping) {\n            ++size;\n            if (shouldGrowTable()) {\n                growTable();\n            }\n            ++count;\n        }\n        return previous;\n\n    }\n",
        "begin_line": 406,
        "end_line": 427,
        "comment": "\n     * Put a value associated with a key in the map.\n     * @param key key to which value is associated\n     * @param value value to put in the map\n     * @return previous value associated with the key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4629
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.growTable#432",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.growTable()",
        "snippet": "    private void growTable() {\n\n        final int oldLength      = states.length;\n        final int[] oldKeys      = keys;\n        final double[] oldValues = values;\n        final byte[] oldStates   = states;\n\n        final int newLength = RESIZE_MULTIPLIER * oldLength;\n        final int[] newKeys = new int[newLength];\n        final double[] newValues = new double[newLength];\n        final byte[] newStates = new byte[newLength];\n        final int newMask = newLength - 1;\n        for (int i = 0; i < oldLength; ++i) {\n            if (oldStates[i] == FULL) {\n                final int key = oldKeys[i];\n                final int index = findInsertionIndex(newKeys, newStates, key, newMask);\n                newKeys[index]   = key;\n                newValues[index] = oldValues[i];\n                newStates[index] = FULL;\n            }\n        }\n\n        mask   = newMask;\n        keys   = newKeys;\n        values = newValues;\n        states = newStates;\n\n    }\n",
        "begin_line": 432,
        "end_line": 459,
        "comment": "\n     * Grow the tables.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4629
        },
        "num_failing_tests": 3
    },
    {
        "name": "RealVector.checkVectorDimensions#175",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealVector.java",
        "class_name": "org.apache.commons.math3.linear.RealVector",
        "signature": "org.apache.commons.math3.linear.RealVector.checkVectorDimensions(int)",
        "snippet": "    protected void checkVectorDimensions(int n) {\n        int d = getDimension();\n        if (d != n) {\n            throw new DimensionMismatchException(d, n);\n        }\n    }\n",
        "begin_line": 175,
        "end_line": 180,
        "comment": "\n     * Check if instance dimension is equal to some expected value.\n     *\n     * @param n Expected dimension.\n     * @throws DimensionMismatchException if the dimension is\n     * inconsistent with the vector size.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4629
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.OpenMapRealVector#179",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector)",
        "snippet": "    public OpenMapRealVector(OpenMapRealVector v) {\n        virtualSize = v.getDimension();\n        entries = new OpenIntToDoubleHashMap(v.getEntries());\n        epsilon = v.epsilon;\n    }\n",
        "begin_line": 179,
        "end_line": 183,
        "comment": "\n     * Copy constructor.\n     *\n     * @param v Instance to copy from.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4201
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.getEntries#207",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.getEntries()",
        "snippet": "    private OpenIntToDoubleHashMap getEntries() {\n        return entries;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n     * Get the entries of this instance.\n     *\n     * @return the entries of this instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.ebeDivide#340",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.ebeDivide(org.apache.commons.math3.linear.RealVector)",
        "snippet": "    @Override\n    public OpenMapRealVector ebeDivide(RealVector v) {\n        checkVectorDimensions(v.getDimension());\n        OpenMapRealVector res = new OpenMapRealVector(this);\n        /*\n         * MATH-803: it is not sufficient to loop through non zero entries of\n         * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n         * this[i] / v[i] = NaN, and not 0d.\n         */\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n        }\n        return res;\n    }\n",
        "begin_line": 340,
        "end_line": 355,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.SparseRealVector": null,
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealVector": "\n     * Construct a new vector by appending a vector to this vector.\n     *\n     * @param v vector to append to this one.\n     * @return a new vector.\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "OpenIntToDoubleHashMap.OpenIntToDoubleHashMap#130",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(org.apache.commons.math3.util.OpenIntToDoubleHashMap)",
        "snippet": "    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {\n        final int length = source.keys.length;\n        keys = new int[length];\n        System.arraycopy(source.keys, 0, keys, 0, length);\n        values = new double[length];\n        System.arraycopy(source.values, 0, values, 0, length);\n        states = new byte[length];\n        System.arraycopy(source.states, 0, states, 0, length);\n        missingEntries = source.missingEntries;\n        size  = source.size;\n        mask  = source.mask;\n        count = source.count;\n    }\n",
        "begin_line": 130,
        "end_line": 142,
        "comment": "\n     * Copy constructor.\n     * @param source map to copy\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3974
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.key#524",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.key()",
        "snippet": "        public int key()\n            throws ConcurrentModificationException, NoSuchElementException {\n            if (referenceCount != count) {\n                throw new ConcurrentModificationException();\n            }\n            if (current < 0) {\n                throw new NoSuchElementException();\n            }\n            return keys[current];\n        }\n",
        "begin_line": 524,
        "end_line": 533,
        "comment": "\n         * Get the key of current entry.\n         * @return key of current entry\n         * @exception ConcurrentModificationException if the map is modified during iteration\n         * @exception NoSuchElementException if there is no element left in the map\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3612
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.changeIndexSign#331",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(int)",
        "snippet": "    private static int changeIndexSign(final int index) {\n        return -index - 1;\n    }\n",
        "begin_line": 331,
        "end_line": 333,
        "comment": "\n     * Change the index sign\n     * @param index initial index\n     * @return changed index\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.Iterator#495",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.Iterator()",
        "snippet": "        private Iterator() {\n\n            // preserve the modification count of the map to detect concurrent modifications later\n            referenceCount = count;\n\n            // initialize current index\n            next = -1;\n            try {\n                advance();\n            } catch (NoSuchElementException nsee) {\n                // ignored\n            }\n\n        }\n",
        "begin_line": 495,
        "end_line": 508,
        "comment": "\n         * Simple constructor.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3216
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.hasNext#514",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.hasNext()",
        "snippet": "        public boolean hasNext() {\n            return next >= 0;\n        }\n",
        "begin_line": 514,
        "end_line": 516,
        "comment": "\n         * Check if there is a next element in the map.\n         * @return true if there is a next element\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3216
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.value#541",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.value()",
        "snippet": "        public double value()\n            throws ConcurrentModificationException, NoSuchElementException {\n            if (referenceCount != count) {\n                throw new ConcurrentModificationException();\n            }\n            if (current < 0) {\n                throw new NoSuchElementException();\n            }\n            return values[current];\n        }\n",
        "begin_line": 541,
        "end_line": 550,
        "comment": "\n         * Get the value of current entry.\n         * @return value of current entry\n         * @exception ConcurrentModificationException if the map is modified during iteration\n         * @exception NoSuchElementException if there is no element left in the map\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3216
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.advance#557",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.Iterator.advance()",
        "snippet": "        public void advance()\n            throws ConcurrentModificationException, NoSuchElementException {\n\n            if (referenceCount != count) {\n                throw new ConcurrentModificationException();\n            }\n\n            // advance on step\n            current = next;\n\n            // prepare next step\n            try {\n                while (states[++next] != FULL) {\n                    // nothing to do\n                }\n            } catch (ArrayIndexOutOfBoundsException e) {\n                next = -2;\n                if (current < 0) {\n                    throw new NoSuchElementException();\n                }\n            }\n\n        }\n",
        "begin_line": 557,
        "end_line": 579,
        "comment": "\n         * Advance iterator one step further.\n         * @exception ConcurrentModificationException if the map is modified during iteration\n         * @exception NoSuchElementException if there is no element left in the map\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3216
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.iterator#237",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.iterator()",
        "snippet": "    public Iterator iterator() {\n        return new Iterator();\n    }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\n     * Get an iterator over map elements.\n     * <p>The specialized iterators returned are fail-fast: they throw a\n     * <code>ConcurrentModificationException</code> when they detect the map\n     * has been modified during iteration.</p>\n     * @return iterator over the map elements\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3216
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.get#175",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.get(int)",
        "snippet": "    public double get(final int key) {\n\n        final int hash  = hashOf(key);\n        int index = hash & mask;\n        if (containsKey(key, index)) {\n            return values[index];\n        }\n\n        if (states[index] == FREE) {\n            return missingEntries;\n        }\n\n        int j = index;\n        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {\n            j = probe(perturb, j);\n            index = j & mask;\n            if (containsKey(key, index)) {\n                return values[index];\n            }\n        }\n\n        return missingEntries;\n\n    }\n",
        "begin_line": 175,
        "end_line": 198,
        "comment": "\n     * Get the stored value associated with the given key\n     * @param key key associated with the data\n     * @return data associated with the key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.getEntry#446",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.getEntry(int)",
        "snippet": "    @Override\n    public double getEntry(int index) {\n        checkIndex(index);\n        return entries.get(index);\n    }\n",
        "begin_line": 446,
        "end_line": 450,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.SparseRealVector": null,
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealVector": "\n     * Return the entry at the specified index.\n     *\n     * @param index Index location of entry to be fetched.\n     * @return the vector entry at {@code index}.\n     * @throws org.apache.commons.math3.exception.OutOfRangeException\n     * if the index is not valid.\n     * @see #setEntry(int, double)\n     "
        },
        "susp": {
            "ochiai_susp": 0.281
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.containsKey#381",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.containsKey(int, int)",
        "snippet": "    private boolean containsKey(final int key, final int index) {\n        return (key != 0 || states[index] == FULL) && keys[index] == key;\n    }\n",
        "begin_line": 381,
        "end_line": 383,
        "comment": "\n     * Check if the tables contain an element associated with specified key\n     * at specified index.\n     * @param key key to check\n     * @param index index to check\n     * @return true if an element is associated with key at index\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2739
        },
        "num_failing_tests": 3
    },
    {
        "name": "RealVector.checkIndex#188",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealVector.java",
        "class_name": "org.apache.commons.math3.linear.RealVector",
        "signature": "org.apache.commons.math3.linear.RealVector.checkIndex(int)",
        "snippet": "    protected void checkIndex(final int index) {\n        if (index < 0 ||\n            index >= getDimension()) {\n            throw new OutOfRangeException(LocalizedFormats.INDEX,\n                                          index, 0, getDimension() - 1);\n        }\n    }\n",
        "begin_line": 188,
        "end_line": 194,
        "comment": "\n     * Check if an index is valid.\n     *\n     * @param index Index to check.\n     * @exception OutOfRangeException if {@code index} is not valid.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2554
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.OpenMapRealVector#133",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapRealVector(double[], double)",
        "snippet": "    public OpenMapRealVector(double[] values, double epsilon) {\n        virtualSize = values.length;\n        entries = new OpenIntToDoubleHashMap(0.0);\n        this.epsilon = epsilon;\n        for (int key = 0; key < values.length; key++) {\n            double value = values[key];\n            if (!isDefaultValue(value)) {\n                entries.put(key, value);\n            }\n        }\n    }\n",
        "begin_line": 133,
        "end_line": 143,
        "comment": "\n     * Create from an array, specifying zero tolerance.\n     * Only non-zero entries will be stored.\n     *\n     * @param values Set of values to create from.\n     * @param epsilon Tolerance below which a value is considered zero.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2379
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.findInsertionIndex#255",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.findInsertionIndex(int)",
        "snippet": "    private int findInsertionIndex(final int key) {\n        return findInsertionIndex(keys, states, key, mask);\n    }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "\n     * Find the index at which a key should be inserted\n     * @param key key to lookup\n     * @return index at which key should be inserted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2218
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.shouldGrowTable#465",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.shouldGrowTable()",
        "snippet": "    private boolean shouldGrowTable() {\n        return size > (mask + 1) * LOAD_FACTOR;\n    }\n",
        "begin_line": 465,
        "end_line": 467,
        "comment": "\n     * Check if tables should grow due to increased size.\n     * @return true if  tables should grow\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2218
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.hashOf#474",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.hashOf(int)",
        "snippet": "    private static int hashOf(final int key) {\n        final int h = key ^ ((key >>> 20) ^ (key >>> 12));\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n",
        "begin_line": 474,
        "end_line": 477,
        "comment": "\n     * Compute the hash value of a key\n     * @param key key to hash\n     * @return hash value of the key\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2218
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.OpenMapRealVector#122",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.OpenMapRealVector(double[])",
        "snippet": "    public OpenMapRealVector(double[] values) {\n        this(values, DEFAULT_ZERO_TOLERANCE);\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * Create from an array.\n     * Only non-zero entries will be stored.\n     *\n     * @param values Set of values to create from.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.21
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.getDimension#399",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.getDimension()",
        "snippet": "    @Override\n    public int getDimension() {\n        return virtualSize;\n    }\n",
        "begin_line": 399,
        "end_line": 402,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.linear.SparseRealVector": null,
            "java.io.Serializable": null,
            "org.apache.commons.math3.linear.RealVector": "\n     * Returns the size of the vector.\n     *\n     * @return the size of this vector.\n     "
        },
        "susp": {
            "ochiai_susp": 0.2013
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.OpenIntToDoubleHashMap#99",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(double)",
        "snippet": "    public OpenIntToDoubleHashMap(final double missingEntries) {\n        this(DEFAULT_EXPECTED_SIZE, missingEntries);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Build an empty map with default size\n     * @param missingEntries value to return when a missing entry is fetched\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.OpenIntToDoubleHashMap#116",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.OpenIntToDoubleHashMap(int, double)",
        "snippet": "    public OpenIntToDoubleHashMap(final int expectedSize,\n                                  final double missingEntries) {\n        final int capacity = computeCapacity(expectedSize);\n        keys   = new int[capacity];\n        values = new double[capacity];\n        states = new byte[capacity];\n        this.missingEntries = missingEntries;\n        mask   = capacity - 1;\n    }\n",
        "begin_line": 116,
        "end_line": 124,
        "comment": "\n     * Build an empty map with specified size.\n     * @param expectedSize expected number of elements in the map\n     * @param missingEntries value to return when a missing entry is fetched\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenIntToDoubleHashMap.computeCapacity#149",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
        "class_name": "org.apache.commons.math3.util.OpenIntToDoubleHashMap",
        "signature": "org.apache.commons.math3.util.OpenIntToDoubleHashMap.computeCapacity(int)",
        "snippet": "    private static int computeCapacity(final int expectedSize) {\n        if (expectedSize == 0) {\n            return 1;\n        }\n        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);\n        final int powerOfTwo = Integer.highestOneBit(capacity);\n        if (powerOfTwo == capacity) {\n            return capacity;\n        }\n        return nextPowerOfTwo(capacity);\n    }\n",
        "begin_line": 149,
        "end_line": 159,
        "comment": "\n     * Compute the capacity needed for a given size.\n     * @param expectedSize expected size of the map\n     * @return capacity to use for the specified size\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.abs#3019",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n    }\n",
        "begin_line": 3019,
        "end_line": 3021,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.floor#3331",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.floor(double)",
        "snippet": "    public static double floor(double x) {\n        long y;\n\n        if (x != x) { // NaN\n            return x;\n        }\n\n        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n            return x;\n        }\n\n        y = (long) x;\n        if (x < 0 && y != x) {\n            y--;\n        }\n\n        if (y == 0) {\n            return x*y;\n        }\n\n        return y;\n    }\n",
        "begin_line": 3331,
        "end_line": 3352,
        "comment": " Get the largest whole number smaller than x.\n     * @param x number from which floor is requested\n     * @return a double number f such that f is an integer f <= x < f + 1.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "FastMath.ceil#3358",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.ceil(double)",
        "snippet": "    public static double ceil(double x) {\n        double y;\n\n        if (x != x) { // NaN\n            return x;\n        }\n\n        y = floor(x);\n        if (y == x) {\n            return y;\n        }\n\n        y += 1.0;\n\n        if (y == 0) {\n            return x*y;\n        }\n\n        return y;\n    }\n",
        "begin_line": 3358,
        "end_line": 3377,
        "comment": " Get the smallest whole number larger than x.\n     * @param x number from which ceil is requested\n     * @return a double number c such that c is an integer c - 1.0 < x <= c\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    },
    {
        "name": "OpenMapRealVector.isDefaultValue#219",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "class_name": "org.apache.commons.math3.linear.OpenMapRealVector",
        "signature": "org.apache.commons.math3.linear.OpenMapRealVector.isDefaultValue(double)",
        "snippet": "    protected boolean isDefaultValue(double value) {\n        return FastMath.abs(value) < epsilon;\n    }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "\n     * Determine if this value is within epsilon of zero.\n     *\n     * @param value Value to test\n     * @return {@code true} if this value is within epsilon to zero,\n     * {@code false} otherwise.\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1987
        },
        "num_failing_tests": 3
    }
]