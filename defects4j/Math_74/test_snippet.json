[
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.dimensionCheck()",
        "snippet": "    @Test(expected=IntegratorException.class)\n    public void dimensionCheck() throws DerivativeException, IntegratorException {\n        TestProblem1 pb = new TestProblem1();\n        FirstOrderIntegrator integ =\n            new AdamsMoultonIntegrator(2, 0.0, 1.0, 1.0e-10, 1.0e-10);\n        integ.integrate(pb,\n                        0.0, new double[pb.getDimension()+10],\n                        1.0, new double[pb.getDimension()+10]);\n    }\n",
        "begin_line": 34,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 45)",
            "(line 37,col 9)-(line 38,col 70)",
            "(line 39,col 9)-(line 41,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testMinStep()",
        "snippet": "    @Test(expected=IntegratorException.class)\n    public void testMinStep() throws DerivativeException, IntegratorException {\n\n          TestProblem1 pb = new TestProblem1();\n          double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n          double maxStep = pb.getFinalTime() - pb.getInitialTime();\n          double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };\n          double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };\n\n          FirstOrderIntegrator integ = new AdamsMoultonIntegrator(4, minStep, maxStep,\n                                                                  vecAbsoluteTolerance,\n                                                                  vecRelativeTolerance);\n          TestProblemHandler handler = new TestProblemHandler(pb, integ);\n          integ.addStepHandler(handler);\n          integ.integrate(pb,\n                          pb.getInitialTime(), pb.getInitialState(),\n                          pb.getFinalTime(), new double[pb.getDimension()]);\n\n    }\n",
        "begin_line": 44,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 47,col 11)-(line 47,col 47)",
            "(line 48,col 11)-(line 48,col 75)",
            "(line 49,col 11)-(line 49,col 67)",
            "(line 50,col 11)-(line 50,col 63)",
            "(line 51,col 11)-(line 51,col 63)",
            "(line 53,col 11)-(line 55,col 88)",
            "(line 56,col 11)-(line 56,col 73)",
            "(line 57,col 11)-(line 57,col 40)",
            "(line 58,col 11)-(line 60,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance()",
        "snippet": "    @Test\n    public void testIncreasingTolerance()\n        throws DerivativeException, IntegratorException {\n\n        int previousCalls = Integer.MAX_VALUE;\n        for (int i = -12; i < -2; ++i) {\n            TestProblem1 pb = new TestProblem1();\n            double minStep = 0;\n            double maxStep = pb.getFinalTime() - pb.getInitialTime();\n            double scalAbsoluteTolerance = Math.pow(10.0, i);\n            double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n            FirstOrderIntegrator integ = new AdamsMoultonIntegrator(4, minStep, maxStep,\n                                                                    scalAbsoluteTolerance,\n                                                                    scalRelativeTolerance);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb,\n                            pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);\n\n            // the 0.15 and 3.0 factors are only valid for this test\n            // and has been obtained from trial and error\n            // there is no general relation between local and global errors\n            assertTrue(handler.getMaximalValueError() > (0.15 * scalAbsoluteTolerance));\n            assertTrue(handler.getMaximalValueError() < (3.0 * scalAbsoluteTolerance));\n            assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);\n\n            int calls = pb.getCalls();\n            assertEquals(integ.getEvaluations(), calls);\n            assertTrue(calls <= previousCalls);\n            previousCalls = calls;\n\n        }\n\n    }\n",
        "begin_line": 64,
        "end_line": 99,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 46)",
            "(line 69,col 9)-(line 97,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.exceedMaxEvaluations()",
        "snippet": "    @Test(expected = DerivativeException.class)\n    public void exceedMaxEvaluations() throws DerivativeException, IntegratorException {\n\n        TestProblem1 pb  = new TestProblem1();\n        double range = pb.getFinalTime() - pb.getInitialTime();\n\n        AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(2, 0, range, 1.0e-12, 1.0e-12);\n        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n        integ.addStepHandler(handler);\n        integ.setMaxEvaluations(650);\n        integ.integrate(pb,\n                        pb.getInitialTime(), pb.getInitialState(),\n                        pb.getFinalTime(), new double[pb.getDimension()]);\n\n    }\n",
        "begin_line": 101,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 46)",
            "(line 105,col 9)-(line 105,col 63)",
            "(line 107,col 9)-(line 107,col 97)",
            "(line 108,col 9)-(line 108,col 71)",
            "(line 109,col 9)-(line 109,col 38)",
            "(line 110,col 9)-(line 110,col 37)",
            "(line 111,col 9)-(line 113,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.backward()",
        "snippet": "    @Test\n    public void backward() throws DerivativeException, IntegratorException {\n\n        TestProblem5 pb = new TestProblem5();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        FirstOrderIntegrator integ = new AdamsMoultonIntegrator(4, 0, range, 1.0e-12, 1.0e-12);\n        TestProblemHandler handler = new TestProblemHandler(pb, integ);\n        integ.addStepHandler(handler);\n        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                        pb.getFinalTime(), new double[pb.getDimension()]);\n\n        assertTrue(handler.getLastError() < 1.0e-9);\n        assertTrue(handler.getMaximalValueError() < 1.0e-9);\n        assertEquals(0, handler.getMaximalTimeError(), 1.0e-16);\n        assertEquals(\"Adams-Moulton\", integ.getName());\n    }\n",
        "begin_line": 117,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 73)",
            "(line 123,col 9)-(line 123,col 95)",
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 38)",
            "(line 126,col 9)-(line 127,col 74)",
            "(line 129,col 9)-(line 129,col 52)",
            "(line 130,col 9)-(line 130,col 60)",
            "(line 131,col 9)-(line 131,col 64)",
            "(line 132,col 9)-(line 132,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
        "signature": "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial()",
        "snippet": "    @Test\n    public void polynomial() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);\n            if (nSteps < 4) {\n                assertTrue(integ.getEvaluations() > 140);\n            } else {\n                assertTrue(integ.getEvaluations() < 90);\n            }\n        }\n\n    }\n",
        "begin_line": 135,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 137,col 9)-(line 137,col 45)",
            "(line 138,col 9)-(line 138,col 73)",
            "(line 140,col 9)-(line 152,col 9)"
        ]
    }
]