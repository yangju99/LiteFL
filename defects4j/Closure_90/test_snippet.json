[
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    reportMissingOverrides = CheckLevel.WARNING;\n  }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 18)",
            "(line 44,col 5)-(line 44,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
        "snippet": "  public void testInitialTypingScope() {\n    Scope s = new TypedScopeCreator(compiler,\n        new DefaultCodingConvention()).createInitialScope(\n            new Node(Token.BLOCK));\n\n    assertEquals(ARRAY_FUNCTION_TYPE, s.getVar(\"Array\").getType());\n    assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Boolean\").getType());\n    assertEquals(DATE_FUNCTION_TYPE, s.getVar(\"Date\").getType());\n    assertEquals(ERROR_FUNCTION_TYPE, s.getVar(\"Error\").getType());\n    assertEquals(EVAL_ERROR_FUNCTION_TYPE,\n        s.getVar(\"EvalError\").getType());\n    assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"Number\").getType());\n    assertEquals(OBJECT_FUNCTION_TYPE, s.getVar(\"Object\").getType());\n    assertEquals(RANGE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"RangeError\").getType());\n    assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"ReferenceError\").getType());\n    assertEquals(REGEXP_FUNCTION_TYPE, s.getVar(\"RegExp\").getType());\n    assertEquals(STRING_OBJECT_FUNCTION_TYPE,\n        s.getVar(\"String\").getType());\n    assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,\n        s.getVar(\"SyntaxError\").getType());\n    assertEquals(TYPE_ERROR_FUNCTION_TYPE,\n        s.getVar(\"TypeError\").getType());\n    assertEquals(URI_ERROR_FUNCTION_TYPE,\n        s.getVar(\"URIError\").getType());\n  }\n",
        "begin_line": 47,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 48,col 5)-(line 50,col 35)",
            "(line 52,col 5)-(line 52,col 67)",
            "(line 53,col 5)-(line 54,col 39)",
            "(line 55,col 5)-(line 55,col 65)",
            "(line 56,col 5)-(line 56,col 67)",
            "(line 57,col 5)-(line 58,col 41)",
            "(line 59,col 5)-(line 60,col 38)",
            "(line 61,col 5)-(line 61,col 69)",
            "(line 62,col 5)-(line 63,col 42)",
            "(line 64,col 5)-(line 65,col 46)",
            "(line 66,col 5)-(line 66,col 69)",
            "(line 67,col 5)-(line 68,col 38)",
            "(line 69,col 5)-(line 70,col 43)",
            "(line 71,col 5)-(line 72,col 41)",
            "(line 73,col 5)-(line 74,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck1()",
        "snippet": "  public void testTypeCheck1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ if (foo()) return; }\");\n  }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck2()",
        "snippet": "  public void testTypeCheck2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ foo()--; }\",\n        \"increment/decrement\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 85,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck4()",
        "snippet": "  public void testTypeCheck4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ !foo(); }\");\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck5()",
        "snippet": "  public void testTypeCheck5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = +foo(); }\",\n        \"sign operator\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 96,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck6()",
        "snippet": "  public void testTypeCheck6() throws Exception {\n    testTypes(\n        \"/**@return {void}*/function foo(){\" +\n        \"/** @type {undefined|number} */var a;if (a == foo())return;}\");\n  }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 102,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck7()",
        "snippet": "  public void testTypeCheck7() throws Exception {\n    testTypes(\"function foo() {delete 'abc';}\",\n        TypeCheck.BAD_DELETE);\n  }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 107,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck8()",
        "snippet": "  public void testTypeCheck8() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){do {} while (foo());}\");\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck9()",
        "snippet": "  public void testTypeCheck9() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){while (foo());}\");\n  }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck10()",
        "snippet": "  public void testTypeCheck10() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){for (;foo(););}\");\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck11()",
        "snippet": "  public void testTypeCheck11() throws Exception {\n    testTypes(\"/**@type !Number */var a;\" +\n        \"/**@type !String */var b;\" +\n        \"a = b;\",\n        \"assignment\\n\" +\n        \"found   : String\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 122,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck12()",
        "snippet": "  public void testTypeCheck12() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = 3^foo();}\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 131,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 135,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck13()",
        "snippet": "  public void testTypeCheck13() throws Exception {\n    testTypes(\"/**@type {!Number|!String}*/var i; i=/xx/;\",\n        \"assignment\\n\" +\n        \"found   : RegExp\\n\" +\n        \"required: (Number|String)\");\n  }\n",
        "begin_line": 138,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 142,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck14()",
        "snippet": "  public void testTypeCheck14() throws Exception {\n    testTypes(\"/**@param opt_a*/function foo(opt_a){}\");\n  }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck15()",
        "snippet": "  public void testTypeCheck15() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x;x=null;x=10;\",\n        \"assignment\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 154,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck16()",
        "snippet": "  public void testTypeCheck16() throws Exception {\n    testTypes(\"/**@type {Number|null} */var x='';\",\n              \"initializing variable\\n\" +\n              \"found   : string\\n\" +\n              \"required: (Number|null)\");\n  }\n",
        "begin_line": 157,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 161,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck17()",
        "snippet": "  public void testTypeCheck17() throws Exception {\n    testTypes(\"/**@return {Number}\\n@param {Number} opt_foo */\\n\" +\n        \"function a(opt_foo){\\nreturn /**@type {Number}*/(opt_foo);\\n}\");\n  }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 167,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck18()",
        "snippet": "  public void testTypeCheck18() throws Exception {\n    testTypes(\"/**@return {RegExp}\\n*/\\n function a(){return new RegExp();}\");\n  }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck19()",
        "snippet": "  public void testTypeCheck19() throws Exception {\n    testTypes(\"/**@return {Array}\\n*/\\n function a(){return new Array();}\");\n  }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck20()",
        "snippet": "  public void testTypeCheck20() throws Exception {\n    testTypes(\"/**@return {Date}\\n*/\\n function a(){return new Date();}\");\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
        "snippet": "  public void testTypeCheckBasicDowncast() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {Object} */ var bar = new foo();\\n\");\n  }\n",
        "begin_line": 183,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 185,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
        "snippet": "  public void testTypeCheckNoDowncastToNumber() throws Exception {\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n                  \"/** @type {!Number} */ var bar = new foo();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : foo\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 188,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 193,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck21()",
        "snippet": "  public void testTypeCheck21() throws Exception {\n    testTypes(\"/** @type Array.<String> */var foo;\");\n  }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 197,col 5)-(line 197,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck22()",
        "snippet": "  public void testTypeCheck22() throws Exception {\n    testTypes(\"/** @param {Element|Object} p */\\nfunction foo(p){}\\n\" +\n                  \"/** @constructor */function Element(){}\\n\" +\n                  \"/** @type {Element|Object} */var v;\\n\" +\n                  \"foo(v);\\n\");\n  }\n",
        "begin_line": 200,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 204,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck23()",
        "snippet": "  public void testTypeCheck23() throws Exception {\n    testTypes(\"/** @type {(Object,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheck24()",
        "snippet": "  public void testTypeCheck24() throws Exception {\n    testTypes(\"/** @constructor */function MyType(){}\\n\" +\n        \"/** @type {(MyType,Null)} */var foo; foo = null;\");\n  }\n",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 213,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
        "snippet": "  public void testTypeCheckDefaultExterns() throws Exception {\n    testTypes(\"/** @param {string} x */ function f(x) {}\" +\n        \"f([].length);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 221,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
        "snippet": "  public void testTypeCheckCustomExterns() throws Exception {\n    testTypes(\n        DEFAULT_EXTERNS + \"/** @type {boolean} */ Array.prototype.oogabooga;\",\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f([].oogabooga);\" ,\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\", false);\n  }\n",
        "begin_line": 224,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 231,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray1()",
        "snippet": "  public void testParameterizedArray1() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 240,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray2()",
        "snippet": "  public void testParameterizedArray2() throws Exception {\n    testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 249,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray3()",
        "snippet": "  public void testParameterizedArray3() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"* @return {number}\\n\" +\n        \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n  }\n",
        "begin_line": 252,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 255,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray4()",
        "snippet": "  public void testParameterizedArray4() throws Exception {\n    testTypes(\"/** @param {!Array.<number>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\",\n        \"assignment\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 258,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 263,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray5()",
        "snippet": "  public void testParameterizedArray5() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"*/ var f = function(a) { a[0] = 'a'; };\");\n  }\n",
        "begin_line": 266,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 268,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray6()",
        "snippet": "  public void testParameterizedArray6() throws Exception {\n    testTypes(\"/** @param {!Array.<*>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : *\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 271,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 277,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedArray7()",
        "snippet": "  public void testParameterizedArray7() throws Exception {\n    testTypes(\"/** @param {?Array.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 280,
        "end_line": 287,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 286,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject1()",
        "snippet": "  public void testParameterizedObject1() throws Exception {\n    testTypes(\"/** @param {!Object.<number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a[0]; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 289,
        "end_line": 296,
        "comment": "",
        "child_ranges": [
            "(line 290,col 5)-(line 295,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject2()",
        "snippet": "  public void testParameterizedObject2() throws Exception {\n    testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 298,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 299,col 5)-(line 304,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject3()",
        "snippet": "  public void testParameterizedObject3() throws Exception {\n    testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 307,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 308,col 5)-(line 313,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testParameterizedObject4()",
        "snippet": "  public void testParameterizedObject4() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!Object.<E,string>} a\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/ var f = function(a) { return a['x']; };\",\n        \"restricted index type\\n\" +\n        \"found   : string\\n\" +\n        \"required: E.<string>\");\n  }\n",
        "begin_line": 316,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 317,col 5)-(line 323,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
        "snippet": "  public void testUnionOfFunctionAndType() throws Exception {\n    testTypes(\"/** @type {null|(function(Number):void)} */ var a;\" +\n        \"/** @type {(function(Number):void)|null} */ var b = null; a = b;\");\n  }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 328,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
        "snippet": "  public void testOptionalParameterComparedToUndefined() throws Exception {\n    testTypes(\"/**@param opt_a {Number}*/function foo(opt_a)\" +\n        \"{if (opt_a==undefined) var b = 3;}\");\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 333,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalAllType()",
        "snippet": "  public void testOptionalAllType() throws Exception {\n    testTypes(\"/** @param {*} opt_x */function f(opt_x) { return opt_x }\\n\" +\n        \"/** @type {*} */var y;\\n\" +\n        \"f(y);\");\n  }\n",
        "begin_line": 336,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 337,col 5)-(line 339,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
        "snippet": "  public void testOptionalUnknownNamedType() throws Exception {\n    testTypes(\"/** @param {!T} opt_x\\n@return {undefined} */\\n\" +\n        \"function f(opt_x) { return opt_x; }\\n\" +\n        \"/** @constructor */var T = function() {};\",\n        \"inconsistent return type\\n\" +\n        \"found   : (T|undefined)\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 342,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 343,col 5)-(line 348,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
        "snippet": "  public void testOptionalArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a()};\");\n  }\n",
        "begin_line": 351,
        "end_line": 354,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 353,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
        "snippet": "  public void testOptionalArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 356,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 357,col 5)-(line 358,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
        "snippet": "  public void testOptionalArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(number=)} a */\" +\n        \"function f(a) {a(undefined)};\");\n  }\n",
        "begin_line": 361,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 362,col 5)-(line 363,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
        "snippet": "  public void testOptionalArgFunctionParam4() throws Exception {\n    String expectedWarning = \"Function a: called with 2 argument(s). \" +\n        \"Function requires at least 0 argument(s) and no more than 1 \" +\n        \"argument(s).\";\n\n    testTypes(\"/** @param {function(number=)} a */function f(a) {a(3,4)};\",\n              expectedWarning, false);\n  }\n",
        "begin_line": 366,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 369,col 23)",
            "(line 371,col 5)-(line 372,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
        "snippet": "  public void testOptionalArgFunctionParamError() throws Exception {\n    String expectedWarning = \"Parse error. variable length argument must be \" +\n        \"last\";\n    testTypes(\"/** @param {function(...[number], number=)} a */\" +\n              \"function f(a) {};\", expectedWarning, false);\n  }\n",
        "begin_line": 375,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 377,col 15)",
            "(line 378,col 5)-(line 379,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
        "snippet": "  public void testOptionalNullableArgFunctionParam() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a()};\");\n  }\n",
        "begin_line": 382,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 384,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
        "snippet": "  public void testOptionalNullableArgFunctionParam2() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(null)};\");\n  }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "child_ranges": [
            "(line 388,col 5)-(line 389,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
        "snippet": "  public void testOptionalNullableArgFunctionParam3() throws Exception {\n    testTypes(\"/** @param {function(?number=)} a */\" +\n              \"function f(a) {a(3)};\");\n  }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 393,col 5)-(line 394,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
        "snippet": "  public void testOptionalArgFunctionReturn() throws Exception {\n    testTypes(\"/** @return {function(number=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()()\");\n  }\n",
        "begin_line": 397,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 398,col 5)-(line 400,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
        "snippet": "  public void testOptionalArgFunctionReturn2() throws Exception {\n    testTypes(\"/** @return {function(Object=)} */\" +\n              \"function f() { return function(opt_x) { }; };\" +\n              \"f()({})\");\n  }\n",
        "begin_line": 403,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 406,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanType()",
        "snippet": "  public void testBooleanType() throws Exception {\n    testTypes(\"/**@type {boolean} */var x = 1 < 2;\");\n  }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 410,col 5)-(line 410,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction1()",
        "snippet": "  public void testBooleanReduction1() throws Exception {\n    testTypes(\"/**@type {string} */var x; x = null || \\\"a\\\";\");\n  }\n",
        "begin_line": 413,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 414,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction2()",
        "snippet": "  public void testBooleanReduction2() throws Exception {\n    // It's important for the type system to recognize that in no case\n    // can the boolean expression evaluate to a boolean value.\n    testTypes(\"/** @param {string} s\\n @return {string} */\" +\n        \"(function(s) { return ((s == 'a') && s) || 'b'; })\");\n  }\n",
        "begin_line": 417,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 421,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction3()",
        "snippet": "  public void testBooleanReduction3() throws Exception {\n    testTypes(\"/** @param {string} s\\n @return {string?} */\" +\n        \"(function(s) { return s && null && 3; })\");\n  }\n",
        "begin_line": 424,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 426,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction4()",
        "snippet": "  public void testBooleanReduction4() throws Exception {\n    testTypes(\"/** @param {Object} x\\n @return {Object} */\" +\n        \"(function(x) { return null || x || null ; })\");\n  }\n",
        "begin_line": 429,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 431,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction5()",
        "snippet": "  public void testBooleanReduction5() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || typeof x == 'string') {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 434,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 444,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction6()",
        "snippet": "  public void testBooleanReduction6() throws Exception {\n    testTypes(\"/**\\n\" +\n        \"* @param {Array|string|null} x\\n\" +\n        \"* @return {string?}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!(x && typeof x != 'string')) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 447,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 457,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanReduction7()",
        "snippet": "   public void testBooleanReduction7() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {Array|T} x\\n\" +\n        \"* @return {null}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x) {\\n\" +\n        \"return x;\\n\" +\n        \"}\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 460,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 461,col 5)-(line 471,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullAnd()",
        "snippet": "  public void testNullAnd() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x && x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 474,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 479,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNullOr()",
        "snippet": "  public void testNullOr() throws Exception {\n    testTypes(\"/** @type null */var x;\\n\" +\n        \"/** @type number */var r = x || x;\",\n        \"initializing variable\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 482,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 483,col 5)-(line 487,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation1()",
        "snippet": "  public void testBooleanPreservation1() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\";\" +\n        \"x = ((x == \\\"a\\\") && x) || x == \\\"b\\\";\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 491,col 5)-(line 495,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation2()",
        "snippet": "  public void testBooleanPreservation2() throws Exception {\n    testTypes(\"/**@type {string} */var x = \\\"a\\\"; x = (x == \\\"a\\\") || x;\",\n        \"assignment\\n\" +\n        \"found   : (boolean|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 498,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 499,col 5)-(line 502,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation3()",
        "snippet": "  public void testBooleanPreservation3() throws Exception {\n    testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"condition always evaluates to false\\n\" +\n        \"left : Function\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 505,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 506,col 5)-(line 510,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanPreservation4()",
        "snippet": "  public void testBooleanPreservation4() throws Exception {\n    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n        \"function f(x) { return x && x == \\\"a\\\"; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 513,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 514,col 5)-(line 518,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction1()",
        "snippet": "  public void testTypeOfReduction1() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x == 'number' ? String(x) : x; }\");\n  }\n",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 522,col 5)-(line 523,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction2()",
        "snippet": "  public void testTypeOfReduction2() throws Exception {\n    testTypes(\"/** @param {string|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'string' ? String(x) : x; }\");\n  }\n",
        "begin_line": 526,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 527,col 5)-(line 528,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction3()",
        "snippet": "  public void testTypeOfReduction3() throws Exception {\n    testTypes(\"/** @param {number|null} x\\n @return {number} */ \" +\n        \"function f(x) { return typeof x == 'object' ? 1 : x; }\");\n  }\n",
        "begin_line": 531,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 533,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction4()",
        "snippet": "  public void testTypeOfReduction4() throws Exception {\n    testTypes(\"/** @param {Object|undefined} x\\n @return {Object} */ \" +\n        \"function f(x) { return typeof x == 'undefined' ? {} : x; }\");\n  }\n",
        "begin_line": 536,
        "end_line": 539,
        "comment": "",
        "child_ranges": [
            "(line 537,col 5)-(line 538,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction5()",
        "snippet": "  public void testTypeOfReduction5() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {!E|number} x\\n @return {string} */ \" +\n        \"function f(x) { return typeof x != 'number' ? x : 'a'; }\");\n  }\n",
        "begin_line": 541,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 542,col 5)-(line 544,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction6()",
        "snippet": "  public void testTypeOfReduction6() throws Exception {\n    testTypes(\"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return typeof x == 'string' && x.length == 3 ? x : 'a';\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 547,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 551,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction7()",
        "snippet": "  public void testTypeOfReduction7() throws Exception {\n    testTypes(\"/** @return {string} */var f = function(x) { \" +\n        \"return typeof x == 'number' ? x : 'a'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 554,
        "end_line": 560,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 559,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction8()",
        "snippet": "  public void testTypeOfReduction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {number|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isString(x) && x.length == 3 ? x : 'a';\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 562,
        "end_line": 569,
        "comment": "",
        "child_ranges": [
            "(line 563,col 5)-(line 568,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction9()",
        "snippet": "  public void testTypeOfReduction9() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {!Array|string} x\\n@return {string} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? 'a' : x;\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 571,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 572,col 5)-(line 577,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction10()",
        "snippet": "  public void testTypeOfReduction10() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isArray(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 580,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 586,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction11()",
        "snippet": "  public void testTypeOfReduction11() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {Array|string} x\\n@return {Array} */\\n\" +\n        \"function f(x) {\\n\" +\n        \"return goog.isObject(x) ? x : [];\\n\" +\n        \"}\", null);\n  }\n",
        "begin_line": 589,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 595,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction12()",
        "snippet": "  public void testTypeOfReduction12() throws Exception {\n    testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n @return {Array} */ \" +\n        \"function f(x) { return typeof x == 'object' ? x : []; }\");\n  }\n",
        "begin_line": 598,
        "end_line": 602,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 601,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction13()",
        "snippet": "  public void testTypeOfReduction13() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n        \"/** @param {E|Array} x\\n@return {Array} */ \" +\n        \"function f(x) { return goog.isObject(x) ? x : []; }\", null);\n  }\n",
        "begin_line": 604,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 605,col 5)-(line 609,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction14()",
        "snippet": "  public void testTypeOfReduction14() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 612,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 618,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeOfReduction15()",
        "snippet": "  public void testTypeOfReduction15() throws Exception {\n    // Don't do type inference on GETELEMs.\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f(arguments) { \" +\n        \"  return typeof arguments[0] == 'string' ? arguments[0] : 0;\" +\n        \"}\", null);\n  }\n",
        "begin_line": 621,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 627,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
        "snippet": "  public void testQualifiedNameReduction1() throws Exception {\n    testTypes(\"var x = {}; /** @type {string?} */ x.a = 'a';\\n\" +\n        \"/** @return {string} */ var f = function() {\\n\" +\n        \"return x.a ? x.a : 'a'; }\");\n  }\n",
        "begin_line": 630,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 633,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
        "snippet": "  public void testQualifiedNameReduction2() throws Exception {\n    testTypes(\"/** @param {string?} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return this.a ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 636,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 637,col 5)-(line 640,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
        "snippet": "  public void testQualifiedNameReduction3() throws Exception {\n    testTypes(\"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return typeof this.a == 'string' ? this.a : 'a'; }\");\n  }\n",
        "begin_line": 643,
        "end_line": 648,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 647,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
        "snippet": "  public void testQualifiedNameReduction4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @param {string|Array} a\\n@constructor */ var T = \" +\n        \"function(a) {this.a = a};\\n\" +\n        \"/** @return {string} */ T.prototype.f = function() {\\n\" +\n        \"return goog.isString(this.a) ? this.a : 'a'; }\", null);\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "",
        "child_ranges": [
            "(line 651,col 5)-(line 656,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
        "snippet": "  public void testInstanceOfReduction1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T|string} x\\n@return {T} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return x; } else { return new T(); }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 659,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 660,col 5)-(line 664,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
        "snippet": "  public void testInstanceOfReduction2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {!T|string} x\\n@return {string} */\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (x instanceof T) { return ''; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 667,
        "end_line": 673,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 672,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
        "snippet": "  public void testPropertyInferredPropagation() throws Exception {\n    testTypes(\"/** @return {Object} */function f() { return {}; }\\n\" +\n         \"function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\\n\" +\n         \"function h() { var x = f(); x.a = false; }\");\n  }\n",
        "begin_line": 675,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 676,col 5)-(line 678,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference1()",
        "snippet": "  public void testPropertyInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 681,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 688,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference2()",
        "snippet": "  public void testPropertyInference2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = null; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 691,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 692,col 5)-(line 699,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference3()",
        "snippet": "  public void testPropertyInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|number)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 702,
        "end_line": 711,
        "comment": "",
        "child_ranges": [
            "(line 703,col 5)-(line 710,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference4()",
        "snippet": "  public void testPropertyInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 713,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 714,col 5)-(line 721,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference5()",
        "snippet": "  public void testPropertyInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"F.prototype.baz = function() { this.x_ = 3; };\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { if (this.x_) return this.x_; };\");\n  }\n",
        "begin_line": 724,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 725,col 5)-(line 729,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference6()",
        "snippet": "  public void testPropertyInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\");\n  }\n",
        "begin_line": 732,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 737,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference7()",
        "snippet": "  public void testPropertyInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { this.x_ = true; }\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 740,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 748,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyInference8()",
        "snippet": "  public void testPropertyInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { \" +\n        \"  /** @type {string} */ this.x_ = 'x';\" +\n        \"}\" +\n        \"(new F).x_ = 3;\" +\n        \"/** @return {string} */\" +\n        \"F.prototype.bar = function() { return this.x_; };\",\n        \"assignment to property x_ of F\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 751,
        "end_line": 762,
        "comment": "",
        "child_ranges": [
            "(line 752,col 5)-(line 761,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForObjectProperties()\n      throws Exception {\n    testTypes(\"/** @param {Object} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Object} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Object} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 764,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 773,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
        "snippet": "  public void testNoPersistentTypeInferenceForFunctionProperties()\n      throws Exception {\n    testTypes(\"/** @param {Function} o\\n@param {string} x */\\n\" +\n        \"function s1(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {string} */\\n\" +\n        \"function g1(o) { return typeof o.x == 'undefined' ? '' : o.x; }\\n\" +\n        \"/** @param {Function} o\\n@param {number} x */\\n\" +\n        \"function s2(o,x) { o.x = x; }\\n\" +\n        \"/** @param {Function} o\\n@return {number} */\\n\" +\n        \"function g2(o) { return typeof o.x == 'undefined' ? 0 : o.x; }\");\n  }\n",
        "begin_line": 776,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 778,col 5)-(line 785,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n    testTypes(\"/** @param {!Object} o\\n@return {string} */\\n\" +\n        \"function f(o) { o.x = 1; return o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 788,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 789,col 5)-(line 793,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { o.x = 'a';\\nif (x) {o.x = x;}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 796,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 801,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
        "snippet": "  public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n    testTypes(\"/**@param {!Object} o\\n@param {number?} x\\n@return {string}*/\" +\n        \"function f(o, x) { if (x) {o.x = x;} else {o.x = 'a';}\\nreturn o.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 804,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 805,col 5)-(line 809,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x = 0;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 812,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 814,col 5)-(line 818,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()\n      throws Exception {\n    testTypes(\"/** @constructor */var T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ T.prototype.x;\",\n        \"assignment to property x of T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 821,
        "end_line": 828,
        "comment": "",
        "child_ranges": [
            "(line 823,col 5)-(line 827,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()\n      throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 830,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 832,col 5)-(line 837,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
        "snippet": "  public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()\n      throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() { this.x = ''; };\\n\" +\n        \"/** @type {number} */ n.T.prototype.x = 0;\",\n        \"assignment to property x of n.T\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 840,
        "end_line": 848,
        "comment": "",
        "child_ranges": [
            "(line 842,col 5)-(line 847,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
        "snippet": "  public void testPropertyUsedBeforeDefinition1() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 850,
        "end_line": 858,
        "comment": "",
        "child_ranges": [
            "(line 851,col 5)-(line 857,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
        "snippet": "  public void testPropertyUsedBeforeDefinition2() throws Exception {\n    testTypes(\"var n = {};\\n\" +\n        \"/** @constructor */ n.T = function() {};\\n\" +\n        \"/** @return {string} */\" +\n        \"n.T.prototype.f = function() { return this.g(); };\\n\" +\n        \"/** @return {number} */ n.T.prototype.g = function() { return 1; };\\n\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 860,
        "end_line": 869,
        "comment": "",
        "child_ranges": [
            "(line 861,col 5)-(line 868,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd1()",
        "snippet": "  public void testAdd1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 'abc'+foo();}\");\n  }\n",
        "begin_line": 871,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 872,col 5)-(line 872,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd2()",
        "snippet": "  public void testAdd2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()+4;}\");\n  }\n",
        "begin_line": 875,
        "end_line": 877,
        "comment": "",
        "child_ranges": [
            "(line 876,col 5)-(line 876,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd3()",
        "snippet": "  public void testAdd3() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 879,
        "end_line": 883,
        "comment": "",
        "child_ranges": [
            "(line 880,col 5)-(line 882,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd4()",
        "snippet": "  public void testAdd4() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 885,
        "end_line": 889,
        "comment": "",
        "child_ranges": [
            "(line 886,col 5)-(line 888,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd5()",
        "snippet": "  public void testAdd5() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\");\n  }\n",
        "begin_line": 891,
        "end_line": 895,
        "comment": "",
        "child_ranges": [
            "(line 892,col 5)-(line 894,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd6()",
        "snippet": "  public void testAdd6() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\");\n  }\n",
        "begin_line": 897,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 898,col 5)-(line 900,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd7()",
        "snippet": "  public void testAdd7() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var b = 'b';\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 903,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 909,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd8()",
        "snippet": "  public void testAdd8() throws Exception {\n    testTypes(\"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {number} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 912,
        "end_line": 919,
        "comment": "",
        "child_ranges": [
            "(line 913,col 5)-(line 918,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd9()",
        "snippet": "  public void testAdd9() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {string} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 921,
        "end_line": 928,
        "comment": "",
        "child_ranges": [
            "(line 922,col 5)-(line 927,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd10()",
        "snippet": "  public void testAdd10() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {string} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 930,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 932,col 5)-(line 935,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd11()",
        "snippet": "  public void testAdd11() throws Exception {\n    // d.e.f will have unknown type.\n    testTypes(\n        suppressMissingProperty(\"e\", \"f\") +\n        \"/** @type {number} */ var a = 5;\" +\n        \"/** @type {number} */ var c = a + d.e.f;\");\n  }\n",
        "begin_line": 938,
        "end_line": 944,
        "comment": "",
        "child_ranges": [
            "(line 940,col 5)-(line 943,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd12()",
        "snippet": "  public void testAdd12() throws Exception {\n    testTypes(\"/** @return {(number,string)} */ function a() { return 5; }\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a() + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 946,
        "end_line": 953,
        "comment": "",
        "child_ranges": [
            "(line 947,col 5)-(line 952,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd13()",
        "snippet": "  public void testAdd13() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 955,
        "end_line": 962,
        "comment": "",
        "child_ranges": [
            "(line 956,col 5)-(line 961,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd14()",
        "snippet": "  public void testAdd14() throws Exception {\n    testTypes(\"/** @type {(null,string)} */ var a = null;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 964,
        "end_line": 971,
        "comment": "",
        "child_ranges": [
            "(line 965,col 5)-(line 970,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd15()",
        "snippet": "  public void testAdd15() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @return {(number,string)} */ function b() { return 5; }\" +\n        \"/** @type {boolean} */ var c = a + b();\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 973,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 974,col 5)-(line 979,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd16()",
        "snippet": "  public void testAdd16() throws Exception {\n    testTypes(\"/** @type {(undefined,string)} */ var a = undefined;\" +\n        \"/** @type {number} */ var b = 5;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 982,
        "end_line": 989,
        "comment": "",
        "child_ranges": [
            "(line 983,col 5)-(line 988,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd17()",
        "snippet": "  public void testAdd17() throws Exception {\n    testTypes(\"/** @type {number} */ var a = 5;\" +\n        \"/** @type {(undefined,string)} */ var b = undefined;\" +\n        \"/** @type {boolean} */ var c = a + b;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 991,
        "end_line": 998,
        "comment": "",
        "child_ranges": [
            "(line 992,col 5)-(line 997,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd18()",
        "snippet": "  public void testAdd18() throws Exception {\n    testTypes(\"function f() {};\" +\n        \"/** @type {string} */ var a = 'a';\" +\n        \"/** @type {number} */ var c = a + f();\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1000,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1001,col 5)-(line 1006,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd19()",
        "snippet": "  public void testAdd19() throws Exception {\n    testTypes(\"/** @param {number} opt_x\\n@param {number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1013,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1012,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd20()",
        "snippet": "  public void testAdd20() throws Exception {\n    testTypes(\"/** @param {!Number} opt_x\\n@param {!Number} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1016,col 5)-(line 1018,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAdd21()",
        "snippet": "  public void testAdd21() throws Exception {\n    testTypes(\"/** @param {Number|Boolean} opt_x\\n\" +\n        \"@param {number|boolean} opt_y\\n\" +\n        \"@return {number} */ function f(opt_x, opt_y) {\" +\n        \"return opt_x + opt_y;}\");\n  }\n",
        "begin_line": 1021,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1025,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison1()",
        "snippet": "  public void testNumericComparison1() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1029,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison2()",
        "snippet": "  public void testNumericComparison2() throws Exception {\n    testTypes(\"/**@param {!Object} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : Object\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1032,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1036,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison3()",
        "snippet": "  public void testNumericComparison3() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1041,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 5)-(line 1040,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison4()",
        "snippet": "  public void testNumericComparison4() throws Exception {\n    testTypes(\"/**@param {(number,undefined)} a*/ \" +\n              \"function f(a) {return a < 3;}\");\n  }\n",
        "begin_line": 1043,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1044,col 5)-(line 1045,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison5()",
        "snippet": "  public void testNumericComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ function f(a) {return a < 3;}\",\n        \"left side of numeric comparison\\n\" +\n        \"found   : *\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1052,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumericComparison6()",
        "snippet": "  public void testNumericComparison6() throws Exception {\n    testTypes(\"/**@return void*/ function foo() { if (3 >= foo()) return; }\",\n        \"right side of numeric comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1055,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1059,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison1()",
        "snippet": "  public void testStringComparison1() throws Exception {\n    testTypes(\"/**@param {string} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison2()",
        "snippet": "  public void testStringComparison2() throws Exception {\n    testTypes(\"/**@param {Object} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1066,
        "end_line": 1068,
        "comment": "",
        "child_ranges": [
            "(line 1067,col 5)-(line 1067,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison3()",
        "snippet": "  public void testStringComparison3() throws Exception {\n    testTypes(\"/**@param {number} a*/ function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "",
        "child_ranges": [
            "(line 1071,col 5)-(line 1071,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison4()",
        "snippet": "  public void testStringComparison4() throws Exception {\n    testTypes(\"/**@param {string|undefined} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1074,
        "end_line": 1077,
        "comment": "",
        "child_ranges": [
            "(line 1075,col 5)-(line 1076,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison5()",
        "snippet": "  public void testStringComparison5() throws Exception {\n    testTypes(\"/**@param {*} a*/ \" +\n                  \"function f(a) {return a < 'x';}\");\n  }\n",
        "begin_line": 1079,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1080,col 5)-(line 1081,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringComparison6()",
        "snippet": "  public void testStringComparison6() throws Exception {\n    testTypes(\"/**@return void*/ function foo() { if ('a' >= foo()) return; }\",\n        \"right side of comparison\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1089,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1088,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison1()",
        "snippet": "  public void testValueOfComparison1() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {!O} b*/ function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1091,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1092,col 5)-(line 1094,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison2()",
        "snippet": "  public void testValueOfComparison2() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.valueOf = function() { return 1; };\" +\n        \"/**@param {!O} a\\n@param {number} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1097,
        "end_line": 1102,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1101,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueOfComparison3()",
        "snippet": "  public void testValueOfComparison3() throws Exception {\n    testTypes(\"/** @constructor */function O() {};\" +\n        \"/**@override*/O.prototype.toString = function() { return 'o'; };\" +\n        \"/**@param {!O} a\\n@param {string} b*/\" +\n        \"function f(a,b) { return a < b; }\");\n  }\n",
        "begin_line": 1104,
        "end_line": 1109,
        "comment": "",
        "child_ranges": [
            "(line 1105,col 5)-(line 1108,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
        "snippet": "  public void testGenericRelationalExpression() throws Exception {\n    testTypes(\"/**@param {*} a\\n@param {*} b*/ \" +\n                  \"function f(a,b) {return a < b;}\");\n  }\n",
        "begin_line": 1111,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1112,col 5)-(line 1113,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof1()",
        "snippet": "  public void testInstanceof1() throws Exception {\n    testTypes(\"function foo(){\" +\n        \"if (bar instanceof 3)return;}\",\n        \"instanceof requires an object\\n\" +\n        \"found   : number\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 1116,
        "end_line": 1122,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 5)-(line 1121,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof2()",
        "snippet": "  public void testInstanceof2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){\" +\n        \"if (foo() instanceof Object)return;}\",\n        \"deterministic instanceof yields false\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: NoObject\");\n  }\n",
        "begin_line": 1124,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1125,col 5)-(line 1129,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof3()",
        "snippet": "  public void testInstanceof3() throws Exception {\n    testTypes(\"/**@return {*} */function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1132,
        "end_line": 1135,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 5)-(line 1134,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof4()",
        "snippet": "  public void testInstanceof4() throws Exception {\n    testTypes(\"/**@return {(Object|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1137,
        "end_line": 1140,
        "comment": "",
        "child_ranges": [
            "(line 1138,col 5)-(line 1139,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof5()",
        "snippet": "  public void testInstanceof5() throws Exception {\n    // No warning for unknown types.\n    testTypes(\"/** @return {?} */ function foo(){\" +\n        \"if (foo() instanceof Object)return;}\");\n  }\n",
        "begin_line": 1142,
        "end_line": 1146,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1145,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceof6()",
        "snippet": "  public void testInstanceof6() throws Exception {\n    testTypes(\"/**@return {(Array|number)} */function foo(){\" +\n        \"if (foo() instanceof Object)return 3;}\");\n  }\n",
        "begin_line": 1148,
        "end_line": 1151,
        "comment": "",
        "child_ranges": [
            "(line 1149,col 5)-(line 1150,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
        "snippet": "  public void testInstanceOfReduction3() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {Object} x \\n\" +\n        \" * @param {Function} y \\n\" +\n        \" * @return {boolean} \\n\" +\n        \" */\\n\" +\n        \"var f = function(x, y) {\\n\" +\n        \"  return x instanceof y;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 1153,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1154,col 5)-(line 1162,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping1()",
        "snippet": "  public void testScoping1() throws Exception {\n    testTypes(\n        \"/**@param {string} a*/function foo(a){\" +\n        \"  /**@param {Array|string} a*/function bar(a){\" +\n        \"    if (a instanceof Array)return;\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 1165,
        "end_line": 1172,
        "comment": "",
        "child_ranges": [
            "(line 1166,col 5)-(line 1171,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping2()",
        "snippet": "  public void testScoping2() throws Exception {\n    testTypes(\n        \"/** @type number */ var a;\" +\n        \"function Foo() {\" +\n        \"  /** @type string */ var a;\" +\n        \"}\");\n  }\n",
        "begin_line": 1174,
        "end_line": 1180,
        "comment": "",
        "child_ranges": [
            "(line 1175,col 5)-(line 1179,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping3()",
        "snippet": "  public void testScoping3() throws Exception {\n    testTypes(\"\\n\\n/** @type{Number}*/var b;\\n/** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:3 with type (Number|null)\");\n  }\n",
        "begin_line": 1182,
        "end_line": 1186,
        "comment": "",
        "child_ranges": [
            "(line 1183,col 5)-(line 1185,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping4()",
        "snippet": "  public void testScoping4() throws Exception {\n    testTypes(\"/** @type{Number}*/var b; if (true) /** @type{!String} */var b;\",\n        \"variable b redefined with type String, original \" +\n        \"definition at [testcode]:1 with type (Number|null)\");\n  }\n",
        "begin_line": 1188,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1189,col 5)-(line 1191,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping5()",
        "snippet": "  public void testScoping5() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; var b;\");\n  }\n",
        "begin_line": 1194,
        "end_line": 1198,
        "comment": "",
        "child_ranges": [
            "(line 1197,col 5)-(line 1197,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping6()",
        "snippet": "  public void testScoping6() throws Exception {\n    // multiple definitions are not checked by the type checker but by a\n    // subsequent pass\n    testTypes(\"if (true) var b; if (true) var b;\");\n  }\n",
        "begin_line": 1200,
        "end_line": 1204,
        "comment": "",
        "child_ranges": [
            "(line 1203,col 5)-(line 1203,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping7()",
        "snippet": "  public void testScoping7() throws Exception {\n    testTypes(\"/** @constructor */function A() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of A\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1206,
        "end_line": 1213,
        "comment": "",
        "child_ranges": [
            "(line 1207,col 5)-(line 1212,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping8()",
        "snippet": "  public void testScoping8() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\" +\n        \"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1215,
        "end_line": 1223,
        "comment": "",
        "child_ranges": [
            "(line 1216,col 5)-(line 1222,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping9()",
        "snippet": "  public void testScoping9() throws Exception {\n    testTypes(\"/** @constructor */function B() {\" +\n        \"  /** @type !A */this.a = null;\" +\n        \"}\" +\n        \"/** @constructor */function A() {}\",\n        \"assignment to property a of B\\n\" +\n        \"found   : null\\n\" +\n        \"required: A\");\n  }\n",
        "begin_line": 1225,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1226,col 5)-(line 1232,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping10()",
        "snippet": "  public void testScoping10() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = function b(){};\");\n\n    // a declared, b is not\n    assertTrue(p.scope.isDeclared(\"a\", false));\n    assertFalse(p.scope.isDeclared(\"b\", false));\n\n    // checking that a has the correct assigned type\n    assertEquals(\"function (): undefined\",\n        p.scope.getVar(\"a\").getType().toString());\n  }\n",
        "begin_line": 1235,
        "end_line": 1245,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1236,col 78)",
            "(line 1239,col 5)-(line 1239,col 47)",
            "(line 1240,col 5)-(line 1240,col 48)",
            "(line 1243,col 5)-(line 1244,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScoping11()",
        "snippet": "  public void testScoping11() throws Exception {\n    // named function expressions create a binding in their body only\n    // the return is wrong but the assignment is ok since the type of b is ?\n    testTypes(\n        \"/** @return number */var a = function b(){ return b };\",\n        \"inconsistent return type\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1247,
        "end_line": 1255,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1254,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments1()",
        "snippet": "  public void testFunctionArguments1() throws Exception {\n    testFunctionType(\n        \"/** @param {number} a\\n@return string */\" +\n        \"function f(a) {}\",\n        \"function (number): string\");\n  }\n",
        "begin_line": 1257,
        "end_line": 1262,
        "comment": "",
        "child_ranges": [
            "(line 1258,col 5)-(line 1261,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments2()",
        "snippet": "  public void testFunctionArguments2() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return string */\" +\n        \"function f(opt_a) {}\",\n        \"function ((number|undefined)): string\");\n  }\n",
        "begin_line": 1264,
        "end_line": 1269,
        "comment": "",
        "child_ranges": [
            "(line 1265,col 5)-(line 1268,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments3()",
        "snippet": "  public void testFunctionArguments3() throws Exception {\n    testFunctionType(\n        \"/** @param {number} b\\n@return string */\" +\n        \"function f(a,b) {}\",\n        \"function (?, number): string\");\n  }\n",
        "begin_line": 1271,
        "end_line": 1276,
        "comment": "",
        "child_ranges": [
            "(line 1272,col 5)-(line 1275,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments4()",
        "snippet": "  public void testFunctionArguments4() throws Exception {\n    testFunctionType(\n        \"/** @param {number} opt_a\\n@return string */\" +\n        \"function f(a,opt_a) {}\",\n        \"function (?, (number|undefined)): string\");\n  }\n",
        "begin_line": 1278,
        "end_line": 1283,
        "comment": "",
        "child_ranges": [
            "(line 1279,col 5)-(line 1282,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments5()",
        "snippet": "  public void testFunctionArguments5() throws Exception {\n    testTypes(\n        \"function a(opt_a,a) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1285,
        "end_line": 1289,
        "comment": "",
        "child_ranges": [
            "(line 1286,col 5)-(line 1288,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments6()",
        "snippet": "  public void testFunctionArguments6() throws Exception {\n    testTypes(\n        \"function a(var_args,a) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1291,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1292,col 5)-(line 1294,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments7()",
        "snippet": "  public void testFunctionArguments7() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return string */\" +\n        \"function a(a,opt_a,var_args) {}\");\n  }\n",
        "begin_line": 1297,
        "end_line": 1301,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1300,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments8()",
        "snippet": "  public void testFunctionArguments8() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,var_args,b) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1303,
        "end_line": 1307,
        "comment": "",
        "child_ranges": [
            "(line 1304,col 5)-(line 1306,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments9()",
        "snippet": "  public void testFunctionArguments9() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,var_args,b,c) {}\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1309,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1311,col 5)-(line 1313,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments10()",
        "snippet": "  public void testFunctionArguments10() throws Exception {\n    // testing that only one error is reported\n    testTypes(\n        \"function a(a,opt_a,b,c) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1321,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1320,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments11()",
        "snippet": "  public void testFunctionArguments11() throws Exception {\n    testTypes(\n        \"function a(a,opt_a,b,c,var_args,d) {}\",\n        \"optional arguments must be at the end\");\n  }\n",
        "begin_line": 1323,
        "end_line": 1327,
        "comment": "",
        "child_ranges": [
            "(line 1324,col 5)-(line 1326,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments12()",
        "snippet": "  public void testFunctionArguments12() throws Exception {\n    testTypes(\"/** @param foo {String} */function bar(baz){}\",\n        \"parameter foo does not appear in bar's parameter list\");\n  }\n",
        "begin_line": 1329,
        "end_line": 1332,
        "comment": "",
        "child_ranges": [
            "(line 1330,col 5)-(line 1331,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments13()",
        "snippet": "  public void testFunctionArguments13() throws Exception {\n    // verifying that the argument type have inferable types\n    testTypes(\n        \"/** @return {boolean} */ function u() { return true; }\" +\n        \"/** @param {boolean} b\\n@return boolean */\" +\n        \"function f(b) { if (u()) { b = null; } return b; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (boolean|null)\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 1334,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1336,col 5)-(line 1342,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments14()",
        "snippet": "  public void testFunctionArguments14() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x\\n\" +\n        \" * @param {number} opt_y\\n\" +\n        \" * @param {boolean} var_args\\n\" +\n        \" */ function f(x, opt_y, var_args) {}\" +\n        \"f('3'); f('3', 2); f('3', 2, true); f('3', 2, true, false);\");\n  }\n",
        "begin_line": 1345,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1346,col 5)-(line 1352,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments15()",
        "snippet": "  public void testFunctionArguments15() throws Exception {\n    testTypes(\n        \"/** @param {?function(*)} f */\" +\n        \"function g(f) { f(1, 2); }\",\n        \"Function f: called with 2 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1362,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1361,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionArguments16()",
        "snippet": "  public void testFunctionArguments16() throws Exception {\n    testTypes(\n        \"/** @param {...number} var_args */\" +\n        \"function g(var_args) {} g(1, true);\",\n        \"actual parameter 2 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (number|undefined)\");\n  }\n",
        "begin_line": 1364,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1365,col 5)-(line 1370,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName1()",
        "snippet": "  public void testPrintFunctionName1() throws Exception {\n    // Ensures that the function name is pretty.\n    testTypes(\n        \"var goog = {}; goog.run = function(f) {};\" +\n        \"goog.run();\",\n        \"Function goog.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1373,
        "end_line": 1381,
        "comment": "",
        "child_ranges": [
            "(line 1375,col 5)-(line 1380,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrintFunctionName2()",
        "snippet": "  public void testPrintFunctionName2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.run = function(f) {};\" +\n        \"(new Foo).run();\",\n        \"Function Foo.prototype.run: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s) \" +\n        \"and no more than 1 argument(s).\");\n  }\n",
        "begin_line": 1383,
        "end_line": 1391,
        "comment": "",
        "child_ranges": [
            "(line 1384,col 5)-(line 1390,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference1()",
        "snippet": "  public void testFunctionInference1() throws Exception {\n    testFunctionType(\n        \"function f(a) {}\",\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1393,
        "end_line": 1397,
        "comment": "",
        "child_ranges": [
            "(line 1394,col 5)-(line 1396,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference2()",
        "snippet": "  public void testFunctionInference2() throws Exception {\n    testFunctionType(\n        \"function f(a,b) {}\",\n        \"function (?, ?): undefined\");\n  }\n",
        "begin_line": 1399,
        "end_line": 1403,
        "comment": "",
        "child_ranges": [
            "(line 1400,col 5)-(line 1402,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference3()",
        "snippet": "  public void testFunctionInference3() throws Exception {\n    testFunctionType(\n        \"function f(var_args) {}\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 1405,
        "end_line": 1409,
        "comment": "",
        "child_ranges": [
            "(line 1406,col 5)-(line 1408,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference4()",
        "snippet": "  public void testFunctionInference4() throws Exception {\n    testFunctionType(\n        \"function f(a,b,c,var_args) {}\",\n        \"function (?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1411,
        "end_line": 1415,
        "comment": "",
        "child_ranges": [
            "(line 1412,col 5)-(line 1414,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference5()",
        "snippet": "  public void testFunctionInference5() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return string */function f(a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1417,
        "end_line": 1421,
        "comment": "",
        "child_ranges": [
            "(line 1418,col 5)-(line 1420,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference6()",
        "snippet": "  public void testFunctionInference6() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@return string */function f(opt_a) {}\",\n        \"function (this:Date, ?): string\");\n  }\n",
        "begin_line": 1423,
        "end_line": 1427,
        "comment": "",
        "child_ranges": [
            "(line 1424,col 5)-(line 1426,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference7()",
        "snippet": "  public void testFunctionInference7() throws Exception {\n    testFunctionType(\n        \"/** @this Date */function f(a,b,c,var_args) {}\",\n        \"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n  }\n",
        "begin_line": 1429,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1430,col 5)-(line 1432,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference8()",
        "snippet": "  public void testFunctionInference8() throws Exception {\n    testFunctionType(\n        \"function f() {}\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1435,
        "end_line": 1439,
        "comment": "",
        "child_ranges": [
            "(line 1436,col 5)-(line 1438,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference9()",
        "snippet": "  public void testFunctionInference9() throws Exception {\n    testFunctionType(\n        \"var f = function() {};\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1441,
        "end_line": 1445,
        "comment": "",
        "child_ranges": [
            "(line 1442,col 5)-(line 1444,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference10()",
        "snippet": "  public void testFunctionInference10() throws Exception {\n    testFunctionType(\n        \"/** @this Date\\n@param {boolean} b\\n@return string */\" +\n        \"var f = function(a,b) {};\",\n        \"function (this:Date, ?, boolean): string\");\n  }\n",
        "begin_line": 1447,
        "end_line": 1452,
        "comment": "",
        "child_ranges": [
            "(line 1448,col 5)-(line 1451,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference11()",
        "snippet": "  public void testFunctionInference11() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @return number*/goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 1454,
        "end_line": 1460,
        "comment": "",
        "child_ranges": [
            "(line 1455,col 5)-(line 1459,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference12()",
        "snippet": "  public void testFunctionInference12() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"goog.f = function(){};\",\n        \"goog.f\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1462,
        "end_line": 1468,
        "comment": "",
        "child_ranges": [
            "(line 1463,col 5)-(line 1467,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference13()",
        "snippet": "  public void testFunctionInference13() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @param {!goog.Foo} f */function eatFoo(f){};\",\n        \"eatFoo\",\n        \"function (goog.Foo): undefined\");\n  }\n",
        "begin_line": 1470,
        "end_line": 1477,
        "comment": "",
        "child_ranges": [
            "(line 1471,col 5)-(line 1476,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference14()",
        "snippet": "  public void testFunctionInference14() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function(){};\" +\n        \"/** @return {!goog.Foo} */function eatFoo(){ return new goog.Foo; };\",\n        \"eatFoo\",\n        \"function (): goog.Foo\");\n  }\n",
        "begin_line": 1479,
        "end_line": 1486,
        "comment": "",
        "child_ranges": [
            "(line 1480,col 5)-(line 1485,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference15()",
        "snippet": "  public void testFunctionInference15() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"f.prototype.foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1488,
        "end_line": 1494,
        "comment": "",
        "child_ranges": [
            "(line 1489,col 5)-(line 1493,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference16()",
        "snippet": "  public void testFunctionInference16() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = function(){};\",\n        \"(new f).foo\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 1496,
        "end_line": 1502,
        "comment": "",
        "child_ranges": [
            "(line 1497,col 5)-(line 1501,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference17()",
        "snippet": "  public void testFunctionInference17() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {}\" +\n        \"function abstractMethod() {}\" +\n        \"/** @param {number} x */ f.prototype.foo = abstractMethod;\",\n        \"(new f).foo\",\n        \"function (this:f, number): ?\");\n  }\n",
        "begin_line": 1504,
        "end_line": 1511,
        "comment": "",
        "child_ranges": [
            "(line 1505,col 5)-(line 1510,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference18()",
        "snippet": "  public void testFunctionInference18() throws Exception {\n    testFunctionType(\n        \"var goog = {};\" +\n        \"/** @this {Date} */ goog.eatWithDate;\",\n        \"goog.eatWithDate\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1513,
        "end_line": 1519,
        "comment": "",
        "child_ranges": [
            "(line 1514,col 5)-(line 1518,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference19()",
        "snippet": "  public void testFunctionInference19() throws Exception {\n    testFunctionType(\n        \"/** @param {string} x */ var f;\",\n        \"f\",\n        \"function (string): ?\");\n  }\n",
        "begin_line": 1521,
        "end_line": 1526,
        "comment": "",
        "child_ranges": [
            "(line 1522,col 5)-(line 1525,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionInference20()",
        "snippet": "  public void testFunctionInference20() throws Exception {\n    testFunctionType(\n        \"/** @this {Date} */ var f;\",\n        \"f\",\n        \"function (this:Date): ?\");\n  }\n",
        "begin_line": 1528,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1529,col 5)-(line 1532,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction1()",
        "snippet": "  public void testInnerFunction1() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" /** @type {number} */ var x = 3;\\n\" +\n        \" function g() { x = null; }\" +\n        \" return x;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1535,
        "end_line": 1545,
        "comment": "",
        "child_ranges": [
            "(line 1536,col 5)-(line 1544,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction2()",
        "snippet": "  public void testInnerFunction2() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = null;\\n\" +\n        \" function g() { x = 3; }\" +\n        \" g();\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|number)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1547,
        "end_line": 1559,
        "comment": "",
        "child_ranges": [
            "(line 1548,col 5)-(line 1558,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction3()",
        "snippet": "  public void testInnerFunction3() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = 3;\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1561,
        "end_line": 1574,
        "comment": "",
        "child_ranges": [
            "(line 1562,col 5)-(line 1573,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction4()",
        "snippet": "  public void testInnerFunction4() throws Exception {\n    testTypes(\n        \"var x = null;\" +\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" x = '3';\\n\" +\n        \" /** @return {number} */\\n\" +\n        \" function g() { x = 3; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1576,
        "end_line": 1589,
        "comment": "",
        "child_ranges": [
            "(line 1577,col 5)-(line 1588,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction5()",
        "snippet": "  public void testInnerFunction5() throws Exception {\n    testTypes(\n        \"/** @return {number} */\\n\" +\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" /** @return {number} */\" +\n        \" function g() { var x = 3;x = true; return x; }\" +\n        \" return x;\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1591,
        "end_line": 1603,
        "comment": "",
        "child_ranges": [
            "(line 1592,col 5)-(line 1602,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction6()",
        "snippet": "  public void testInnerFunction6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\", null);\n  }\n",
        "begin_line": 1605,
        "end_line": 1613,
        "comment": "",
        "child_ranges": [
            "(line 1606,col 5)-(line 1612,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction7()",
        "snippet": "  public void testInnerFunction7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" /** @type {number|function()} */\" +\n        \" var x = 0 || function() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1615,
        "end_line": 1627,
        "comment": "",
        "child_ranges": [
            "(line 1616,col 5)-(line 1626,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction8()",
        "snippet": "  public void testInnerFunction8() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"function f() {\" +\n        \" function x() {};\\n\" +\n        \" function g() { if (goog.isFunction(x)) { x(1); } }\" +\n        \" g();\" +\n        \"}\",\n        \"Function x: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1629,
        "end_line": 1640,
        "comment": "",
        "child_ranges": [
            "(line 1630,col 5)-(line 1639,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInnerFunction9()",
        "snippet": "  public void testInnerFunction9() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \" var x = 3;\\n\" +\n        \" function g() { x = null; };\\n\" +\n        \" function h() { return x == null; }\" +\n        \" return h();\" +\n        \"}\");\n  }\n",
        "begin_line": 1642,
        "end_line": 1650,
        "comment": "",
        "child_ranges": [
            "(line 1643,col 5)-(line 1649,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
        "snippet": "  public void testAbstractMethodHandling1() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"abstractFn(1);\");\n  }\n",
        "begin_line": 1652,
        "end_line": 1656,
        "comment": "",
        "child_ranges": [
            "(line 1653,col 5)-(line 1655,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
        "snippet": "  public void testAbstractMethodHandling2() throws Exception {\n    testTypes(\n        \"var abstractFn = function() {};\" +\n        \"abstractFn(1);\",\n        \"Function abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1658,
        "end_line": 1665,
        "comment": "",
        "child_ranges": [
            "(line 1659,col 5)-(line 1664,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
        "snippet": "  public void testAbstractMethodHandling3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\");\n  }\n",
        "begin_line": 1667,
        "end_line": 1672,
        "comment": "",
        "child_ranges": [
            "(line 1668,col 5)-(line 1671,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
        "snippet": "  public void testAbstractMethodHandling4() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"goog.abstractFn = function() {};\" +\n        \"goog.abstractFn(1);\",\n        \"Function goog.abstractFn: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1674,
        "end_line": 1682,
        "comment": "",
        "child_ranges": [
            "(line 1675,col 5)-(line 1681,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
        "snippet": "  public void testAbstractMethodHandling5() throws Exception {\n    testTypes(\n        \"/** @type {Function} */ var abstractFn = function() {};\" +\n        \"/** @param {number} x */ var f = abstractFn;\" +\n        \"f('x');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1684,
        "end_line": 1692,
        "comment": "",
        "child_ranges": [
            "(line 1685,col 5)-(line 1691,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
        "snippet": "  public void testAbstractMethodHandling6() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @type {Function} */ goog.abstractFn = function() {};\" +\n        \"/** @param {number} x */ goog.f = abstractFn;\" +\n        \"goog.f('x');\",\n        \"actual parameter 1 of goog.f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1694,
        "end_line": 1703,
        "comment": "",
        "child_ranges": [
            "(line 1695,col 5)-(line 1702,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference1()",
        "snippet": "  public void testMethodInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @return {number} */ F.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1705,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1706,col 5)-(line 1714,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference2()",
        "snippet": "  public void testMethodInference2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.F = function() {};\" +\n        \"/** @return {number} */ goog.F.prototype.foo = \" +\n        \"    function() { return 3; };\" +\n        \"/** @constructor \\n * @extends {goog.F} */ \" +\n        \"goog.G = function() {};\" +\n        \"/** @override */ goog.G.prototype.foo = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1729,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1728,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference3()",
        "snippet": "  public void testMethodInference3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1731,
        "end_line": 1743,
        "comment": "",
        "child_ranges": [
            "(line 1732,col 5)-(line 1742,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference4()",
        "snippet": "  public void testMethodInference4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {boolean} x \\n * @return {number} */ \" +\n        \"F.prototype.foo = function(x) { return 3; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1745,
        "end_line": 1757,
        "comment": "",
        "child_ranges": [
            "(line 1746,col 5)-(line 1756,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference5()",
        "snippet": "  public void testMethodInference5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x \\n * @return {string} */ \" +\n        \"F.prototype.foo = function(x) { return 'x'; };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @type {number} */ G.prototype.num = 3;\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(y) { return this.num + y; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 1759,
        "end_line": 1772,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 5)-(line 1771,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference6()",
        "snippet": "  public void testMethodInference6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"/** @param {number} x */ F.prototype.foo = function(x) { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function() { };\" +\n        \"(new G()).foo(1);\",\n        \"Function G.prototype.foo: called with 1 argument(s). \" +\n        \"Function requires at least 0 argument(s) \" +\n        \"and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1774,
        "end_line": 1785,
        "comment": "",
        "child_ranges": [
            "(line 1775,col 5)-(line 1784,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference7()",
        "snippet": "  public void testMethodInference7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ G.prototype.foo = function(x, y) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 2 argument(s) \" +\n        \"and no more than 2 argument(s).\");\n  }\n",
        "begin_line": 1787,
        "end_line": 1798,
        "comment": "",
        "child_ranges": [
            "(line 1788,col 5)-(line 1797,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference8()",
        "snippet": "  public void testMethodInference8() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, opt_b, var_args) { };\" +\n        \"(new G()).foo();\",\n        \"Function G.prototype.foo: called with 0 argument(s). \" +\n        \"Function requires at least 1 argument(s).\");\n  }\n",
        "begin_line": 1800,
        "end_line": 1811,
        "comment": "",
        "child_ranges": [
            "(line 1801,col 5)-(line 1810,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMethodInference9()",
        "snippet": "  public void testMethodInference9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() {}\" +\n        \"F.prototype.foo = function() { };\" +\n        \"/** @constructor \\n * @extends {F} */ \" +\n        \"function G() {}\" +\n        \"/** @override */ \" +\n        \"G.prototype.foo = function(a, var_args, opt_b) { };\",\n        \"variable length argument must be last\");\n  }\n",
        "begin_line": 1813,
        "end_line": 1822,
        "comment": "",
        "child_ranges": [
            "(line 1814,col 5)-(line 1821,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
        "snippet": "  public void testStaticMethodDeclaration1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function F() { F.foo(true); }\" +\n        \"/** @param {number} x */ F.foo = function(x) {};\",\n        \"actual parameter 1 of F.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1824,
        "end_line": 1831,
        "comment": "",
        "child_ranges": [
            "(line 1825,col 5)-(line 1830,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
        "snippet": "  public void testStaticMethodDeclaration2() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"actual parameter 1 of goog.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 1833,
        "end_line": 1840,
        "comment": "",
        "child_ranges": [
            "(line 1834,col 5)-(line 1839,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
        "snippet": "  public void testStaticMethodDeclaration3() throws Exception {\n    testTypes(\n        \"var goog = goog || {}; function f() { goog.foo(true); }\" +\n        \"goog.foo = function() {};\",\n        \"Function goog.foo: called with 1 argument(s). Function requires \" +\n        \"at least 0 argument(s) and no more than 0 argument(s).\");\n  }\n",
        "begin_line": 1842,
        "end_line": 1848,
        "comment": "",
        "child_ranges": [
            "(line 1843,col 5)-(line 1847,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
        "snippet": "  public void testDuplicateStaticMethodDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (number): undefined, \" +\n        \"original definition at [testcode]:1 with type function (number): undefined\");\n  }\n",
        "begin_line": 1850,
        "end_line": 1857,
        "comment": "",
        "child_ranges": [
            "(line 1851,col 5)-(line 1856,col 86)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
        "snippet": "  public void testDuplicateStaticMethodDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {number} x */ goog.foo = function(x) {};\" +\n        \"/** @param {number} x \\n * @suppress {duplicate} */ \" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1859,
        "end_line": 1865,
        "comment": "",
        "child_ranges": [
            "(line 1860,col 5)-(line 1864,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
        "snippet": "  public void testDuplicateStaticMethodDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1867,
        "end_line": 1872,
        "comment": "",
        "child_ranges": [
            "(line 1868,col 5)-(line 1871,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
        "snippet": "  public void testDuplicateStaticMethodDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Function} */ goog.foo = function(x) {};\" +\n        \"goog.foo = function(x) {};\");\n  }\n",
        "begin_line": 1874,
        "end_line": 1879,
        "comment": "",
        "child_ranges": [
            "(line 1875,col 5)-(line 1878,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
        "snippet": "  public void testDuplicateStaticMethodDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"goog.foo = function(x) {};\" +\n        \"/** @return {undefined} */ goog.foo = function(x) {};\",\n        \"variable goog.foo redefined with type function (?): undefined, \" +\n        \"original definition at [testcode]:1 with type \" +\n        \"function (?): undefined\");\n  }\n",
        "begin_line": 1881,
        "end_line": 1889,
        "comment": "",
        "child_ranges": [
            "(line 1882,col 5)-(line 1888,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
        "snippet": "  public void testDuplicateStaticPropertyDecl1() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1891,
        "end_line": 1897,
        "comment": "",
        "child_ranges": [
            "(line 1892,col 5)-(line 1896,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
        "snippet": "  public void testDuplicateStaticPropertyDecl2() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {Foo} */ goog.foo;\" +\n        \"/** @type {Foo} \\n * @suppress {duplicate} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\");\n  }\n",
        "begin_line": 1899,
        "end_line": 1905,
        "comment": "",
        "child_ranges": [
            "(line 1900,col 5)-(line 1904,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
        "snippet": "  public void testDuplicateStaticPropertyDecl3() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo;\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1907,
        "end_line": 1915,
        "comment": "",
        "child_ranges": [
            "(line 1908,col 5)-(line 1914,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
        "snippet": "  public void testDuplicateStaticPropertyDecl4() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1917,
        "end_line": 1925,
        "comment": "",
        "child_ranges": [
            "(line 1918,col 5)-(line 1924,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
        "snippet": "  public void testDuplicateStaticPropertyDecl5() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {!Foo} */ goog.foo;\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\" +\n        \"/** @constructor */ function Foo() {}\",\n        \"variable goog.foo redefined with type string, \" +\n        \"original definition at [testcode]:1 with type Foo\");\n  }\n",
        "begin_line": 1927,
        "end_line": 1935,
        "comment": "",
        "child_ranges": [
            "(line 1928,col 5)-(line 1934,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
        "snippet": "  public void testDuplicateStaticPropertyDecl6() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @type {string} */ goog.foo = 'y';\" +\n        \"/** @type {string}\\n * @suppress {duplicate} */ goog.foo = 'x';\");\n  }\n",
        "begin_line": 1937,
        "end_line": 1942,
        "comment": "",
        "child_ranges": [
            "(line 1938,col 5)-(line 1941,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
        "snippet": "  public void testDuplicateStaticPropertyDecl7() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @param {string} x */ goog.foo;\" +\n        \"/** @type {function(string)} */ goog.foo;\");\n  }\n",
        "begin_line": 1944,
        "end_line": 1949,
        "comment": "",
        "child_ranges": [
            "(line 1945,col 5)-(line 1948,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
        "snippet": "  public void testDuplicateStaticPropertyDecl8() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\" +\n        \"/** @return {EventCopy} */ goog.foo;\");\n  }\n",
        "begin_line": 1951,
        "end_line": 1957,
        "comment": "",
        "child_ranges": [
            "(line 1952,col 5)-(line 1956,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
        "snippet": "  public void testDuplicateStaticPropertyDecl9() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @return {EventCopy} */ goog.foo;\" +\n        \"/** @constructor */ function EventCopy() {}\");\n  }\n",
        "begin_line": 1959,
        "end_line": 1965,
        "comment": "",
        "child_ranges": [
            "(line 1960,col 5)-(line 1964,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
        "snippet": "  public void testDuplicateLocalVarDecl() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\\n\" +\n        \"function f(x) { /** @type {string} */ var x = ''; }\",\n        \"variable x redefined with type string, \" +\n        \"original definition at [testcode]:2 with type number\");\n  }\n",
        "begin_line": 1967,
        "end_line": 1973,
        "comment": "",
        "child_ranges": [
            "(line 1968,col 5)-(line 1972,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
        "snippet": "  public void testStubFunctionDeclaration1() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @param {number} x \\n * @param {string} y \\n\" +\n        \"  * @return {number} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        \"function (this:f, number, string): number\");\n  }\n",
        "begin_line": 1975,
        "end_line": 1982,
        "comment": "",
        "child_ranges": [
            "(line 1976,col 5)-(line 1981,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
        "snippet": "  public void testStubFunctionDeclaration2() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n        \"f.subclass\",\n        \"function (this:f.subclass): ?\");\n  }\n",
        "begin_line": 1984,
        "end_line": 1990,
        "comment": "",
        "child_ranges": [
            "(line 1985,col 5)-(line 1989,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
        "snippet": "  public void testStubFunctionDeclaration3() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {};\" +\n        \"/** @return {undefined} */ f.foo;\",\n        \"f.foo\",\n        \"function (): undefined\");\n  }\n",
        "begin_line": 1992,
        "end_line": 1998,
        "comment": "",
        "child_ranges": [
            "(line 1993,col 5)-(line 1997,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
        "snippet": "  public void testStubFunctionDeclaration4() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @return {number} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        \"function (this:f): number\");\n  }\n",
        "begin_line": 2000,
        "end_line": 2007,
        "comment": "",
        "child_ranges": [
            "(line 2001,col 5)-(line 2006,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
        "snippet": "  public void testStubFunctionDeclaration5() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() { \" +\n        \"  /** @type {Function} */ this.foo;\" +\n        \"}\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2009,
        "end_line": 2016,
        "comment": "",
        "child_ranges": [
            "(line 2010,col 5)-(line 2015,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
        "snippet": "  public void testStubFunctionDeclaration6() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo;\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2018,
        "end_line": 2024,
        "comment": "",
        "child_ranges": [
            "(line 2019,col 5)-(line 2023,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
        "snippet": "  public void testStubFunctionDeclaration7() throws Exception {\n    testFunctionType(\n        \"/** @constructor */ function f() {} \" +\n        \"/** @type {Function} */ f.prototype.foo = function() {};\",\n        \"(new f).foo\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n  }\n",
        "begin_line": 2026,
        "end_line": 2032,
        "comment": "",
        "child_ranges": [
            "(line 2027,col 5)-(line 2031,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
        "snippet": "  public void testStubFunctionDeclaration8() throws Exception {\n    /** TODO(user): This is not exactly correct yet. The var\n            itself is nullable. */\n    testFunctionType(\n        \"/** @type {Function} */ var f = function() {}; \",\n        \"f\",\n        createNullableType(U2U_CONSTRUCTOR_TYPE).\n          restrictByNotNullOrUndefined().toString());\n  }\n",
        "begin_line": 2034,
        "end_line": 2042,
        "comment": "",
        "child_ranges": [
            "(line 2037,col 5)-(line 2041,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
        "snippet": "  public void testStubFunctionDeclaration9() throws Exception {\n    testFunctionType(\n        \"/** @type {function():number} */ var f; \",\n        \"f\",\n        \"function (): number\");\n  }\n",
        "begin_line": 2044,
        "end_line": 2049,
        "comment": "",
        "child_ranges": [
            "(line 2045,col 5)-(line 2048,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
        "snippet": "  public void testStubFunctionDeclaration10() throws Exception {\n    testFunctionType(\n        \"/** @type {function(number):number} */ var f = function(x) {};\",\n        \"f\",\n        \"function (number): number\");\n  }\n",
        "begin_line": 2051,
        "end_line": 2056,
        "comment": "",
        "child_ranges": [
            "(line 2052,col 5)-(line 2055,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
        "snippet": "  public void testNestedFunctionInference1() throws Exception {\n    String nestedAssignOfFooAndBar =\n        \"/** @constructor */ function f() {};\" +\n        \"f.prototype.foo = f.prototype.bar = function(){};\";\n    testFunctionType(nestedAssignOfFooAndBar, \"(new f).bar\",\n        \"function (this:f): undefined\");\n  }\n",
        "begin_line": 2058,
        "end_line": 2064,
        "comment": "",
        "child_ranges": [
            "(line 2059,col 5)-(line 2061,col 60)",
            "(line 2062,col 5)-(line 2063,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionType)\n      throws Exception {\n    testFunctionType(functionDef, \"f\", functionType);\n  }\n",
        "begin_line": 2070,
        "end_line": 2073,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code \"f\"}.\n   ",
        "child_ranges": [
            "(line 2072,col 5)-(line 2072,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void testFunctionType(String functionDef, String functionName,\n      String functionType) throws Exception {\n    // using the variable initialization check to verify the function's type\n    testTypes(\n        functionDef +\n        \"/** @type number */var a=\" + functionName + \";\",\n        \"initializing variable\\n\" +\n        \"found   : \" + functionType + \"\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2079,
        "end_line": 2088,
        "comment": "\n   * Tests the type of a function definition. The function defined by\n   * {@code functionDef} should be named {@code functionName}.\n   ",
        "child_ranges": [
            "(line 2082,col 5)-(line 2087,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeRedefinition()",
        "snippet": "  public void testTypeRedefinition() throws Exception {\n    testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n        + \"/** @constructor */ a.A = function() {}\",\n        \"variable a.A redefined with type function (this:a.A): undefined, \" +\n        \"original definition at [testcode]:1 with type enum{a.A}\");\n  }\n",
        "begin_line": 2090,
        "end_line": 2095,
        "comment": "",
        "child_ranges": [
            "(line 2091,col 5)-(line 2094,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn1()",
        "snippet": "  public void testIn1() throws Exception {\n    testTypes(\"'foo' in Object\");\n  }\n",
        "begin_line": 2097,
        "end_line": 2099,
        "comment": "",
        "child_ranges": [
            "(line 2098,col 5)-(line 2098,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn2()",
        "snippet": "  public void testIn2() throws Exception {\n    testTypes(\"3 in Object\");\n  }\n",
        "begin_line": 2101,
        "end_line": 2103,
        "comment": "",
        "child_ranges": [
            "(line 2102,col 5)-(line 2102,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn3()",
        "snippet": "  public void testIn3() throws Exception {\n    testTypes(\"undefined in Object\");\n  }\n",
        "begin_line": 2105,
        "end_line": 2107,
        "comment": "",
        "child_ranges": [
            "(line 2106,col 5)-(line 2106,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn4()",
        "snippet": "  public void testIn4() throws Exception {\n    testTypes(\"Date in Object\",\n        \"left side of 'in'\\n\" +\n        \"found   : function (this:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2109,
        "end_line": 2114,
        "comment": "",
        "child_ranges": [
            "(line 2110,col 5)-(line 2113,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn5()",
        "snippet": "  public void testIn5() throws Exception {\n    testTypes(\"'x' in null\",\n        \"'in' requires an object\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2116,
        "end_line": 2121,
        "comment": "",
        "child_ranges": [
            "(line 2117,col 5)-(line 2120,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn6()",
        "snippet": "  public void testIn6() throws Exception {\n    testTypes(\n        \"/** @param {number} x */\" +\n        \"function g(x) {}\" +\n        \"g(1 in {});\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2123,
        "end_line": 2131,
        "comment": "",
        "child_ranges": [
            "(line 2124,col 5)-(line 2130,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIn7()",
        "snippet": "  public void testIn7() throws Exception {\n    // Make sure we do inference in the 'in' expression.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  return g(x.foo) in {};\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2133,
        "end_line": 2149,
        "comment": "",
        "child_ranges": [
            "(line 2135,col 5)-(line 2148,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison2()",
        "snippet": "  public void testComparison2() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type !Date */var b;\" +\n        \"if (a!==b) {}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : number\\n\" +\n        \"right: Date\");\n  }\n",
        "begin_line": 2161,
        "end_line": 2168,
        "comment": "",
        "child_ranges": [
            "(line 2162,col 5)-(line 2167,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison3()",
        "snippet": "  public void testComparison3() throws Exception {\n    // Since null == undefined in JavaScript, this code is reasonable.\n    testTypes(\"/** @type {(Object,undefined)} */var a;\" +\n        \"var b = a == null\");\n  }\n",
        "begin_line": 2170,
        "end_line": 2174,
        "comment": "",
        "child_ranges": [
            "(line 2172,col 5)-(line 2173,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison4()",
        "snippet": "  public void testComparison4() throws Exception {\n    testTypes(\"/** @type {(!Object,undefined)} */var a;\" +\n        \"/** @type {!Object} */var b;\" +\n        \"var c = a == b\");\n  }\n",
        "begin_line": 2176,
        "end_line": 2180,
        "comment": "",
        "child_ranges": [
            "(line 2177,col 5)-(line 2179,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison5()",
        "snippet": "  public void testComparison5() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2182,
        "end_line": 2189,
        "comment": "",
        "child_ranges": [
            "(line 2183,col 5)-(line 2188,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison6()",
        "snippet": "  public void testComparison6() throws Exception {\n    testTypes(\"/** @type null */var a;\" +\n        \"/** @type null */var b;\" +\n        \"a != b\",\n        \"condition always evaluates to false\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2191,
        "end_line": 2198,
        "comment": "",
        "child_ranges": [
            "(line 2192,col 5)-(line 2197,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison7()",
        "snippet": "  public void testComparison7() throws Exception {\n    testTypes(\"var a;\" +\n        \"var b;\" +\n        \"a == b\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: undefined\");\n  }\n",
        "begin_line": 2200,
        "end_line": 2207,
        "comment": "",
        "child_ranges": [
            "(line 2201,col 5)-(line 2206,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison8()",
        "snippet": "  public void testComparison8() throws Exception {\n    testTypes(\"/** @type {Array.<string>} */ var a = [];\" +\n        \"a[0] == null || a[1] == undefined\");\n  }\n",
        "begin_line": 2209,
        "end_line": 2212,
        "comment": "",
        "child_ranges": [
            "(line 2210,col 5)-(line 2211,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison9()",
        "snippet": "  public void testComparison9() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] == null\",\n        \"condition always evaluates to true\\n\" +\n        \"left : undefined\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 2214,
        "end_line": 2220,
        "comment": "",
        "child_ranges": [
            "(line 2215,col 5)-(line 2219,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison10()",
        "snippet": "  public void testComparison10() throws Exception {\n    testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n        \"a[0] === null\");\n  }\n",
        "begin_line": 2222,
        "end_line": 2225,
        "comment": "",
        "child_ranges": [
            "(line 2223,col 5)-(line 2224,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison11()",
        "snippet": "  public void testComparison11() throws Exception {\n    testTypes(\n        \"(function(){}) == 'x'\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: string\");\n  }\n",
        "begin_line": 2227,
        "end_line": 2233,
        "comment": "",
        "child_ranges": [
            "(line 2228,col 5)-(line 2232,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison12()",
        "snippet": "  public void testComparison12() throws Exception {\n    testTypes(\n        \"(function(){}) == 3\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 2235,
        "end_line": 2241,
        "comment": "",
        "child_ranges": [
            "(line 2236,col 5)-(line 2240,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComparison13()",
        "snippet": "  public void testComparison13() throws Exception {\n    testTypes(\n        \"(function(){}) == false\",\n        \"condition always evaluates to false\\n\" +\n        \"left : function (): undefined\\n\" +\n        \"right: boolean\");\n  }\n",
        "begin_line": 2243,
        "end_line": 2249,
        "comment": "",
        "child_ranges": [
            "(line 2244,col 5)-(line 2248,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
        "snippet": "  public void testEnumStaticMethod1() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"Foo.method(true);\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2251,
        "end_line": 2259,
        "comment": "",
        "child_ranges": [
            "(line 2252,col 5)-(line 2258,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
        "snippet": "  public void testEnumStaticMethod2() throws Exception {\n    testTypes(\n        \"/** @enum */ var Foo = {AAA: 1};\" +\n        \"/** @param {number} x */ Foo.method = function(x) {};\" +\n        \"function f() { Foo.method(true); }\",\n        \"actual parameter 1 of Foo.method does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2261,
        "end_line": 2269,
        "comment": "",
        "child_ranges": [
            "(line 2262,col 5)-(line 2268,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum1()",
        "snippet": "  public void testEnum1() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n\" +\n        \"/**@type {a}*/var d;d=a.BB;\");\n  }\n",
        "begin_line": 2271,
        "end_line": 2274,
        "comment": "",
        "child_ranges": [
            "(line 2272,col 5)-(line 2273,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum2()",
        "snippet": "  public void testEnum2() throws Exception {\n    testTypes(\"/**@enum*/var a={b:1}\",\n        \"enum key b must be a syntactic constant\");\n  }\n",
        "begin_line": 2276,
        "end_line": 2279,
        "comment": "",
        "child_ranges": [
            "(line 2277,col 5)-(line 2278,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum3()",
        "snippet": "  public void testEnum3() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2281,
        "end_line": 2284,
        "comment": "",
        "child_ranges": [
            "(line 2282,col 5)-(line 2283,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum4()",
        "snippet": "  public void testEnum4() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2286,
        "end_line": 2291,
        "comment": "",
        "child_ranges": [
            "(line 2287,col 5)-(line 2290,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum5()",
        "snippet": "  public void testEnum5() throws Exception {\n    testTypes(\"/**@enum {String}*/var a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 2293,
        "end_line": 2298,
        "comment": "",
        "child_ranges": [
            "(line 2294,col 5)-(line 2297,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum6()",
        "snippet": "  public void testEnum6() throws Exception {\n    testTypes(\"/**@enum*/var a={BB:1,CC:2};\\n/**@type {!Array}*/var d;d=a.BB;\",\n        \"assignment\\n\" +\n        \"found   : a.<number>\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2300,
        "end_line": 2305,
        "comment": "",
        "child_ranges": [
            "(line 2301,col 5)-(line 2304,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum7()",
        "snippet": "  public void testEnum7() throws Exception {\n    testTypes(\"/** @enum */var a={AA:1,BB:2,CC:3};\" +\n        \"/** @type a */var b=a.D;\",\n        \"element D does not exist on this enum\");\n  }\n",
        "begin_line": 2307,
        "end_line": 2311,
        "comment": "",
        "child_ranges": [
            "(line 2308,col 5)-(line 2310,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum8()",
        "snippet": "  public void testEnum8() throws Exception {\n    testTypes(\"/** @enum */var a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2313,
        "end_line": 2316,
        "comment": "",
        "child_ranges": [
            "(line 2314,col 5)-(line 2315,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum9()",
        "snippet": "  public void testEnum9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @enum */goog.a=8;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 2318,
        "end_line": 2323,
        "comment": "",
        "child_ranges": [
            "(line 2319,col 5)-(line 2322,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum10()",
        "snippet": "  public void testEnum10() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { A : 3 };\");\n  }\n",
        "begin_line": 2325,
        "end_line": 2329,
        "comment": "",
        "child_ranges": [
            "(line 2326,col 5)-(line 2328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum11()",
        "snippet": "  public void testEnum11() throws Exception {\n    testTypes(\n        \"/** @enum {number} */\" +\n        \"goog.K = { 502 : 3 };\");\n  }\n",
        "begin_line": 2331,
        "end_line": 2335,
        "comment": "",
        "child_ranges": [
            "(line 2332,col 5)-(line 2334,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum12()",
        "snippet": "  public void testEnum12() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum */ var b = a;\");\n  }\n",
        "begin_line": 2337,
        "end_line": 2341,
        "comment": "",
        "child_ranges": [
            "(line 2338,col 5)-(line 2340,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum13()",
        "snippet": "  public void testEnum13() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {};\" +\n        \"/** @enum {string} */ var b = a;\",\n        \"incompatible enum element types\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2343,
        "end_line": 2350,
        "comment": "",
        "child_ranges": [
            "(line 2344,col 5)-(line 2349,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum14()",
        "snippet": "  public void testEnum14() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.FOO;\");\n  }\n",
        "begin_line": 2352,
        "end_line": 2357,
        "comment": "",
        "child_ranges": [
            "(line 2353,col 5)-(line 2356,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum15()",
        "snippet": "  public void testEnum15() throws Exception {\n    testTypes(\n        \"/** @enum {number} */ var a = {FOO:5};\" +\n        \"/** @enum */ var b = a;\" +\n        \"var c = b.BAR;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2359,
        "end_line": 2365,
        "comment": "",
        "child_ranges": [
            "(line 2360,col 5)-(line 2364,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum16()",
        "snippet": "  public void testEnum16() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:1,BB:2}\",\n        \"enum element BB already defined\", true);\n  }\n",
        "begin_line": 2367,
        "end_line": 2371,
        "comment": "",
        "child_ranges": [
            "(line 2368,col 5)-(line 2370,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum17()",
        "snippet": "  public void testEnum17() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/**@enum*/goog.a={BB:'string'}\",\n        \"element type must match enum's type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2373,
        "end_line": 2379,
        "comment": "",
        "child_ranges": [
            "(line 2374,col 5)-(line 2378,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum18()",
        "snippet": "  public void testEnum18() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {!E} x\\n@return {number} */\\n\" +\n        \"var f = function(x) { return x; };\");\n  }\n",
        "begin_line": 2381,
        "end_line": 2385,
        "comment": "",
        "child_ranges": [
            "(line 2382,col 5)-(line 2384,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum19()",
        "snippet": "  public void testEnum19() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {number} x\\n@return {!E} */\\n\" +\n        \"var f = function(x) { return x; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: E.<number>\");\n  }\n",
        "begin_line": 2387,
        "end_line": 2394,
        "comment": "",
        "child_ranges": [
            "(line 2388,col 5)-(line 2393,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum20()",
        "snippet": "  public void testEnum20() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2}; var x = []; x[E.A] = 0;\");\n  }\n",
        "begin_line": 2396,
        "end_line": 2398,
        "comment": "",
        "child_ranges": [
            "(line 2397,col 5)-(line 2397,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum21()",
        "snippet": "  public void testEnum21() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @enum {string} */ var E = {A : 'a', B : 'b'};\\n\" +\n        \"/** @param {!E} x\\n@return {!E} */ function f(x) { return x; }\");\n    Node nodeX = n.getLastChild().getLastChild().getLastChild().getLastChild();\n    JSType typeE = nodeX.getJSType();\n    assertFalse(typeE.isObject());\n    assertFalse(typeE.isNullable());\n  }\n",
        "begin_line": 2400,
        "end_line": 2408,
        "comment": "",
        "child_ranges": [
            "(line 2401,col 5)-(line 2403,col 74)",
            "(line 2404,col 5)-(line 2404,col 79)",
            "(line 2405,col 5)-(line 2405,col 37)",
            "(line 2406,col 5)-(line 2406,col 34)",
            "(line 2407,col 5)-(line 2407,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum22()",
        "snippet": "  public void testEnum22() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2410,
        "end_line": 2413,
        "comment": "",
        "child_ranges": [
            "(line 2411,col 5)-(line 2412,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum23()",
        "snippet": "  public void testEnum23() throws Exception {\n    testTypes(\"/**@enum*/ var E = {A: 1, B: 2};\" +\n        \"/** @param {E} x \\n* @return {string} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2415,
        "end_line": 2421,
        "comment": "",
        "child_ranges": [
            "(line 2416,col 5)-(line 2420,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum24()",
        "snippet": "  public void testEnum24() throws Exception {\n    testTypes(\"/**@enum {Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\",\n        \"inconsistent return type\\n\" +\n        \"found   : E.<(Object|null)>\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 2423,
        "end_line": 2429,
        "comment": "",
        "child_ranges": [
            "(line 2424,col 5)-(line 2428,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum25()",
        "snippet": "  public void testEnum25() throws Exception {\n    testTypes(\"/**@enum {!Object} */ var E = {A: {}};\" +\n        \"/** @param {E} x \\n* @return {!Object} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2431,
        "end_line": 2434,
        "comment": "",
        "child_ranges": [
            "(line 2432,col 5)-(line 2433,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum26()",
        "snippet": "  public void testEnum26() throws Exception {\n    testTypes(\"var a = {}; /**@enum*/ a.B = {A: 1, B: 2};\" +\n        \"/** @param {a.B} x \\n* @return {number} */ function f(x) {return x}\");\n  }\n",
        "begin_line": 2436,
        "end_line": 2439,
        "comment": "",
        "child_ranges": [
            "(line 2437,col 5)-(line 2438,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum27()",
        "snippet": "  public void testEnum27() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A == x; }\");\n  }\n",
        "begin_line": 2441,
        "end_line": 2445,
        "comment": "",
        "child_ranges": [
            "(line 2443,col 5)-(line 2444,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum28()",
        "snippet": "  public void testEnum28() throws Exception {\n    // x is unknown\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"function f(x) { return A.B == x; }\");\n  }\n",
        "begin_line": 2447,
        "end_line": 2451,
        "comment": "",
        "child_ranges": [
            "(line 2449,col 5)-(line 2450,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum29()",
        "snippet": "  public void testEnum29() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2453,
        "end_line": 2459,
        "comment": "",
        "child_ranges": [
            "(line 2454,col 5)-(line 2458,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum30()",
        "snippet": "  public void testEnum30() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {number} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2461,
        "end_line": 2464,
        "comment": "",
        "child_ranges": [
            "(line 2462,col 5)-(line 2463,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum31()",
        "snippet": "  public void testEnum31() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : enum{A}\\n\" +\n        \"required: A.<number>\");\n  }\n",
        "begin_line": 2466,
        "end_line": 2472,
        "comment": "",
        "child_ranges": [
            "(line 2467,col 5)-(line 2471,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum32()",
        "snippet": "  public void testEnum32() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @return {A} */ function f() { return A.B; }\");\n  }\n",
        "begin_line": 2474,
        "end_line": 2477,
        "comment": "",
        "child_ranges": [
            "(line 2475,col 5)-(line 2476,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum34()",
        "snippet": "  public void testEnum34() throws Exception {\n    testTypes(\"/** @enum */ var A = {B: 1, C: 2}; \" +\n        \"/** @param {number} x */ function f(x) { return x == A.B; }\");\n  }\n",
        "begin_line": 2479,
        "end_line": 2482,
        "comment": "",
        "child_ranges": [
            "(line 2480,col 5)-(line 2481,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum35()",
        "snippet": "  public void testEnum35() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {a.b} */ function f() { return a.b.C; }\");\n  }\n",
        "begin_line": 2484,
        "end_line": 2487,
        "comment": "",
        "child_ranges": [
            "(line 2485,col 5)-(line 2486,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum36()",
        "snippet": "  public void testEnum36() throws Exception {\n    testTypes(\"var a = a || {}; /** @enum */ a.b = {C: 1, D: 2};\" +\n              \"/** @return {!a.b} */ function f() { return 1; }\",\n              \"inconsistent return type\\n\" +\n              \"found   : number\\n\" +\n              \"required: a.b.<number>\");\n  }\n",
        "begin_line": 2489,
        "end_line": 2495,
        "comment": "",
        "child_ranges": [
            "(line 2490,col 5)-(line 2494,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum37()",
        "snippet": "  public void testEnum37() throws Exception {\n    testTypes(\n        \"var goog = goog || {};\" +\n        \"/** @enum {number} */ goog.a = {};\" +\n        \"/** @enum */ var b = goog.a;\");\n  }\n",
        "begin_line": 2497,
        "end_line": 2502,
        "comment": "",
        "child_ranges": [
            "(line 2498,col 5)-(line 2501,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum38()",
        "snippet": "  public void testEnum38() throws Exception {\n    testTypes(\n        \"/** @enum {MyEnum} */ var MyEnum = {};\" +\n        \"/** @param {MyEnum} x */ function f(x) {}\",\n        \"Parse error. Cycle detected in inheritance chain \" +\n        \"of type MyEnum\");\n  }\n",
        "begin_line": 2504,
        "end_line": 2510,
        "comment": "",
        "child_ranges": [
            "(line 2505,col 5)-(line 2509,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum39()",
        "snippet": "  public void testEnum39() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {MyEnum} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2512,
        "end_line": 2520,
        "comment": "",
        "child_ranges": [
            "(line 2513,col 5)-(line 2519,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testEnum40()",
        "snippet": "  public void testEnum40() throws Exception {\n    testTypes(\n        \"/** @enum {Number} */ var MyEnum = {FOO: new Number(1)};\" +\n        \"/** @param {number} x \\n * @return {number} */\" +\n        \"function f(x) { return x == MyEnum.FOO && MyEnum.FOO == x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2522,
        "end_line": 2530,
        "comment": "",
        "child_ranges": [
            "(line 2523,col 5)-(line 2529,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum1()",
        "snippet": "  public void testAliasedEnum1() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2532,
        "end_line": 2537,
        "comment": "",
        "child_ranges": [
            "(line 2533,col 5)-(line 2536,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum2()",
        "snippet": "  public void testAliasedEnum2() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(MyEnum.FOO);\");\n  }\n",
        "begin_line": 2539,
        "end_line": 2544,
        "comment": "",
        "child_ranges": [
            "(line 2540,col 5)-(line 2543,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum3()",
        "snippet": "  public void testAliasedEnum3() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {MyEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2546,
        "end_line": 2551,
        "comment": "",
        "child_ranges": [
            "(line 2547,col 5)-(line 2550,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum4()",
        "snippet": "  public void testAliasedEnum4() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {YourEnum} x */ function f(x) {} f(YourEnum.FOO);\");\n  }\n",
        "begin_line": 2553,
        "end_line": 2558,
        "comment": "",
        "child_ranges": [
            "(line 2554,col 5)-(line 2557,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAliasedEnum5()",
        "snippet": "  public void testAliasedEnum5() throws Exception {\n    testTypes(\n        \"/** @enum */ var YourEnum = {FOO: 3};\" +\n        \"/** @enum */ var MyEnum = YourEnum;\" +\n        \"/** @param {string} x */ function f(x) {} f(MyEnum.FOO);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : YourEnum.<number>\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2560,
        "end_line": 2568,
        "comment": "",
        "child_ranges": [
            "(line 2561,col 5)-(line 2567,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
        "snippet": "  public void testBackwardsEnumUse1() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\");\n  }\n",
        "begin_line": 2570,
        "end_line": 2574,
        "comment": "",
        "child_ranges": [
            "(line 2571,col 5)-(line 2573,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
        "snippet": "  public void testBackwardsEnumUse2() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var MyEnum = {FOO: 'x'};\",\n        \"inconsistent return type\\n\" +\n        \"found   : MyEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2576,
        "end_line": 2583,
        "comment": "",
        "child_ranges": [
            "(line 2577,col 5)-(line 2582,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
        "snippet": "  public void testBackwardsEnumUse3() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\");\n  }\n",
        "begin_line": 2585,
        "end_line": 2590,
        "comment": "",
        "child_ranges": [
            "(line 2586,col 5)-(line 2589,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
        "snippet": "  public void testBackwardsEnumUse4() throws Exception {\n    testTypes(\n        \"/** @return {number} */ function f() { return MyEnum.FOO; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"inconsistent return type\\n\" +\n        \"found   : YourEnum.<string>\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2592,
        "end_line": 2600,
        "comment": "",
        "child_ranges": [
            "(line 2593,col 5)-(line 2599,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
        "snippet": "  public void testBackwardsEnumUse5() throws Exception {\n    testTypes(\n        \"/** @return {string} */ function f() { return MyEnum.BAR; }\" +\n        \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n        \"/** @enum {string} */ var MyEnum = YourEnum;\",\n        \"element BAR does not exist on this enum\");\n  }\n",
        "begin_line": 2602,
        "end_line": 2608,
        "comment": "",
        "child_ranges": [
            "(line 2603,col 5)-(line 2607,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse1()",
        "snippet": "  public void testBackwardsTypedefUse1() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: string\");\n  }\n",
        "begin_line": 2610,
        "end_line": 2616,
        "comment": "",
        "child_ranges": [
            "(line 2611,col 5)-(line 2615,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
        "snippet": "  public void testBackwardsTypedefUse2() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n  }\n",
        "begin_line": 2618,
        "end_line": 2622,
        "comment": "",
        "child_ranges": [
            "(line 2619,col 5)-(line 2621,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse3()",
        "snippet": "  public void testBackwardsTypedefUse3() throws Exception {\n    testTypes(\n        \"/** @this {MyTypedef} */ function f() {}\" +\n        \"/** @typedef {(Date|string)} */ var MyTypedef;\",\n        \"@this type of a function must be an object\\n\" +\n        \"Actual type: (Date|null|string)\");\n  }\n",
        "begin_line": 2624,
        "end_line": 2630,
        "comment": "",
        "child_ranges": [
            "(line 2625,col 5)-(line 2629,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
        "snippet": "  public void testBackwardsTypedefUse4() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @typedef {string} */ var MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2632,
        "end_line": 2639,
        "comment": "",
        "child_ranges": [
            "(line 2633,col 5)-(line 2638,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse5()",
        "snippet": "  public void testBackwardsTypedefUse5() throws Exception {\n    testTypes(\n        \"/** @return {MyTypedef} */ function f() { return null; }\" +\n        \"/** @type {string} */ var MyTypedef = goog.typedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2641,
        "end_line": 2648,
        "comment": "",
        "child_ranges": [
            "(line 2642,col 5)-(line 2647,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
        "snippet": "  public void testBackwardsTypedefUse6() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {string} */ goog.MyTypedef;\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2650,
        "end_line": 2658,
        "comment": "",
        "child_ranges": [
            "(line 2651,col 5)-(line 2657,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
        "snippet": "  public void testBackwardsTypedefUse7() throws Exception {\n    testTypes(\n        \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {Object} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 2660,
        "end_line": 2665,
        "comment": "",
        "child_ranges": [
            "(line 2661,col 5)-(line 2664,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
        "snippet": "  public void testBackwardsTypedefUse8() throws Exception {\n    // Tehnically, this isn't quite right, because the JS runtime\n    // will coerce null -> the global object. But we'll punt on that for now.\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n  }\n",
        "begin_line": 2667,
        "end_line": 2675,
        "comment": "",
        "child_ranges": [
            "(line 2670,col 5)-(line 2674,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
        "snippet": "  public void testBackwardsTypedefUse9() throws Exception {\n    testTypes(\n        \"/** @param {!Array} x */ function g(x) {}\" +\n        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n        \"var goog = {};\" +\n        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: Array\");\n  }\n",
        "begin_line": 2677,
        "end_line": 2686,
        "comment": "",
        "child_ranges": [
            "(line 2678,col 5)-(line 2685,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
        "snippet": "  public void testBackwardsConstructor1() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = function(x) {};\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2688,
        "end_line": 2696,
        "comment": "",
        "child_ranges": [
            "(line 2689,col 5)-(line 2695,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
        "snippet": "  public void testBackwardsConstructor2() throws Exception {\n    testTypes(\n        \"function f() { (new Foo(true)); }\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var YourFoo = function(x) {};\" +\n        \"/** \\n * @constructor \\n * @param {number} x */\" +\n        \"var Foo = YourFoo;\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2698,
        "end_line": 2708,
        "comment": "",
        "child_ranges": [
            "(line 2699,col 5)-(line 2707,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
        "snippet": "  public void testMinimalConstructorAnnotation() throws Exception {\n    testTypes(\"/** @constructor */function Foo(){}\");\n  }\n",
        "begin_line": 2710,
        "end_line": 2712,
        "comment": "",
        "child_ranges": [
            "(line 2711,col 5)-(line 2711,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends1()",
        "snippet": "  public void testGoodExtends1() throws Exception {\n    // A minimal @extends example\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2714,
        "end_line": 2718,
        "comment": "",
        "child_ranges": [
            "(line 2716,col 5)-(line 2717,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends2()",
        "snippet": "  public void testGoodExtends2() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends base */function derived() {}\\n\" +\n        \"/** @constructor */function base() {}\\n\");\n  }\n",
        "begin_line": 2720,
        "end_line": 2723,
        "comment": "",
        "child_ranges": [
            "(line 2721,col 5)-(line 2722,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends3()",
        "snippet": "  public void testGoodExtends3() throws Exception {\n    testTypes(\"/** @constructor\\n * @extends {Object} */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\");\n  }\n",
        "begin_line": 2725,
        "end_line": 2728,
        "comment": "",
        "child_ranges": [
            "(line 2726,col 5)-(line 2727,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends4()",
        "snippet": "  public void testGoodExtends4() throws Exception {\n    // Ensure that @extends actually sets the base type of a constructor\n    // correctly. Because this isn't part of the human-readable Function\n    // definition, we need to crawl the prototype chain (eww).\n    Node n = parseAndTypeCheck(\n        \"var goog = {};\\n\" +\n        \"/** @constructor */goog.Base = function(){};\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {goog.Base} */goog.Derived = function(){};\\n\");\n    Node subTypeName = n.getLastChild().getLastChild().getFirstChild();\n    assertEquals(\"goog.Derived\", subTypeName.getQualifiedName());\n\n    FunctionType subCtorType =\n        (FunctionType) subTypeName.getNext().getJSType();\n    assertEquals(\"goog.Derived\", subCtorType.getInstanceType().toString());\n\n    JSType superType = subCtorType.getPrototype().getImplicitPrototype();\n    assertEquals(\"goog.Base\", superType.toString());\n  }\n",
        "begin_line": 2730,
        "end_line": 2748,
        "comment": "",
        "child_ranges": [
            "(line 2734,col 5)-(line 2738,col 69)",
            "(line 2739,col 5)-(line 2739,col 71)",
            "(line 2740,col 5)-(line 2740,col 65)",
            "(line 2742,col 5)-(line 2743,col 57)",
            "(line 2744,col 5)-(line 2744,col 75)",
            "(line 2746,col 5)-(line 2746,col 73)",
            "(line 2747,col 5)-(line 2747,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends5()",
        "snippet": "  public void testGoodExtends5() throws Exception {\n    // we allow for the extends annotation to be placed first\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\");\n  }\n",
        "begin_line": 2750,
        "end_line": 2754,
        "comment": "",
        "child_ranges": [
            "(line 2752,col 5)-(line 2753,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends6()",
        "snippet": "  public void testGoodExtends6() throws Exception {\n    testFunctionType(\n        CLOSURE_DEFS +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @return {number} */ \" +\n        \"  base.prototype.foo = function() { return 1; };\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"goog.inherits(derived, base);\",\n        \"derived.superClass_.foo\",\n        \"function (this:base): number\");\n  }\n",
        "begin_line": 2756,
        "end_line": 2766,
        "comment": "",
        "child_ranges": [
            "(line 2757,col 5)-(line 2765,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends7()",
        "snippet": "  public void testGoodExtends7() throws Exception {\n    testFunctionType(\n        \"Function.prototype.inherits = function(x) {};\" +\n        \"/** @constructor */function base() {}\\n\" +\n        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n        \"derived.inherits(base);\",\n        \"(new derived).constructor\",\n        \"function (this:derived): undefined\");\n  }\n",
        "begin_line": 2768,
        "end_line": 2776,
        "comment": "",
        "child_ranges": [
            "(line 2769,col 5)-(line 2775,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends8()",
        "snippet": "  public void testGoodExtends8() throws Exception {\n    testTypes(\"/** @constructor \\n @extends {Base} */ function Sub() {}\" +\n        \"/** @return {number} */ function f() { return (new Sub()).foo; }\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @type {boolean} */ Base.prototype.foo = true;\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2778,
        "end_line": 2786,
        "comment": "",
        "child_ranges": [
            "(line 2779,col 5)-(line 2785,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends9()",
        "snippet": "  public void testGoodExtends9() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @override */ Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 2788,
        "end_line": 2795,
        "comment": "",
        "child_ranges": [
            "(line 2789,col 5)-(line 2794,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends10()",
        "snippet": "  public void testGoodExtends10() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"/** @return {Super} */ function foo() { return new Sub(); }\");\n  }\n",
        "begin_line": 2797,
        "end_line": 2803,
        "comment": "",
        "child_ranges": [
            "(line 2798,col 5)-(line 2802,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends11()",
        "snippet": "  public void testGoodExtends11() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {boolean} x */ Super.prototype.foo = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"Sub.prototype = new Super();\" +\n        \"(new Sub()).foo(0);\",\n        \"actual parameter 1 of Super.prototype.foo \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 2805,
        "end_line": 2816,
        "comment": "",
        "child_ranges": [
            "(line 2806,col 5)-(line 2815,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends12()",
        "snippet": "  public void testGoodExtends12() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Super} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @constructor */ function Super() {}\" +\n        \"/** @param {Super} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\");\n  }\n",
        "begin_line": 2818,
        "end_line": 2825,
        "comment": "",
        "child_ranges": [
            "(line 2819,col 5)-(line 2824,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodExtends13()",
        "snippet": "  public void testGoodExtends13() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {B}  */ function C() {}\" +\n        \"/** @constructor \\n * @extends {D}  */ function E() {}\" +\n        \"/** @constructor \\n * @extends {C}  */ function D() {}\" +\n        \"/** @constructor \\n * @extends {A} */ function B() {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @param {number} x */ function f(x) {} f(new E());\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : E\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 2827,
        "end_line": 2838,
        "comment": "",
        "child_ranges": [
            "(line 2828,col 5)-(line 2837,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends1()",
        "snippet": "  public void testBadExtends1() throws Exception {\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {not_base} */function derived() {}\\n\",\n        \"Parse error. Unknown type not_base\");\n  }\n",
        "begin_line": 2840,
        "end_line": 2844,
        "comment": "",
        "child_ranges": [
            "(line 2841,col 5)-(line 2843,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends2()",
        "snippet": "  public void testBadExtends2() throws Exception {\n    testTypes(\"/** @constructor */function base() {\\n\" +\n        \"/** @type {!Number}*/\\n\" +\n        \"this.baseMember = new Number(4);\\n\" +\n        \"}\\n\" +\n        \"/** @constructor\\n\" +\n        \"  * @extends {base} */function derived() {}\\n\" +\n        \"/** @param {!String} x*/\\n\" +\n        \"function foo(x){ }\\n\" +\n        \"/** @type {!derived}*/var y;\\n\" +\n        \"foo(y.baseMember);\\n\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 2846,
        "end_line": 2860,
        "comment": "",
        "child_ranges": [
            "(line 2847,col 5)-(line 2859,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends3()",
        "snippet": "  public void testBadExtends3() throws Exception {\n    testTypes(\"/** @extends {Object} */function base() {}\",\n        \"@extends used without @constructor or @interface for base\");\n  }\n",
        "begin_line": 2862,
        "end_line": 2865,
        "comment": "",
        "child_ranges": [
            "(line 2863,col 5)-(line 2864,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadExtends4()",
        "snippet": "  public void testBadExtends4() throws Exception {\n    // If there's a subclass of a class with a bad extends,\n    // we only want to warn about the first one.\n    testTypes(\n        \"/** @constructor \\n * @extends {bad} */ function Sub() {}\" +\n        \"/** @constructor \\n * @extends {Sub} */ function Sub2() {}\" +\n        \"/** @param {Sub} x */ function foo(x) {}\" +\n        \"foo(new Sub2());\",\n        \"Parse error. Unknown type bad\");\n  }\n",
        "begin_line": 2867,
        "end_line": 2876,
        "comment": "",
        "child_ranges": [
            "(line 2870,col 5)-(line 2875,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLateExtends()",
        "snippet": "  public void testLateExtends() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.foo = function() {};\\n\" +\n        \"/** @constructor */function Bar() {}\\n\" +\n        \"goog.inherits(Foo, Bar);\\n\",\n        \"Missing @extends tag on type Foo\");\n  }\n",
        "begin_line": 2878,
        "end_line": 2886,
        "comment": "",
        "child_ranges": [
            "(line 2879,col 5)-(line 2885,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatch()",
        "snippet": "  public void testSuperclassMatch() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\");\n  }\n",
        "begin_line": 2888,
        "end_line": 2894,
        "comment": "",
        "child_ranges": [
            "(line 2889,col 5)-(line 2889,col 76)",
            "(line 2890,col 5)-(line 2893,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
        "snippet": "  public void testSuperclassMatchWithMixin() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor */ var Baz = function() {};\\n\" +\n        \"/** @constructor \\n @extends Foo */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.mixin = function(y){};\" +\n        \"Bar.inherits(Foo);\\n\" +\n        \"Bar.mixin(Baz);\\n\");\n  }\n",
        "begin_line": 2896,
        "end_line": 2905,
        "comment": "",
        "child_ranges": [
            "(line 2897,col 5)-(line 2897,col 76)",
            "(line 2898,col 5)-(line 2904,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
        "snippet": "  public void testSuperclassMismatch1() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function() {};\\n\" +\n        \"/** @constructor \\n @extends Object */ var Bar = function() {};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\\n\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2907,
        "end_line": 2914,
        "comment": "",
        "child_ranges": [
            "(line 2908,col 5)-(line 2908,col 76)",
            "(line 2909,col 5)-(line 2913,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
        "snippet": "  public void testSuperclassMismatch2() throws Exception {\n    compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n    testTypes(\"/** @constructor */ var Foo = function(){};\\n\" +\n        \"/** @constructor */ var Bar = function(){};\\n\" +\n        \"Bar.inherits = function(x){};\" +\n        \"Bar.inherits(Foo);\",\n        \"Missing @extends tag on type Bar\");\n  }\n",
        "begin_line": 2916,
        "end_line": 2923,
        "comment": "",
        "child_ranges": [
            "(line 2917,col 5)-(line 2917,col 76)",
            "(line 2918,col 5)-(line 2922,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass1() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\");\n  }\n",
        "begin_line": 2925,
        "end_line": 2932,
        "comment": "",
        "child_ranges": [
            "(line 2926,col 5)-(line 2931,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
        "snippet": "  public void testSuperClassDefinedAfterSubClass2() throws Exception {\n    testTypes(\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function B() {}\" +\n        \"/** @param {A|B} x \\n * @return {B|A} */ \" +\n        \"function foo(x) { return x; }\" +\n        \"/** @constructor */ function Base() {}\");\n  }\n",
        "begin_line": 2934,
        "end_line": 2941,
        "comment": "",
        "child_ranges": [
            "(line 2935,col 5)-(line 2940,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
        "snippet": "  public void testDirectPrototypeAssignment1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"Base.prototype.foo = 3;\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"/** @return {string} */ function foo() { return (new A).foo; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 2943,
        "end_line": 2953,
        "comment": "",
        "child_ranges": [
            "(line 2944,col 5)-(line 2952,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
        "snippet": "  public void testDirectPrototypeAssignment2() throws Exception {\n    // This ensures that we don't attach property 'foo' onto the Base\n    // instance object.\n    testTypes(\n        \"/** @constructor */ function Base() {}\" +\n        \"/** @constructor \\n * @extends {Base} */ function A() {}\" +\n        \"A.prototype = new Base();\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ function foo() { return (new Base).foo; }\");\n  }\n",
        "begin_line": 2955,
        "end_line": 2964,
        "comment": "",
        "child_ranges": [
            "(line 2958,col 5)-(line 2963,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
        "snippet": "  public void testDirectPrototypeAssignment3() throws Exception {\n    // This verifies that the compiler doesn't crash if the user\n    // overwrites the prototype of a global variable in a local scope.\n    testTypes(\n        \"/** @constructor */ var MainWidgetCreator = function() {};\" +\n        \"/** @param {Function} ctor */\" +\n        \"function createMainWidget(ctor) {\" +\n        \"  /** @constructor */ function tempCtor() {};\" +\n        \"  tempCtor.prototype = ctor.prototype;\" +\n        \"  MainWidgetCreator.superClass_ = ctor.prototype;\" +\n        \"  MainWidgetCreator.prototype = new tempCtor();\" +\n        \"}\");\n  }\n",
        "begin_line": 2966,
        "end_line": 2978,
        "comment": "",
        "child_ranges": [
            "(line 2969,col 5)-(line 2977,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements1()",
        "snippet": "  public void testGoodImplements1() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @constructor */function f() {}\");\n  }\n",
        "begin_line": 2980,
        "end_line": 2983,
        "comment": "",
        "child_ranges": [
            "(line 2981,col 5)-(line 2982,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements2()",
        "snippet": "  public void testGoodImplements2() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {Base1}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 2985,
        "end_line": 2992,
        "comment": "",
        "child_ranges": [
            "(line 2986,col 5)-(line 2991,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGoodImplements3()",
        "snippet": "  public void testGoodImplements3() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n * @interface */function f() {}\");\n  }\n",
        "begin_line": 2994,
        "end_line": 2997,
        "comment": "",
        "child_ranges": [
            "(line 2995,col 5)-(line 2996,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements1()",
        "snippet": "  public void testBadImplements1() throws Exception {\n    testTypes(\"/** @interface */function Base1() {}\\n\" +\n        \"/** @interface */function Base2() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {nonExistent}\\n\" +\n        \" * @implements {Base2}\\n\" +\n        \" */ function derived() {}\",\n        \"Parse error. Unknown type nonExistent\");\n  }\n",
        "begin_line": 2999,
        "end_line": 3007,
        "comment": "",
        "child_ranges": [
            "(line 3000,col 5)-(line 3006,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplements2()",
        "snippet": "  public void testBadImplements2() throws Exception {\n    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n        \"/** @implements {Disposable}\\n */function f() {}\",\n        \"@implements used without @constructor or @interface for f\");\n  }\n",
        "begin_line": 3009,
        "end_line": 3013,
        "comment": "",
        "child_ranges": [
            "(line 3010,col 5)-(line 3012,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\\n\" +\n        \"/** @constructor\\n\" +\n        \" * @implements {B}\\n\" +\n        \" */ function derived() {}\");\n  }\n",
        "begin_line": 3015,
        "end_line": 3021,
        "comment": "",
        "child_ranges": [
            "(line 3016,col 5)-(line 3020,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
        "snippet": "  public void testBadInterfaceExtends1() throws Exception {\n    testTypes(\"/** @interface \\n * @extends {nonExistent} */function A() {}\",\n        \"Parse error. Unknown type nonExistent\");\n  }\n",
        "begin_line": 3023,
        "end_line": 3026,
        "comment": "",
        "child_ranges": [
            "(line 3024,col 5)-(line 3025,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
        "snippet": "  public void testBadInterfaceExtends2() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3028,
        "end_line": 3033,
        "comment": "",
        "child_ranges": [
            "(line 3029,col 5)-(line 3032,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
        "snippet": "  public void testBadInterfaceExtends3() throws Exception {\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor \\n * @extends {A} */function B() {}\",\n        \"B cannot extend this type; a constructor can only extend objects \" +\n        \"and an interface can only extend interfaces\");\n  }\n",
        "begin_line": 3035,
        "end_line": 3040,
        "comment": "",
        "child_ranges": [
            "(line 3036,col 5)-(line 3039,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
        "snippet": "  public void testBadInterfaceExtends4() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @interface */function A() {}\\n\" +\n        \"/** @constructor */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3042,
        "end_line": 3049,
        "comment": "",
        "child_ranges": [
            "(line 3046,col 5)-(line 3048,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
        "snippet": "  public void testBadInterfaceExtends5() throws Exception {\n    // TODO(user): This should be detected as an error. Even if we enforce\n    // that A cannot be used in the assignment, we should still detect the\n    // inheritance chain as invalid.\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @interface */function B() {}\\n\" +\n        \"B.prototype = A;\");\n  }\n",
        "begin_line": 3051,
        "end_line": 3058,
        "comment": "",
        "child_ranges": [
            "(line 3055,col 5)-(line 3057,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
        "snippet": "  public void testBadImplementsAConstructor() throws Exception {\n    testTypes(\"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n * @implements {A} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3060,
        "end_line": 3064,
        "comment": "",
        "child_ranges": [
            "(line 3061,col 5)-(line 3063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
        "snippet": "  public void testBadImplementsNonInterfaceType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {Boolean} */function B() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3066,
        "end_line": 3069,
        "comment": "",
        "child_ranges": [
            "(line 3067,col 5)-(line 3068,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
        "snippet": "  public void testBadImplementsNonObjectType() throws Exception {\n    testTypes(\"/** @constructor \\n * @implements {string} */function S() {}\",\n        \"can only implement interfaces\");\n  }\n",
        "begin_line": 3071,
        "end_line": 3074,
        "comment": "",
        "child_ranges": [
            "(line 3072,col 5)-(line 3073,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
        "snippet": "  public void testInterfaceAssignment1() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\");\n  }\n",
        "begin_line": 3076,
        "end_line": 3081,
        "comment": "",
        "child_ranges": [
            "(line 3077,col 5)-(line 3080,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
        "snippet": "  public void testInterfaceAssignment2() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {!I} */var i = t;\",\n        \"initializing variable\\n\" +\n        \"found   : T\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3083,
        "end_line": 3091,
        "comment": "",
        "child_ranges": [
            "(line 3084,col 5)-(line 3090,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
        "snippet": "  public void testInterfaceAssignment3() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I|number} */var i = t;\");\n  }\n",
        "begin_line": 3093,
        "end_line": 3098,
        "comment": "",
        "child_ranges": [
            "(line 3094,col 5)-(line 3097,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
        "snippet": "  public void testInterfaceAssignment4() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1|I2} */var i = t;\");\n  }\n",
        "begin_line": 3100,
        "end_line": 3106,
        "comment": "",
        "child_ranges": [
            "(line 3101,col 5)-(line 3105,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
        "snippet": "  public void testInterfaceAssignment5() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1}\\n@implements {I2}*/\" +\n        \"var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\");\n  }\n",
        "begin_line": 3108,
        "end_line": 3116,
        "comment": "",
        "child_ranges": [
            "(line 3109,col 5)-(line 3115,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
        "snippet": "  public void testInterfaceAssignment6() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I1} */var T = function() {};\\n\" +\n        \"/** @type {!I1} */var i1 = new T();\\n\" +\n        \"/** @type {!I2} */var i2 = i1;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : I1\\n\" +\n        \"required: I2\");\n  }\n",
        "begin_line": 3118,
        "end_line": 3127,
        "comment": "",
        "child_ranges": [
            "(line 3119,col 5)-(line 3126,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
        "snippet": "  public void testInterfaceAssignment7() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface\\n@extends {I1}*/var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2}*/var T = function() {};\\n\" +\n        \"var t = new T();\\n\" +\n        \"/** @type {I1} */var i1 = t;\\n\" +\n        \"/** @type {I2} */var i2 = t;\\n\" +\n        \"i1 = i2;\\n\");\n  }\n",
        "begin_line": 3129,
        "end_line": 3137,
        "comment": "",
        "child_ranges": [
            "(line 3130,col 5)-(line 3136,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
        "snippet": "  public void testInterfaceAssignment8() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @type {I} */var i;\\n\" +\n        \"/** @type {Object} */var o = i;\");\n  }\n",
        "begin_line": 3139,
        "end_line": 3143,
        "comment": "",
        "child_ranges": [
            "(line 3140,col 5)-(line 3142,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
        "snippet": "  public void testInterfaceAssignment9() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @return {I?} */function f() { return null; }\\n\" +\n        \"/** @type {!I} */var i = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I|null)\\n\" +\n        \"required: I\");\n  }\n",
        "begin_line": 3145,
        "end_line": 3152,
        "comment": "",
        "child_ranges": [
            "(line 3146,col 5)-(line 3151,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
        "snippet": "  public void testInterfaceAssignment10() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I2} */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3154,
        "end_line": 3163,
        "comment": "",
        "child_ranges": [
            "(line 3155,col 5)-(line 3162,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
        "snippet": "  public void testInterfaceAssignment11() throws Exception {\n    testTypes(\"/** @interface */var I1 = function() {};\\n\" +\n        \"/** @interface */var I2 = function() {};\\n\" +\n        \"/** @constructor */var T = function() {};\\n\" +\n        \"/** @return {!I1|!I2|!T} */function f() { return new T(); }\\n\" +\n        \"/** @type {!I1} */var i1 = f();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : (I1|I2|T)\\n\" +\n        \"required: I1\");\n  }\n",
        "begin_line": 3165,
        "end_line": 3174,
        "comment": "",
        "child_ranges": [
            "(line 3166,col 5)-(line 3173,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
        "snippet": "  public void testInterfaceAssignment12() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n              \"/** @constructor\\n@implements{I}*/var T1 = function() {};\\n\" +\n              \"/** @constructor\\n@extends {T1}*/var T2 = function() {};\\n\" +\n              \"/** @return {I} */function f() { return new T2(); }\");\n  }\n",
        "begin_line": 3176,
        "end_line": 3181,
        "comment": "",
        "child_ranges": [
            "(line 3177,col 5)-(line 3180,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
        "snippet": "  public void testInterfaceAssignment13() throws Exception {\n    testTypes(\"/** @interface */var I = function() {};\\n\" +\n        \"/** @constructor\\n@implements {I}*/var T = function() {};\\n\" +\n        \"/** @constructor */function Super() {};\\n\" +\n        \"/** @return {I} */Super.prototype.foo = \" +\n        \"function() { return new T(); };\\n\" +\n        \"/** @constructor\\n@extends {Super} */function Sub() {}\\n\" +\n        \"/** @override\\n@return {T} */Sub.prototype.foo = \" +\n        \"function() { return new T(); };\\n\");\n  }\n",
        "begin_line": 3183,
        "end_line": 3192,
        "comment": "",
        "child_ranges": [
            "(line 3184,col 5)-(line 3191,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetprop1()",
        "snippet": "  public void testGetprop1() throws Exception {\n    testTypes(\"/** @return {void}*/function foo(){foo().bar;}\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3194,
        "end_line": 3199,
        "comment": "",
        "child_ranges": [
            "(line 3195,col 5)-(line 3198,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess1()",
        "snippet": "  public void testArrayAccess1() throws Exception {\n    testTypes(\"var a = []; var b = a['hi'];\");\n  }\n",
        "begin_line": 3201,
        "end_line": 3203,
        "comment": "",
        "child_ranges": [
            "(line 3202,col 5)-(line 3202,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess2()",
        "snippet": "  public void testArrayAccess2() throws Exception {\n    testTypes(\"var a = []; var b = a[[1,2]];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3205,
        "end_line": 3210,
        "comment": "",
        "child_ranges": [
            "(line 3206,col 5)-(line 3209,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess3()",
        "snippet": "  public void testArrayAccess3() throws Exception {\n    testTypes(\"var bar = [];\" +\n        \"/** @return {void} */function baz(){};\" +\n        \"var foo = bar[baz()];\",\n        \"array access\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3212,
        "end_line": 3219,
        "comment": "",
        "child_ranges": [
            "(line 3213,col 5)-(line 3218,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess4()",
        "snippet": "  public void testArrayAccess4() throws Exception {\n    testTypes(\"/**@return {!Array}*/function foo(){};var bar = foo()[foo()];\",\n        \"array access\\n\" +\n        \"found   : Array\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3221,
        "end_line": 3226,
        "comment": "",
        "child_ranges": [
            "(line 3222,col 5)-(line 3225,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess6()",
        "snippet": "  public void testArrayAccess6() throws Exception {\n    testTypes(\"var bar = null[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : null\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3228,
        "end_line": 3233,
        "comment": "",
        "child_ranges": [
            "(line 3229,col 5)-(line 3232,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess7()",
        "snippet": "  public void testArrayAccess7() throws Exception {\n    testTypes(\"var bar = void 0; bar[0];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3235,
        "end_line": 3240,
        "comment": "",
        "child_ranges": [
            "(line 3236,col 5)-(line 3239,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testArrayAccess8()",
        "snippet": "  public void testArrayAccess8() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar[0]; bar[1];\",\n        \"only arrays or objects can be accessed\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3242,
        "end_line": 3249,
        "comment": "",
        "child_ranges": [
            "(line 3245,col 5)-(line 3248,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess()",
        "snippet": "  public void testPropAccess() throws Exception {\n    testTypes(\"/** @param {*} x */var f = function(x) {\\n\" +\n        \"var o = String(x);\\n\" +\n        \"if (typeof o['a'] != 'undefined') { return o['a']; }\\n\" +\n        \"return null;\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 3251,
        "end_line": 3257,
        "comment": "",
        "child_ranges": [
            "(line 3252,col 5)-(line 3256,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess2()",
        "snippet": "  public void testPropAccess2() throws Exception {\n    testTypes(\"var bar = void 0; bar.baz;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3259,
        "end_line": 3264,
        "comment": "",
        "child_ranges": [
            "(line 3260,col 5)-(line 3263,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess3()",
        "snippet": "  public void testPropAccess3() throws Exception {\n    // Verifies that we don't emit two warnings, because\n    // the var has been dereferenced after the first one.\n    testTypes(\"var bar = void 0; bar.baz; bar.bax;\",\n        \"undefined has no properties\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 3266,
        "end_line": 3273,
        "comment": "",
        "child_ranges": [
            "(line 3269,col 5)-(line 3272,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropAccess4()",
        "snippet": "  public void testPropAccess4() throws Exception {\n    testTypes(\"/** @param {*} x */ function f(x) { return x['hi']; }\");\n  }\n",
        "begin_line": 3275,
        "end_line": 3277,
        "comment": "",
        "child_ranges": [
            "(line 3276,col 5)-(line 3276,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase1()",
        "snippet": "  public void testSwitchCase1() throws Exception {\n    testTypes(\"/**@type number*/var a;\" +\n        \"/**@type string*/var b;\" +\n        \"switch(a){case b:;}\",\n        \"case expression doesn't match switch\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3279,
        "end_line": 3286,
        "comment": "",
        "child_ranges": [
            "(line 3280,col 5)-(line 3285,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase2()",
        "snippet": "  public void testSwitchCase2() throws Exception {\n    testTypes(\"var a = null; switch (typeof a) { case 'foo': }\");\n  }\n",
        "begin_line": 3288,
        "end_line": 3290,
        "comment": "",
        "child_ranges": [
            "(line 3289,col 5)-(line 3289,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar1()",
        "snippet": "  public void testVar1() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @type {(string,null)} */var a = null\");\n\n    assertEquals(createUnionType(STRING_TYPE, NULL_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3292,
        "end_line": 3298,
        "comment": "",
        "child_ranges": [
            "(line 3293,col 5)-(line 3294,col 79)",
            "(line 3296,col 5)-(line 3297,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar2()",
        "snippet": "  public void testVar2() throws Exception {\n    testTypes(\"/** @type {Function} */ var a = function(){}\");\n  }\n",
        "begin_line": 3300,
        "end_line": 3302,
        "comment": "",
        "child_ranges": [
            "(line 3301,col 5)-(line 3301,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar3()",
        "snippet": "  public void testVar3() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = 3;\");\n\n    assertEquals(NUMBER_TYPE, p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3304,
        "end_line": 3308,
        "comment": "",
        "child_ranges": [
            "(line 3305,col 5)-(line 3305,col 65)",
            "(line 3307,col 5)-(line 3307,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar4()",
        "snippet": "  public void testVar4() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var a = 3; a = 'string';\");\n\n    assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),\n        p.scope.getVar(\"a\").getType());\n  }\n",
        "begin_line": 3310,
        "end_line": 3316,
        "comment": "",
        "child_ranges": [
            "(line 3311,col 5)-(line 3312,col 36)",
            "(line 3314,col 5)-(line 3315,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar5()",
        "snippet": "  public void testVar5() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type string */goog.foo = 'hello';\" +\n        \"/** @type number */var a = goog.foo;\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3318,
        "end_line": 3325,
        "comment": "",
        "child_ranges": [
            "(line 3319,col 5)-(line 3324,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar6()",
        "snippet": "  public void testVar6() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  return function() {\" +\n        \"    /** @type {!Date} */\" +\n        \"    var a = 7;\" +\n        \"  };\" +\n        \"}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3327,
        "end_line": 3338,
        "comment": "",
        "child_ranges": [
            "(line 3328,col 5)-(line 3337,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar7()",
        "snippet": "  public void testVar7() throws Exception {\n    testTypes(\"/** @type number */var a, b;\",\n        \"declaration of multiple variables with shared type information\");\n  }\n",
        "begin_line": 3340,
        "end_line": 3343,
        "comment": "",
        "child_ranges": [
            "(line 3341,col 5)-(line 3342,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar8()",
        "snippet": "  public void testVar8() throws Exception {\n    testTypes(\"var a, b;\");\n  }\n",
        "begin_line": 3345,
        "end_line": 3347,
        "comment": "",
        "child_ranges": [
            "(line 3346,col 5)-(line 3346,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar9()",
        "snippet": "  public void testVar9() throws Exception {\n    testTypes(\"/** @enum */var a;\",\n        \"enum initializer must be an object literal or an enum\");\n  }\n",
        "begin_line": 3349,
        "end_line": 3352,
        "comment": "",
        "child_ranges": [
            "(line 3350,col 5)-(line 3351,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar10()",
        "snippet": "  public void testVar10() throws Exception {\n    testTypes(\"/** @type !Number */var foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3354,
        "end_line": 3359,
        "comment": "",
        "child_ranges": [
            "(line 3355,col 5)-(line 3358,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar11()",
        "snippet": "  public void testVar11() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 3361,
        "end_line": 3366,
        "comment": "",
        "child_ranges": [
            "(line 3362,col 5)-(line 3365,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar12()",
        "snippet": "  public void testVar12() throws Exception {\n    testTypes(\"var /** @type !Date */foo = 'abc', \" +\n        \"/** @type !RegExp */bar = 5;\",\n        new String[] {\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: Date\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: RegExp\"});\n  }\n",
        "begin_line": 3368,
        "end_line": 3378,
        "comment": "",
        "child_ranges": [
            "(line 3369,col 5)-(line 3377,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar13()",
        "snippet": "  public void testVar13() throws Exception {\n    // this caused an NPE\n    testTypes(\"var /** @type number */a,a;\");\n  }\n",
        "begin_line": 3380,
        "end_line": 3383,
        "comment": "",
        "child_ranges": [
            "(line 3382,col 5)-(line 3382,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar14()",
        "snippet": "  public void testVar14() throws Exception {\n    testTypes(\"/** @return {number} */ function f() { var x; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3385,
        "end_line": 3390,
        "comment": "",
        "child_ranges": [
            "(line 3386,col 5)-(line 3389,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testVar15()",
        "snippet": "  public void testVar15() throws Exception {\n    testTypes(\"/** @return {number} */\" +\n        \"function f() { var x = x || {}; return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : {}\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3392,
        "end_line": 3398,
        "comment": "",
        "child_ranges": [
            "(line 3393,col 5)-(line 3397,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign1()",
        "snippet": "  public void testAssign1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3400,
        "end_line": 3406,
        "comment": "",
        "child_ranges": [
            "(line 3401,col 5)-(line 3405,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign2()",
        "snippet": "  public void testAssign2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 'hello';\",\n        \"assignment to property foo of goog\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3408,
        "end_line": 3415,
        "comment": "",
        "child_ranges": [
            "(line 3409,col 5)-(line 3414,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign3()",
        "snippet": "  public void testAssign3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @type number */goog.foo = 3;\" +\n        \"goog.foo = 4;\");\n  }\n",
        "begin_line": 3417,
        "end_line": 3421,
        "comment": "",
        "child_ranges": [
            "(line 3418,col 5)-(line 3420,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssign4()",
        "snippet": "  public void testAssign4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"goog.foo = 3;\" +\n        \"goog.foo = 'hello';\");\n  }\n",
        "begin_line": 3423,
        "end_line": 3427,
        "comment": "",
        "child_ranges": [
            "(line 3424,col 5)-(line 3426,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignInference()",
        "snippet": "  public void testAssignInference() throws Exception {\n    testTypes(\n        \"/**\" +\n        \" * @param {Array} x\" +\n        \" * @return {number}\" +\n        \" */\" +\n        \"function f(x) {\" +\n        \"  var y = null;\" +\n        \"  y = x[0];\" +\n        \"  if (y == null) { return 4; } else { return 6; }\" +\n        \"}\");\n  }\n",
        "begin_line": 3429,
        "end_line": 3440,
        "comment": "",
        "child_ranges": [
            "(line 3430,col 5)-(line 3439,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr1()",
        "snippet": "  public void testOr1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b || undefined;\");\n  }\n",
        "begin_line": 3442,
        "end_line": 3446,
        "comment": "",
        "child_ranges": [
            "(line 3443,col 5)-(line 3445,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr2()",
        "snippet": "  public void testOr2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b || undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3448,
        "end_line": 3455,
        "comment": "",
        "child_ranges": [
            "(line 3449,col 5)-(line 3454,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr3()",
        "snippet": "  public void testOr3() throws Exception {\n    testTypes(\"/** @type {(number, undefined)} */var a;\" +\n        \"/** @type number */var c = a || 3;\");\n  }\n",
        "begin_line": 3457,
        "end_line": 3460,
        "comment": "",
        "child_ranges": [
            "(line 3458,col 5)-(line 3459,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr4()",
        "snippet": "  public void testOr4() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=null || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3467,
        "end_line": 3472,
        "comment": "\n   * Test that type inference continues with the right side,\n   * when no short-circuiting is possible.\n   * See bugid 1205387 for more details.\n   ",
        "child_ranges": [
            "(line 3468,col 6)-(line 3471,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOr5()",
        "snippet": "  public void testOr5() throws Exception {\n     testTypes(\"/**@type {number} */var x;x=undefined || \\\"a\\\";\",\n         \"assignment\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n  }\n",
        "begin_line": 3477,
        "end_line": 3482,
        "comment": "\n   * @see #testOr4()\n   ",
        "child_ranges": [
            "(line 3478,col 6)-(line 3481,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd1()",
        "snippet": "  public void testAnd1() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"a + b && undefined;\");\n  }\n",
        "begin_line": 3484,
        "end_line": 3488,
        "comment": "",
        "child_ranges": [
            "(line 3485,col 5)-(line 3487,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd2()",
        "snippet": "  public void testAnd2() throws Exception {\n    testTypes(\"/** @type number */var a;\" +\n        \"/** @type number */var b;\" +\n        \"/** @type number */var c = a + b && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3490,
        "end_line": 3497,
        "comment": "",
        "child_ranges": [
            "(line 3491,col 5)-(line 3496,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd3()",
        "snippet": "  public void testAnd3() throws Exception {\n    testTypes(\"/** @type {(!Array, undefined)} */var a;\" +\n        \"/** @type number */var c = a && undefined;\",\n        \"initializing variable\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3499,
        "end_line": 3505,
        "comment": "",
        "child_ranges": [
            "(line 3500,col 5)-(line 3504,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd4()",
        "snippet": "  public void testAnd4() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type null */var x; /** @type {number?} */var y;\\n\" +\n        \"if (x && y) { f(y) }\");\n  }\n",
        "begin_line": 3507,
        "end_line": 3511,
        "comment": "",
        "child_ranges": [
            "(line 3508,col 5)-(line 3510,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd5()",
        "snippet": "  public void testAnd5() throws Exception {\n    testTypes(\"/** @param {number} x\\n@param {string} y*/function f(x,y){};\\n\" +\n        \"/** @type {number?} */var x; /** @type {string?} */var y;\\n\" +\n        \"if (x && y) { f(x, y) }\");\n  }\n",
        "begin_line": 3513,
        "end_line": 3517,
        "comment": "",
        "child_ranges": [
            "(line 3514,col 5)-(line 3516,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd6()",
        "snippet": "  public void testAnd6() throws Exception {\n    testTypes(\"/** @param {number} x */function f(x){};\\n\" +\n        \"/** @type {number|undefined} */var x;\\n\" +\n        \"if (x && f(x)) { f(x) }\");\n  }\n",
        "begin_line": 3519,
        "end_line": 3523,
        "comment": "",
        "child_ranges": [
            "(line 3520,col 5)-(line 3522,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnd7()",
        "snippet": "  public void testAnd7() throws Exception {\n    // TODO(user): a deterministic warning should be generated for this\n    // case since x && x is always false. The implementation of this requires\n    // a more precise handling of a null value within a variable's type.\n    // Currently, a null value defaults to ? which passes every check.\n    testTypes(\"/** @type null */var x; if (x && x) {}\");\n  }\n",
        "begin_line": 3525,
        "end_line": 3531,
        "comment": "",
        "child_ranges": [
            "(line 3530,col 5)-(line 3530,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHook()",
        "snippet": "  public void testHook() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var x=foo()?a:b; }\");\n  }\n",
        "begin_line": 3533,
        "end_line": 3535,
        "comment": "",
        "child_ranges": [
            "(line 3534,col 5)-(line 3534,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType1()",
        "snippet": "  public void testHookRestrictsType1() throws Exception {\n    testTypes(\"/** @return {(string,null)} */\" +\n        \"function f() { return null;}\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */\" +\n        \"var b = a ? a : 'default';\");\n  }\n",
        "begin_line": 3537,
        "end_line": 3543,
        "comment": "",
        "child_ranges": [
            "(line 3538,col 5)-(line 3542,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType2()",
        "snippet": "  public void testHookRestrictsType2() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a = null;\" +\n        \"/** @type null */\" +\n        \"var b = a ? null : a;\");\n  }\n",
        "begin_line": 3545,
        "end_line": 3550,
        "comment": "",
        "child_ranges": [
            "(line 3546,col 5)-(line 3549,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType3()",
        "snippet": "  public void testHookRestrictsType3() throws Exception {\n    testTypes(\"/** @type {String} */\" +\n        \"var a;\" +\n        \"/** @type null */\" +\n        \"var b = (!a) ? a : null;\");\n  }\n",
        "begin_line": 3552,
        "end_line": 3557,
        "comment": "",
        "child_ranges": [
            "(line 3553,col 5)-(line 3556,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType4()",
        "snippet": "  public void testHookRestrictsType4() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type boolean */\" +\n        \"var b = a != null ? a : true;\");\n  }\n",
        "begin_line": 3559,
        "end_line": 3564,
        "comment": "",
        "child_ranges": [
            "(line 3560,col 5)-(line 3563,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType5()",
        "snippet": "  public void testHookRestrictsType5() throws Exception {\n    testTypes(\"/** @type {(boolean,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {(undefined)} */\" +\n        \"var b = a == null ? a : undefined;\");\n  }\n",
        "begin_line": 3566,
        "end_line": 3571,
        "comment": "",
        "child_ranges": [
            "(line 3567,col 5)-(line 3570,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType6()",
        "snippet": "  public void testHookRestrictsType6() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == null ? 5 : a;\");\n  }\n",
        "begin_line": 3573,
        "end_line": 3578,
        "comment": "",
        "child_ranges": [
            "(line 3574,col 5)-(line 3577,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHookRestrictsType7()",
        "snippet": "  public void testHookRestrictsType7() throws Exception {\n    testTypes(\"/** @type {(number,null,undefined)} */\" +\n        \"var a;\" +\n        \"/** @type {number} */\" +\n        \"var b = a == undefined ? 5 : a;\");\n  }\n",
        "begin_line": 3580,
        "end_line": 3585,
        "comment": "",
        "child_ranges": [
            "(line 3581,col 5)-(line 3584,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
        "snippet": "  public void testWhileRestrictsType1() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {number?} x */\\n\" +\n        \"function f(x) {\\n\" +\n        \"while (x) {\\n\" +\n        \"if (g(x)) { x = 1; }\\n\" +\n        \"x = x-1;\\n}\\n}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 3587,
        "end_line": 3597,
        "comment": "",
        "child_ranges": [
            "(line 3588,col 5)-(line 3596,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
        "snippet": "  public void testWhileRestrictsType2() throws Exception {\n    testTypes(\"/** @param {number?} x\\n@return {number}*/\\n\" +\n        \"function f(x) {\\n/** @type {number} */var y = 0;\" +\n        \"while (x) {\\n\" +\n        \"y = x;\\n\" +\n        \"x = x-1;\\n}\\n\" +\n        \"return y;}\");\n  }\n",
        "begin_line": 3599,
        "end_line": 3606,
        "comment": "",
        "child_ranges": [
            "(line 3600,col 5)-(line 3605,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
        "snippet": "  public void testHigherOrderFunctions1() throws Exception {\n    testTypes(\n        \"/** @type {function(number)} */var f;\" +\n        \"f(true);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3608,
        "end_line": 3615,
        "comment": "",
        "child_ranges": [
            "(line 3609,col 5)-(line 3614,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
        "snippet": "  public void testHigherOrderFunctions2() throws Exception {\n    testTypes(\n        \"/** @type {function():!Date} */var f;\" +\n        \"/** @type boolean */var a = f();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 3617,
        "end_line": 3624,
        "comment": "",
        "child_ranges": [
            "(line 3618,col 5)-(line 3623,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
        "snippet": "  public void testHigherOrderFunctions3() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3626,
        "end_line": 3630,
        "comment": "",
        "child_ranges": [
            "(line 3627,col 5)-(line 3629,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
        "snippet": "  public void testHigherOrderFunctions4() throws Exception {\n    testTypes(\n        \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n        \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 3632,
        "end_line": 3636,
        "comment": "",
        "child_ranges": [
            "(line 3633,col 5)-(line 3635,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias1()",
        "snippet": "  public void testConstructorAlias1() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3638,
        "end_line": 3648,
        "comment": "",
        "child_ranges": [
            "(line 3639,col 5)-(line 3647,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias2()",
        "snippet": "  public void testConstructorAlias2() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3650,
        "end_line": 3660,
        "comment": "",
        "child_ranges": [
            "(line 3651,col 5)-(line 3659,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias3()",
        "snippet": "  public void testConstructorAlias3() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @type {number} */ Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new FooAlias()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3662,
        "end_line": 3672,
        "comment": "",
        "child_ranges": [
            "(line 3663,col 5)-(line 3671,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias4()",
        "snippet": "  public void testConstructorAlias4() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"var FooAlias = Foo;\" +\n        \"/** @type {number} */ FooAlias.prototype.bar = 3;\" +\n        \"/** @return {string} */ function foo() { \" +\n        \"  return (new Foo()).bar; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3674,
        "end_line": 3684,
        "comment": "",
        "child_ranges": [
            "(line 3675,col 5)-(line 3683,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias5()",
        "snippet": "  public void testConstructorAlias5() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {FooAlias} */ function foo() { \" +\n        \"  return new Foo(); }\");\n  }\n",
        "begin_line": 3686,
        "end_line": 3692,
        "comment": "",
        "child_ranges": [
            "(line 3687,col 5)-(line 3691,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias6()",
        "snippet": "  public void testConstructorAlias6() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {Foo} */ function foo() { \" +\n        \"  return new FooAlias(); }\");\n  }\n",
        "begin_line": 3694,
        "end_line": 3700,
        "comment": "",
        "child_ranges": [
            "(line 3695,col 5)-(line 3699,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias7()",
        "snippet": "  public void testConstructorAlias7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3702,
        "end_line": 3712,
        "comment": "",
        "child_ranges": [
            "(line 3703,col 5)-(line 3711,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias8()",
        "snippet": "  public void testConstructorAlias8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ goog.Foo = function(x) {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3714,
        "end_line": 3724,
        "comment": "",
        "child_ranges": [
            "(line 3715,col 5)-(line 3723,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias9()",
        "snippet": "  public void testConstructorAlias9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/**\\n * @param {number} x \\n * @constructor */ goog.Foo = function(x) {};\" +\n        \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new goog.FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3726,
        "end_line": 3736,
        "comment": "",
        "child_ranges": [
            "(line 3727,col 5)-(line 3735,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorAlias10()",
        "snippet": "  public void testConstructorAlias10() throws Exception {\n    testTypes(\n        \"/**\\n * @param {number} x \\n * @constructor */ var Foo = function(x) {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"/** @return {number} */ function foo() { \" +\n        \"  return new FooAlias(1); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3738,
        "end_line": 3747,
        "comment": "",
        "child_ranges": [
            "(line 3739,col 5)-(line 3746,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure1()",
        "snippet": "  public void testClosure1() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDef(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3749,
        "end_line": 3756,
        "comment": "",
        "child_ranges": [
            "(line 3750,col 5)-(line 3755,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure2()",
        "snippet": "  public void testClosure2() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3758,
        "end_line": 3765,
        "comment": "",
        "child_ranges": [
            "(line 3759,col 5)-(line 3764,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure3()",
        "snippet": "  public void testClosure3() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = goog.isDefAndNotNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3767,
        "end_line": 3774,
        "comment": "",
        "child_ranges": [
            "(line 3768,col 5)-(line 3773,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure4()",
        "snippet": "  public void testClosure4() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDef(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3776,
        "end_line": 3783,
        "comment": "",
        "child_ranges": [
            "(line 3777,col 5)-(line 3782,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure5()",
        "snippet": "  public void testClosure5() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string?} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isNull(a) ? a : 'default';\",\n        null);\n  }\n",
        "begin_line": 3785,
        "end_line": 3792,
        "comment": "",
        "child_ranges": [
            "(line 3786,col 5)-(line 3791,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure6()",
        "snippet": "  public void testClosure6() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"/** @type {string|null|undefined} */var a;\" +\n        \"/** @type string */\" +\n        \"var b = !goog.isDefAndNotNull(a) ? 'default' : a;\",\n        null);\n  }\n",
        "begin_line": 3794,
        "end_line": 3801,
        "comment": "",
        "child_ranges": [
            "(line 3795,col 5)-(line 3800,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosure7()",
        "snippet": "  public void testClosure7() throws Exception {\n    testClosureTypes(\n        CLOSURE_DEFS +\n        \"goog.asserts = {};\" +\n        \"/** @return {*} */ goog.asserts.assert = function(x) { return x; };\" +\n        \"/** @type {string|null|undefined} */ var a = foo();\" +\n        \"/** @type {number} */\" +\n        \"var b = goog.asserts.assert(a);\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3803,
        "end_line": 3814,
        "comment": "",
        "child_ranges": [
            "(line 3804,col 5)-(line 3813,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn1()",
        "snippet": "  public void testReturn1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3816,
        "end_line": 3821,
        "comment": "",
        "child_ranges": [
            "(line 3817,col 5)-(line 3820,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn2()",
        "snippet": "  public void testReturn2() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3823,
        "end_line": 3828,
        "comment": "",
        "child_ranges": [
            "(line 3824,col 5)-(line 3827,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn3()",
        "snippet": "  public void testReturn3() throws Exception {\n    testTypes(\"/**@return {!Number}*/function foo(){ return 'abc'; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3830,
        "end_line": 3835,
        "comment": "",
        "child_ranges": [
            "(line 3831,col 5)-(line 3834,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn4()",
        "snippet": "  public void testReturn4() throws Exception {\n    testTypes(\"/**@return {!Number}\\n*/\\n function a(){return new Array();}\",\n        \"inconsistent return type\\n\" +\n        \"found   : Array\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 3837,
        "end_line": 3842,
        "comment": "",
        "child_ranges": [
            "(line 3838,col 5)-(line 3841,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn5()",
        "snippet": "  public void testReturn5() throws Exception {\n    testTypes(\"/** @param {number} n\\n\" +\n        \"@constructor */function n(n){return};\");\n  }\n",
        "begin_line": 3844,
        "end_line": 3847,
        "comment": "",
        "child_ranges": [
            "(line 3845,col 5)-(line 3846,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn6()",
        "snippet": "  public void testReturn6() throws Exception {\n    testTypes(\n        \"/** @param {number} opt_a\\n@return string */\" +\n        \"function a(opt_a) { return opt_a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3849,
        "end_line": 3856,
        "comment": "",
        "child_ranges": [
            "(line 3850,col 5)-(line 3855,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn7()",
        "snippet": "  public void testReturn7() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3858,
        "end_line": 3865,
        "comment": "",
        "child_ranges": [
            "(line 3859,col 5)-(line 3864,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testReturn8()",
        "snippet": "  public void testReturn8() throws Exception {\n    testTypes(\"/** @constructor */var A = function() {};\\n\" +\n        \"/** @constructor */var B = function() {};\\n\" +\n        \"/** @return {!B} */A.prototype.f = function() { return 1; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: B\");\n  }\n",
        "begin_line": 3867,
        "end_line": 3874,
        "comment": "",
        "child_ranges": [
            "(line 3868,col 5)-(line 3873,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn1()",
        "snippet": "  public void testInferredReturn1() throws Exception {\n    testTypes(\n        \"function f() {} /** @param {number} x */ function g(x) {}\" +\n        \"g(f());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3876,
        "end_line": 3883,
        "comment": "",
        "child_ranges": [
            "(line 3877,col 5)-(line 3882,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn2()",
        "snippet": "  public void testInferredReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @param {number} x */ function g(x) {}\" +\n        \"g((new Foo()).bar());\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 3885,
        "end_line": 3894,
        "comment": "",
        "child_ranges": [
            "(line 3886,col 5)-(line 3893,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn3()",
        "snippet": "  public void testInferredReturn3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() {}; \" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {number} \\n * @override  */ \" +\n        \"SubFoo.prototype.bar = function() { return 3; }; \",\n        \"mismatch of the bar property type and the type of the property \" +\n        \"it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): undefined\\n\" +\n        \"override: function (this:SubFoo): number\");\n  }\n",
        "begin_line": 3896,
        "end_line": 3907,
        "comment": "",
        "child_ranges": [
            "(line 3897,col 5)-(line 3906,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn4()",
        "snippet": "  public void testInferredReturn4() throws Exception {\n    // By design, this throws a warning. if you want global x to be\n    // defined to some other type of function, then you need to declare it\n    // as a greater type.\n    testTypes(\n        \"var x = function() {};\" +\n        \"x = /** @type {function(): number} */ (function() { return 3; });\",\n        \"assignment\\n\" +\n        \"found   : function (): number\\n\" +\n        \"required: function (): undefined\");\n  }\n",
        "begin_line": 3909,
        "end_line": 3919,
        "comment": "",
        "child_ranges": [
            "(line 3913,col 5)-(line 3918,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn5()",
        "snippet": "  public void testInferredReturn5() throws Exception {\n    // If x is local, then the function type is not declared.\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  x = /** @type {function(): number} */ (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3921,
        "end_line": 3933,
        "comment": "",
        "child_ranges": [
            "(line 3923,col 5)-(line 3932,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn6()",
        "snippet": "  public void testInferredReturn6() throws Exception {\n    testTypes(\n        \"/** @return {string} */\" +\n        \"function f() {\" +\n        \"  var x = function() {};\" +\n        \"  if (f()) \" +\n        \"    x = /** @type {function(): number} */ \" +\n        \"        (function() { return 3; });\" +\n        \"  return x();\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3935,
        "end_line": 3948,
        "comment": "",
        "child_ranges": [
            "(line 3936,col 5)-(line 3947,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn7()",
        "snippet": "  public void testInferredReturn7() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"Foo.prototype.bar = function(x) { return 3; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3950,
        "end_line": 3958,
        "comment": "",
        "child_ranges": [
            "(line 3951,col 5)-(line 3957,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredReturn8()",
        "snippet": "  public void testInferredReturn8() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number} x */ SubFoo.prototype.bar = \" +\n        \"    function(x) { return 3; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 3960,
        "end_line": 3971,
        "comment": "",
        "child_ranges": [
            "(line 3961,col 5)-(line 3961,col 44)",
            "(line 3962,col 5)-(line 3970,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam1()",
        "snippet": "  public void testInferredParam1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"Foo.prototype.bar = function(y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3973,
        "end_line": 3982,
        "comment": "",
        "child_ranges": [
            "(line 3974,col 5)-(line 3981,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam2()",
        "snippet": "  public void testInferredParam2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3984,
        "end_line": 3996,
        "comment": "",
        "child_ranges": [
            "(line 3985,col 5)-(line 3985,col 44)",
            "(line 3986,col 5)-(line 3995,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam3()",
        "snippet": "  public void testInferredParam3() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 3998,
        "end_line": 4010,
        "comment": "",
        "child_ranges": [
            "(line 3999,col 5)-(line 3999,col 44)",
            "(line 4000,col 5)-(line 4009,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam4()",
        "snippet": "  public void testInferredParam4() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {void} */ SubFoo.prototype.bar = \" +\n        \"    function(x) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4012,
        "end_line": 4024,
        "comment": "",
        "child_ranges": [
            "(line 4013,col 5)-(line 4013,col 44)",
            "(line 4014,col 5)-(line 4023,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam5()",
        "snippet": "  public void testInferredParam5() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {...number} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {...number} y  */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4026,
        "end_line": 4039,
        "comment": "",
        "child_ranges": [
            "(line 4027,col 5)-(line 4027,col 44)",
            "(line 4028,col 5)-(line 4038,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInferredParam6()",
        "snippet": "  public void testInferredParam6() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @param {number=} x */ Foo.prototype.bar = function(x) {};\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @param {number=} x \\n * @param {number=} y */ \" +\n        \"SubFoo.prototype.bar = \" +\n        \"    function(x, y) { f(y); };\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : (number|undefined)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4041,
        "end_line": 4054,
        "comment": "",
        "child_ranges": [
            "(line 4042,col 5)-(line 4042,col 44)",
            "(line 4043,col 5)-(line 4053,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn1()",
        "snippet": "  public void testOverriddenReturn1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {Object} */ Foo.prototype.bar = \" +\n        \"    function() { return {}; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {SubFoo}\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new Foo(); }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (SubFoo|null)\");\n  }\n",
        "begin_line": 4056,
        "end_line": 4067,
        "comment": "",
        "child_ranges": [
            "(line 4057,col 5)-(line 4066,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOverriddenReturn2()",
        "snippet": "  public void testOverriddenReturn2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @return {SubFoo} */ Foo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); };\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"/** @return {Foo} x\\n * @override */ SubFoo.prototype.bar = \" +\n        \"    function() { return new SubFoo(); }\",\n        \"mismatch of the bar property type and the type of the \" +\n        \"property it overrides from superclass Foo\\n\" +\n        \"original: function (this:Foo): (SubFoo|null)\\n\" +\n        \"override: function (this:SubFoo): (Foo|null)\");\n  }\n",
        "begin_line": 4069,
        "end_line": 4081,
        "comment": "",
        "child_ranges": [
            "(line 4070,col 5)-(line 4080,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis1()",
        "snippet": "  public void testThis1() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"/** @return number */goog.A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4083,
        "end_line": 4090,
        "comment": "",
        "child_ranges": [
            "(line 4084,col 5)-(line 4089,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis2()",
        "snippet": "  public void testThis2() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"};\" +\n        \"/** @return number */\" +\n        \"goog.A.prototype.n = function() { return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : null\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4092,
        "end_line": 4102,
        "comment": "",
        "child_ranges": [
            "(line 4093,col 5)-(line 4101,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis3()",
        "snippet": "  public void testThis3() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  this.foo = null;\" +\n        \"  this.foo = 5;\" +\n        \"};\");\n  }\n",
        "begin_line": 4104,
        "end_line": 4110,
        "comment": "",
        "child_ranges": [
            "(line 4105,col 5)-(line 4109,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis4()",
        "snippet": "  public void testThis4() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return number */goog.A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4112,
        "end_line": 4122,
        "comment": "",
        "child_ranges": [
            "(line 4113,col 5)-(line 4121,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis5()",
        "snippet": "  public void testThis5() throws Exception {\n    testTypes(\"/** @this Date\\n@return number*/function h() { return this }\",\n        \"inconsistent return type\\n\" +\n        \"found   : Date\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4124,
        "end_line": 4129,
        "comment": "",
        "child_ranges": [
            "(line 4125,col 5)-(line 4128,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis6()",
        "snippet": "  public void testThis6() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @constructor\\n@return !Date */\" +\n        \"goog.A = function(){ return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : goog.A\\n\" +\n        \"required: Date\");\n  }\n",
        "begin_line": 4131,
        "end_line": 4138,
        "comment": "",
        "child_ranges": [
            "(line 4132,col 5)-(line 4137,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis7()",
        "snippet": "  public void testThis7() throws Exception {\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"/** @return number */A.prototype.n = function() { return this };\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4140,
        "end_line": 4146,
        "comment": "",
        "child_ranges": [
            "(line 4141,col 5)-(line 4145,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis8()",
        "snippet": "  public void testThis8() throws Exception {\n    testTypes(\"/** @constructor */function A(){\" +\n        \"  /** @type {string?} */this.foo = null;\" +\n        \"};\" +\n        \"/** @return number */A.prototype.n = function() {\" +\n        \"  return this.foo };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4148,
        "end_line": 4157,
        "comment": "",
        "child_ranges": [
            "(line 4149,col 5)-(line 4156,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis9()",
        "snippet": "  public void testThis9() throws Exception {\n    // In A.bar, the type of {@code this} is unknown.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @return {string} */ A.bar = function() { return this.foo; };\");\n  }\n",
        "begin_line": 4159,
        "end_line": 4164,
        "comment": "",
        "child_ranges": [
            "(line 4161,col 5)-(line 4163,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testThis10()",
        "snippet": "  public void testThis10() throws Exception {\n    // In A.bar, the type of {@code this} is inferred from the @this tag.\n    testTypes(\"/** @constructor */function A(){};\" +\n        \"A.prototype.foo = 3;\" +\n        \"/** @this {A}\\n@return {string} */\" +\n        \"A.bar = function() { return this.foo; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4166,
        "end_line": 4175,
        "comment": "",
        "child_ranges": [
            "(line 4168,col 5)-(line 4174,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis1()",
        "snippet": "  public void testGlobalThis1() throws Exception {\n    testTypes(\"/** @constructor */ function Window() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Window.prototype.alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of Window.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4177,
        "end_line": 4186,
        "comment": "",
        "child_ranges": [
            "(line 4178,col 5)-(line 4185,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis2()",
        "snippet": "  public void testGlobalThis2() throws Exception {\n    testTypes(\"/** @constructor */ function Bindow() {}\" +\n        \"/** @param {string} msg */ \" +\n        \"Bindow.prototype.alert = function(msg) {};\" +\n        \"this.alert = 3;\" +\n        \"(new Bindow()).alert(this.alert)\",\n        \"actual parameter 1 of Bindow.prototype.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4188,
        "end_line": 4198,
        "comment": "",
        "child_ranges": [
            "(line 4189,col 5)-(line 4197,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis3()",
        "snippet": "  public void testGlobalThis3() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"function alert(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4200,
        "end_line": 4209,
        "comment": "",
        "child_ranges": [
            "(line 4201,col 5)-(line 4208,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis4()",
        "snippet": "  public void testGlobalThis4() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"this.alert(3);\",\n        \"actual parameter 1 of this.alert \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4211,
        "end_line": 4220,
        "comment": "",
        "child_ranges": [
            "(line 4212,col 5)-(line 4219,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis5()",
        "snippet": "  public void testGlobalThis5() throws Exception {\n    testTypes(\n        \"function f() {\" +\n        \"  /** @param {string} msg */ \" +\n        \"  var alert = function(msg) {};\" +\n        \"}\" +\n        \"this.alert(3);\",\n        \"Property alert never defined on this\");\n  }\n",
        "begin_line": 4222,
        "end_line": 4230,
        "comment": "",
        "child_ranges": [
            "(line 4223,col 5)-(line 4229,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGlobalThis6()",
        "snippet": "  public void testGlobalThis6() throws Exception {\n    testTypes(\n        \"/** @param {string} msg */ \" +\n        \"var alert = function(msg) {};\" +\n        \"var x = 3;\" +\n        \"x = 'msg';\" +\n        \"this.alert(this.x);\");\n  }\n",
        "begin_line": 4232,
        "end_line": 4239,
        "comment": "",
        "child_ranges": [
            "(line 4233,col 5)-(line 4238,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
        "snippet": "  public void testControlFlowRestrictsType1() throws Exception {\n    testTypes(\"/** @return {String?} */ function f() { return null; }\" +\n        \"/** @type {String?} */ var a = f();\" +\n        \"/** @type String */ var b = new String('foo');\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4241,
        "end_line": 4251,
        "comment": "",
        "child_ranges": [
            "(line 4242,col 5)-(line 4250,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
        "snippet": "  public void testControlFlowRestrictsType2() throws Exception {\n    testTypes(\"/** @return {(string,null)} */ function f() { return null; }\" +\n        \"/** @type {(string,null)} */ var a = f();\" +\n        \"/** @type string */ var b = 'foo';\" +\n        \"/** @type null */ var c = null;\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"} else {\" +\n        \"  c = a;\" +\n        \"}\",\n        \"assignment\\n\" +\n        \"found   : (null|string)\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 4253,
        "end_line": 4266,
        "comment": "",
        "child_ranges": [
            "(line 4254,col 5)-(line 4265,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
        "snippet": "  public void testControlFlowRestrictsType3() throws Exception {\n    testTypes(\"/** @type {(string,void)} */\" +\n        \"var a;\" +\n        \"/** @type string */\" +\n        \"var b = 'foo';\" +\n        \"if (a) {\" +\n        \"  b = a;\" +\n        \"}\");\n  }\n",
        "begin_line": 4268,
        "end_line": 4276,
        "comment": "",
        "child_ranges": [
            "(line 4269,col 5)-(line 4275,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
        "snippet": "  public void testControlFlowRestrictsType4() throws Exception {\n    testTypes(\"/** @param {string} a */ function f(a){}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\");\n  }\n",
        "begin_line": 4278,
        "end_line": 4282,
        "comment": "",
        "child_ranges": [
            "(line 4279,col 5)-(line 4281,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
        "snippet": "  public void testControlFlowRestrictsType5() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"a || f(a);\");\n  }\n",
        "begin_line": 4284,
        "end_line": 4288,
        "comment": "",
        "child_ranges": [
            "(line 4285,col 5)-(line 4287,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
        "snippet": "  public void testControlFlowRestrictsType6() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4290,
        "end_line": 4297,
        "comment": "",
        "child_ranges": [
            "(line 4291,col 5)-(line 4296,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
        "snippet": "  public void testControlFlowRestrictsType7() throws Exception {\n    testTypes(\"/** @param {undefined} x */ function f(x) {}\" +\n        \"/** @type {(string,undefined)} */ var a;\" +\n        \"a && f(a);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: undefined\");\n  }\n",
        "begin_line": 4299,
        "end_line": 4306,
        "comment": "",
        "child_ranges": [
            "(line 4300,col 5)-(line 4305,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
        "snippet": "  public void testControlFlowRestrictsType8() throws Exception {\n    testTypes(\"/** @param {undefined} a */ function f(a){}\" +\n        \"/** @type {(!Array,undefined)} */ var a;\" +\n        \"if (a || f(a)) {}\");\n  }\n",
        "begin_line": 4308,
        "end_line": 4312,
        "comment": "",
        "child_ranges": [
            "(line 4309,col 5)-(line 4311,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
        "snippet": "  public void testControlFlowRestrictsType9() throws Exception {\n    testTypes(\"/** @param {number?} x\\n * @return {number}*/\\n\" +\n        \"var f = function(x) {\\n\" +\n        \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n        \"};\");\n  }\n",
        "begin_line": 4314,
        "end_line": 4319,
        "comment": "",
        "child_ranges": [
            "(line 4315,col 5)-(line 4318,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase3()",
        "snippet": "  public void testSwitchCase3() throws Exception {\n    testTypes(\"/** @type String */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A': }\");\n  }\n",
        "begin_line": 4321,
        "end_line": 4325,
        "comment": "",
        "child_ranges": [
            "(line 4322,col 5)-(line 4324,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase4()",
        "snippet": "  public void testSwitchCase4() throws Exception {\n    testTypes(\"/** @type {(string,Null)} */\" +\n        \"var a = 'foo';\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4327,
        "end_line": 4331,
        "comment": "",
        "child_ranges": [
            "(line 4328,col 5)-(line 4330,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase5()",
        "snippet": "  public void testSwitchCase5() throws Exception {\n    testTypes(\"/** @type {(String,Null)} */\" +\n        \"var a = new String('foo');\" +\n        \"switch (a) { case 'A':break; case null:break; }\");\n  }\n",
        "begin_line": 4333,
        "end_line": 4337,
        "comment": "",
        "child_ranges": [
            "(line 4334,col 5)-(line 4336,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase6()",
        "snippet": "  public void testSwitchCase6() throws Exception {\n    testTypes(\"/** @type {(Number,Null)} */\" +\n        \"var a = new Number(5);\" +\n        \"switch (a) { case 5:break; case null:break; }\");\n  }\n",
        "begin_line": 4339,
        "end_line": 4343,
        "comment": "",
        "child_ranges": [
            "(line 4340,col 5)-(line 4342,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase7()",
        "snippet": "  public void testSwitchCase7() throws Exception {\n    // This really tests the inference inside the case.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (3) { case g(x.foo): return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4345,
        "end_line": 4361,
        "comment": "",
        "child_ranges": [
            "(line 4347,col 5)-(line 4360,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSwitchCase8()",
        "snippet": "  public void testSwitchCase8() throws Exception {\n    // This really tests the inference inside the switch clause.\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {number} x\\n\" +\n        \" * @return {number}\\n\" +\n        \" */\\n\" +\n        \"function g(x) { return 5; }\" +\n        \"function f() {\" +\n        \"  var x = {};\" +\n        \"  x.foo = '3';\" +\n        \"  switch (g(x.foo)) { case 3: return 3; }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4363,
        "end_line": 4379,
        "comment": "",
        "child_ranges": [
            "(line 4365,col 5)-(line 4378,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck1()",
        "snippet": "  public void testNoTypeCheck1() throws Exception {\n    testTypes(\"/** @notypecheck */function foo() { new 4 }\");\n  }\n",
        "begin_line": 4381,
        "end_line": 4383,
        "comment": "",
        "child_ranges": [
            "(line 4382,col 5)-(line 4382,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck2()",
        "snippet": "  public void testNoTypeCheck2() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4385,
        "end_line": 4387,
        "comment": "",
        "child_ranges": [
            "(line 4386,col 5)-(line 4386,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck3()",
        "snippet": "  public void testNoTypeCheck3() throws Exception {\n    testTypes(\"/** @notypecheck */var foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4389,
        "end_line": 4391,
        "comment": "",
        "child_ranges": [
            "(line 4390,col 5)-(line 4390,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck4()",
        "snippet": "  public void testNoTypeCheck4() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function() { new 4 }\");\n  }\n",
        "begin_line": 4393,
        "end_line": 4396,
        "comment": "",
        "child_ranges": [
            "(line 4394,col 5)-(line 4395,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck5()",
        "snippet": "  public void testNoTypeCheck5() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function() { new 4 }\");\n  }\n",
        "begin_line": 4398,
        "end_line": 4401,
        "comment": "",
        "child_ranges": [
            "(line 4399,col 5)-(line 4400,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck6()",
        "snippet": "  public void testNoTypeCheck6() throws Exception {\n    testTypes(\"var foo;\" +\n        \"/** @notypecheck */foo = function bar() { new 4 }\");\n  }\n",
        "begin_line": 4403,
        "end_line": 4406,
        "comment": "",
        "child_ranges": [
            "(line 4404,col 5)-(line 4405,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck7()",
        "snippet": "  public void testNoTypeCheck7() throws Exception {\n    testTypes(\"var foo;\" +\n        \"foo = /** @notypecheck */function bar() { new 4 }\");\n  }\n",
        "begin_line": 4408,
        "end_line": 4411,
        "comment": "",
        "child_ranges": [
            "(line 4409,col 5)-(line 4410,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck8()",
        "snippet": "  public void testNoTypeCheck8() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ var foo;\" +\n        \"var bar = 3; /** @param {string} x */ function f(x) {} f(bar);\");\n  }\n",
        "begin_line": 4413,
        "end_line": 4416,
        "comment": "",
        "child_ranges": [
            "(line 4414,col 5)-(line 4415,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck9()",
        "snippet": "  public void testNoTypeCheck9() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" /** @type {string} */ var a = 1\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4418,
        "end_line": 4425,
        "comment": "",
        "child_ranges": [
            "(line 4419,col 5)-(line 4424,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck10()",
        "snippet": "  public void testNoTypeCheck10() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \" function h() {/** @type {string} */ var a = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4427,
        "end_line": 4434,
        "comment": "",
        "child_ranges": [
            "(line 4428,col 5)-(line 4433,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck11()",
        "snippet": "  public void testNoTypeCheck11() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"/** @notypecheck */ function h() {/** @type {string} */ var a = 1}\"\n        );\n  }\n",
        "begin_line": 4436,
        "end_line": 4440,
        "comment": "",
        "child_ranges": [
            "(line 4437,col 5)-(line 4439,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck12()",
        "snippet": "  public void testNoTypeCheck12() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1}\"\n        );\n  }\n",
        "begin_line": 4442,
        "end_line": 4446,
        "comment": "",
        "child_ranges": [
            "(line 4443,col 5)-(line 4445,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck13()",
        "snippet": "  public void testNoTypeCheck13() throws Exception {\n    testTypes(\"/** @notypecheck */ function g() { }\" +\n        \"function h() {/** @type {string}\\n * @notypecheck\\n*/ var a = 1;\" +\n        \"/** @type {string}*/ var b = 1}\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\"\n        );\n  }\n",
        "begin_line": 4448,
        "end_line": 4456,
        "comment": "",
        "child_ranges": [
            "(line 4449,col 5)-(line 4455,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoTypeCheck14()",
        "snippet": "  public void testNoTypeCheck14() throws Exception {\n    testTypes(\"/** @fileoverview \\n * @notypecheck */ function g() { }\" +\n        \"g(1,2,3)\");\n  }\n",
        "begin_line": 4458,
        "end_line": 4461,
        "comment": "",
        "child_ranges": [
            "(line 4459,col 5)-(line 4460,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCast()",
        "snippet": "  public void testImplicitCast() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\",\n             \"(new Element).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4463,
        "end_line": 4469,
        "comment": "",
        "child_ranges": [
            "(line 4464,col 5)-(line 4468,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
        "snippet": "  public void testImplicitCastSubclassAccess() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"/** @constructor \\n @extends Element */\" +\n             \"function DIVElement() {};\",\n             \"(new DIVElement).innerHTML = new Array();\", null, false);\n  }\n",
        "begin_line": 4471,
        "end_line": 4479,
        "comment": "",
        "child_ranges": [
            "(line 4472,col 5)-(line 4478,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
        "snippet": "  public void testImplicitCastNotInExterns() throws Exception {\n    testTypes(\"/** @constructor */ function Element() {};\\n\" +\n             \"/** @type {string}\\n\" +\n             \"  * @implicitCast */\" +\n             \"Element.prototype.innerHTML;\" +\n             \"(new Element).innerHTML = new Array();\",\n             new String[] {\n               \"Illegal annotation on innerHTML. @implicitCast may only be \" +\n               \"used in externs.\",\n               \"assignment to property innerHTML of Element\\n\" +\n               \"found   : Array\\n\" +\n               \"required: string\"});\n  }\n",
        "begin_line": 4481,
        "end_line": 4493,
        "comment": "",
        "child_ranges": [
            "(line 4482,col 5)-(line 4492,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberNode()",
        "snippet": "  public void testNumberNode() throws Exception {\n    Node n = typeCheck(Node.newNumber(0));\n\n    assertEquals(NUMBER_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4495,
        "end_line": 4499,
        "comment": "",
        "child_ranges": [
            "(line 4496,col 5)-(line 4496,col 42)",
            "(line 4498,col 5)-(line 4498,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringNode()",
        "snippet": "  public void testStringNode() throws Exception {\n    Node n = typeCheck(Node.newString(\"hello\"));\n\n    assertEquals(STRING_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4501,
        "end_line": 4505,
        "comment": "",
        "child_ranges": [
            "(line 4502,col 5)-(line 4502,col 48)",
            "(line 4504,col 5)-(line 4504,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
        "snippet": "  public void testBooleanNodeTrue() throws Exception {\n    Node trueNode = typeCheck(new Node(Token.TRUE));\n\n    assertEquals(BOOLEAN_TYPE, trueNode.getJSType());\n  }\n",
        "begin_line": 4507,
        "end_line": 4511,
        "comment": "",
        "child_ranges": [
            "(line 4508,col 5)-(line 4508,col 52)",
            "(line 4510,col 5)-(line 4510,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
        "snippet": "  public void testBooleanNodeFalse() throws Exception {\n    Node falseNode = typeCheck(new Node(Token.FALSE));\n\n    assertEquals(BOOLEAN_TYPE, falseNode.getJSType());\n  }\n",
        "begin_line": 4513,
        "end_line": 4517,
        "comment": "",
        "child_ranges": [
            "(line 4514,col 5)-(line 4514,col 54)",
            "(line 4516,col 5)-(line 4516,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedNode()",
        "snippet": "  public void testUndefinedNode() throws Exception {\n    Node p = new Node(Token.ADD);\n    Node n = Node.newString(Token.NAME, \"undefined\");\n    p.addChildToBack(n);\n    p.addChildToBack(Node.newNumber(5));\n    typeCheck(p);\n\n    assertEquals(VOID_TYPE, n.getJSType());\n  }\n",
        "begin_line": 4519,
        "end_line": 4527,
        "comment": "",
        "child_ranges": [
            "(line 4520,col 5)-(line 4520,col 33)",
            "(line 4521,col 5)-(line 4521,col 53)",
            "(line 4522,col 5)-(line 4522,col 24)",
            "(line 4523,col 5)-(line 4523,col 40)",
            "(line 4524,col 5)-(line 4524,col 17)",
            "(line 4526,col 5)-(line 4526,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberAutoboxing()",
        "snippet": "  public void testNumberAutoboxing() throws Exception {\n    testTypes(\"/** @type Number */var a = 4;\",\n        \"initializing variable\\n\" +\n        \"found   : number\\n\" +\n        \"required: (Number|null)\");\n  }\n",
        "begin_line": 4529,
        "end_line": 4534,
        "comment": "",
        "child_ranges": [
            "(line 4530,col 5)-(line 4533,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNumberUnboxing()",
        "snippet": "  public void testNumberUnboxing() throws Exception {\n    testTypes(\"/** @type number */var a = new Number(4);\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4536,
        "end_line": 4541,
        "comment": "",
        "child_ranges": [
            "(line 4537,col 5)-(line 4540,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringAutoboxing()",
        "snippet": "  public void testStringAutoboxing() throws Exception {\n    testTypes(\"/** @type String */var a = 'hello';\",\n        \"initializing variable\\n\" +\n        \"found   : string\\n\" +\n        \"required: (String|null)\");\n  }\n",
        "begin_line": 4543,
        "end_line": 4548,
        "comment": "",
        "child_ranges": [
            "(line 4544,col 5)-(line 4547,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStringUnboxing()",
        "snippet": "  public void testStringUnboxing() throws Exception {\n    testTypes(\"/** @type string */var a = new String('hello');\",\n        \"initializing variable\\n\" +\n        \"found   : String\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4550,
        "end_line": 4555,
        "comment": "",
        "child_ranges": [
            "(line 4551,col 5)-(line 4554,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
        "snippet": "  public void testBooleanAutoboxing() throws Exception {\n    testTypes(\"/** @type Boolean */var a = true;\",\n        \"initializing variable\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: (Boolean|null)\");\n  }\n",
        "begin_line": 4557,
        "end_line": 4562,
        "comment": "",
        "child_ranges": [
            "(line 4558,col 5)-(line 4561,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBooleanUnboxing()",
        "snippet": "  public void testBooleanUnboxing() throws Exception {\n    testTypes(\"/** @type boolean */var a = new Boolean(false);\",\n        \"initializing variable\\n\" +\n        \"found   : Boolean\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4564,
        "end_line": 4569,
        "comment": "",
        "child_ranges": [
            "(line 4565,col 5)-(line 4568,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue86()",
        "snippet": "  public void testIssue86() throws Exception {\n    testTypes(\n        \"/** @interface */ function I() {}\" +\n        \"/** @return {number} */ I.prototype.get = function(){};\" +\n        \"/** @constructor \\n * @implements {I} */ function F() {}\" +\n        \"/** @override */ F.prototype.get = function() { return true; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4571,
        "end_line": 4580,
        "comment": "",
        "child_ranges": [
            "(line 4572,col 5)-(line 4579,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124()",
        "snippet": "  public void testIssue124() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = 1;\" +\n        \"}\");\n  }\n",
        "begin_line": 4582,
        "end_line": 4589,
        "comment": "",
        "child_ranges": [
            "(line 4583,col 5)-(line 4588,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testIssue124b()",
        "snippet": "  public void testIssue124b() throws Exception {\n    testTypes(\n        \"var t = null;\" +\n        \"function test() {\" +\n        \"  if (t != null) { t = null; }\" +\n        \"  t = undefined;\" +\n        \"}\",\n        \"condition always evaluates to false\\n\" +\n        \"left : (null|undefined)\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 4591,
        "end_line": 4601,
        "comment": "",
        "child_ranges": [
            "(line 4592,col 5)-(line 4600,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug592170()",
        "snippet": "  public void testBug592170() throws Exception {\n    testTypes(\n        \"/** @param {Function} opt_f ... */\" +\n        \"function foo(opt_f) {\" +\n        \"  /** @type {Function} */\" +\n        \"  return opt_f || function () {};\" +\n        \"}\");\n  }\n",
        "begin_line": 4608,
        "end_line": 4615,
        "comment": "\n   * Tests that the || operator is type checked correctly, that is of\n   * the type of the first argument or of the second argument. See\n   * bugid 592170 for more details.\n   ",
        "child_ranges": [
            "(line 4609,col 5)-(line 4614,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug901455()",
        "snippet": "  public void testBug901455() throws Exception {\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = undefined === a()\");\n    testTypes(\"/** @return {(number,undefined)} */ function a() { return 3; }\" +\n        \"var b = a() === undefined\");\n  }\n",
        "begin_line": 4622,
        "end_line": 4627,
        "comment": "\n   * Tests that undefined can be compared shallowly to a value of type\n   * (number,undefined) regardless of the side on which the undefined\n   * value is.\n   ",
        "child_ranges": [
            "(line 4623,col 5)-(line 4624,col 37)",
            "(line 4625,col 5)-(line 4626,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908701()",
        "snippet": "  public void testBug908701() throws Exception {\n    testTypes(\"/** @type {String} */var s = new String('foo');\" +\n        \"var b = s.match(/a/) != null;\");\n  }\n",
        "begin_line": 4632,
        "end_line": 4635,
        "comment": "\n   * Tests that the match method of strings returns nullable arrays.\n   ",
        "child_ranges": [
            "(line 4633,col 5)-(line 4634,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug908625()",
        "snippet": "  public void testBug908625() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\" +\n        \"/** @constructor\\n * @extends A */function B(){}\" +\n        \"/** @param {B} b\" +\n        \"\\n @return {(A,undefined)} */function foo(b){return b}\");\n  }\n",
        "begin_line": 4640,
        "end_line": 4645,
        "comment": "\n   * Tests that named types play nicely with subtyping.\n   ",
        "child_ranges": [
            "(line 4641,col 5)-(line 4644,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug911118()",
        "snippet": "  public void testBug911118() throws Exception {\n    // verifying the type assigned to function expressions assigned variables\n    Scope s = parseAndTypeCheckWithScope(\"var a = function(){};\").scope;\n    JSType type = s.getVar(\"a\").getType();\n    assertEquals(\"function (): undefined\", type.toString());\n\n    // verifying the bug example\n    testTypes(\"function nullFunction() {};\" +\n        \"var foo = nullFunction;\" +\n        \"foo = function() {};\" +\n        \"foo();\");\n  }\n",
        "begin_line": 4651,
        "end_line": 4662,
        "comment": "\n   * Tests that assigning two untyped functions to a variable whose type is\n   * inferred and calling this variable is legal.\n   ",
        "child_ranges": [
            "(line 4653,col 5)-(line 4653,col 72)",
            "(line 4654,col 5)-(line 4654,col 42)",
            "(line 4655,col 5)-(line 4655,col 60)",
            "(line 4658,col 5)-(line 4661,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug909000()",
        "snippet": "  public void testBug909000() throws Exception {\n    testTypes(\"/** @constructor */function A(){}\\n\" +\n        \"/** @param {!A} a\\n\" +\n        \"@return boolean*/\\n\" +\n        \"function y(a) { return a }\",\n        \"inconsistent return type\\n\" +\n        \"found   : A\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4664,
        "end_line": 4672,
        "comment": "",
        "child_ranges": [
            "(line 4665,col 5)-(line 4671,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug930117()",
        "snippet": "  public void testBug930117() throws Exception {\n    testTypes(\n        \"/** @param {boolean} x */function f(x){}\" +\n        \"f(null);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : null\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 4674,
        "end_line": 4681,
        "comment": "",
        "child_ranges": [
            "(line 4675,col 5)-(line 4680,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1484445()",
        "snippet": "  public void testBug1484445() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (foo.bar == null && foo.baz == null) {\" +\n        \"      foo.bar;\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\");\n  }\n",
        "begin_line": 4683,
        "end_line": 4696,
        "comment": "",
        "child_ranges": [
            "(line 4684,col 5)-(line 4695,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1859535()",
        "snippet": "  public void testBug1859535() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {Function} childCtor Child class.\\n\" +\n        \" * @param {Function} parentCtor Parent class.\\n\" +\n        \" */\" +\n        \"var inherits = function(childCtor, parentCtor) {\" +\n        \"  /** @constructor */\" +\n        \"  function tempCtor() {};\" +\n        \"  tempCtor.prototype = parentCtor.prototype;\" +\n        \"  childCtor.superClass_ = parentCtor.prototype;\" +\n        \"  childCtor.prototype = new tempCtor();\" +\n        \"  /** @override */ childCtor.prototype.constructor = childCtor;\" +\n        \"};\" +\n        \"/**\" +\n        \" * @param {Function} constructor\\n\" +\n        \" * @param {Object} var_args\\n\" +\n        \" * @return {Object}\\n\" +\n        \" */\" +\n        \"var factory = function(constructor, var_args) {\" +\n        \"  /** @constructor */\" +\n        \"  var tempCtor = function() {};\" +\n        \"  tempCtor.prototype = constructor.prototype;\" +\n        \"  var obj = new tempCtor();\" +\n        \"  constructor.apply(obj, arguments);\" +\n        \"  return obj;\" +\n        \"};\");\n  }\n",
        "begin_line": 4698,
        "end_line": 4725,
        "comment": "",
        "child_ranges": [
            "(line 4699,col 5)-(line 4724,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940591()",
        "snippet": "  public void testBug1940591() throws Exception {\n    testTypes(\n        \"/** @type {Object} */\" +\n        \"var a = {};\\n\" +\n        \"/** @type {number} */\\n\" +\n        \"a.name = 0;\\n\" +\n        \"/**\\n\" +\n        \" * @param {Function} x anything.\\n\" +\n        \" */\\n\" +\n        \"a.g = function(x) { x.name = 'a'; }\");\n  }\n",
        "begin_line": 4727,
        "end_line": 4737,
        "comment": "",
        "child_ranges": [
            "(line 4728,col 5)-(line 4736,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1942972()",
        "snippet": "  public void testBug1942972() throws Exception {\n    testTypes(\n        \"var google = {\\n\"+\n        \"  gears: {\\n\" +\n        \"    factory: {},\\n\" +\n        \"    workerPool: {}\\n\" +\n        \"  }\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"google.gears = {factory: {}};\\n\");\n  }\n",
        "begin_line": 4739,
        "end_line": 4749,
        "comment": "",
        "child_ranges": [
            "(line 4740,col 5)-(line 4748,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1943776()",
        "snippet": "  public void testBug1943776() throws Exception {\n    testTypes(\n        \"/** @return  {{foo: Array}} */\" +\n        \"function bar() {\" +\n        \"  return {foo: []};\" +\n        \"}\");\n  }\n",
        "begin_line": 4751,
        "end_line": 4757,
        "comment": "",
        "child_ranges": [
            "(line 4752,col 5)-(line 4756,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1987544()",
        "snippet": "  public void testBug1987544() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function foo(x) {}\" +\n        \"var duration;\" +\n        \"if (true && !(duration = 3)) {\" +\n        \" foo(duration);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4759,
        "end_line": 4769,
        "comment": "",
        "child_ranges": [
            "(line 4760,col 5)-(line 4768,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug1940769()",
        "snippet": "  public void testBug1940769() throws Exception {\n    testTypes(\n        \"/** @return {!Object} */ \" +\n        \"function proto(obj) { return obj.prototype; }\" +\n        \"/** @constructor */ function Map() {}\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {Map}\\n\" +\n        \" */\" +\n        \"function Map2() { Map.call(this); };\" +\n        \"Map2.prototype = proto(Map);\");\n  }\n",
        "begin_line": 4771,
        "end_line": 4782,
        "comment": "",
        "child_ranges": [
            "(line 4772,col 5)-(line 4781,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2335992()",
        "snippet": "  public void testBug2335992() throws Exception {\n    testTypes(\n        \"/** @return {*} */ function f() { return 3; }\" +\n        \"var x = f();\" +\n        \"/** @type {string} */\" +\n        \"x.y = 3;\",\n        \"assignment to property y of x\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 4784,
        "end_line": 4793,
        "comment": "",
        "child_ranges": [
            "(line 4785,col 5)-(line 4792,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBug2341812()",
        "snippet": "  public void testBug2341812() throws Exception {\n    testTypes(\n        \"/** @interface */\" +\n        \"function EventTarget() {}\" +\n        \"/** @constructor \\n * @implements {EventTarget} */\" +\n        \"function Node() {}\" +\n        \"/** @type {number} */ Node.prototype.index;\" +\n        \"/** @param {EventTarget} x \\n * @return {string} */\" +\n        \"function foo(x) { return x.index; }\");\n  }\n",
        "begin_line": 4795,
        "end_line": 4804,
        "comment": "",
        "child_ranges": [
            "(line 4796,col 5)-(line 4803,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors1()",
        "snippet": "  public void testScopedConstructors1() throws Exception {\n    testTypes(\n        \"function foo1() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {number} */ this.x = 3;\" +\n        \"  }\" +\n        \"}\" +\n        \"function foo2() { \" +\n        \"  /** @constructor */ function Bar() { \" +\n        \"    /** @type {string} */ this.x = 'y';\" +\n        \"  }\" +\n        \"  /** \" +\n        \"   * @param {Bar} b\\n\" +\n        \"   * @return {number}\\n\" +\n        \"   */\" +\n        \"  function baz(b) { return b.x; }\" +\n        \"}\",\n        \"inconsistent return type\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4806,
        "end_line": 4826,
        "comment": "",
        "child_ranges": [
            "(line 4807,col 5)-(line 4825,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testScopedConstructors2()",
        "snippet": "  public void testScopedConstructors2() throws Exception {\n    testTypes(\n        \"/** @param {Function} f */\" +\n        \"function foo1(f) { \" +\n        \"  /** @param {Function} g */\" +\n        \"  f.prototype.bar = function(g) {};\" +\n        \"}\");\n  }\n",
        "begin_line": 4828,
        "end_line": 4835,
        "comment": "",
        "child_ranges": [
            "(line 4829,col 5)-(line 4834,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
        "snippet": "  public void testQualifiedNameInference1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @type {number?} */ Foo.prototype.bar = null;\" +\n        \"/** @type {number?} */ Foo.prototype.baz = null;\" +\n        \"/** @param {Foo} foo */\" +\n        \"function f(foo) {\" +\n        \"  while (true) {\" +\n        \"    if (!foo.baz) break; \" +\n        \"    foo.bar = null;\" +\n        \"  }\" +\n        // Tests a bug where this condition always evaluated to true.\n        \"  return foo.bar == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4837,
        "end_line": 4851,
        "comment": "",
        "child_ranges": [
            "(line 4838,col 5)-(line 4850,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
        "snippet": "  public void testQualifiedNameInference2() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 4853,
        "end_line": 4866,
        "comment": "",
        "child_ranges": [
            "(line 4854,col 5)-(line 4865,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
        "snippet": "  public void testQualifiedNameInference3() throws Exception {\n    testTypes(\n        \"var x = {};\" +\n        \"x.y = c;\" +\n        \"function f(a, b) {\" +\n        \"  if (a) {\" +\n        \"    if (b) \" +\n        \"      x.y = 2;\" +\n        \"    else \" +\n        \"      x.y = 1;\" +\n        \"  }\" +\n        \"  return x.y == null;\" +\n        \"} function g() { x.y = null; }\");\n  }\n",
        "begin_line": 4868,
        "end_line": 4881,
        "comment": "",
        "child_ranges": [
            "(line 4869,col 5)-(line 4880,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
        "snippet": "  public void testQualifiedNameInference4() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\\n\" +\n        \"/**\\n\" +\n        \" * @param {?string} x \\n\" +\n        \" * @constructor\\n\" +\n        \" */\" +\n        \"function Foo(x) { this.x_ = x; }\\n\" +\n        \"Foo.prototype.bar = function() {\" +\n        \"  if (this.x_) { f(this.x_); }\" +\n        \"};\");\n  }\n",
        "begin_line": 4883,
        "end_line": 4894,
        "comment": "",
        "child_ranges": [
            "(line 4884,col 5)-(line 4893,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
        "snippet": "  public void testQualifiedNameInference5() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"(function() { \" +\n        \"    /** @param {number} x */ ns.foo = function(x) {}; })();\" +\n        \"(function() { ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4896,
        "end_line": 4905,
        "comment": "",
        "child_ranges": [
            "(line 4897,col 5)-(line 4904,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
        "snippet": "  public void testQualifiedNameInference6() throws Exception {\n    testTypes(\n        \"var ns = {}; \" +\n        \"/** @param {number} x */ ns.foo = function(x) {};\" +\n        \"(function() { \" +\n        \"    ns.foo = function(x) {};\" +\n        \"    ns.foo(true); })();\",\n        \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 4907,
        "end_line": 4917,
        "comment": "",
        "child_ranges": [
            "(line 4908,col 5)-(line 4916,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testSheqRefinedScope()",
        "snippet": "  public void testSheqRefinedScope() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\\n\" +\n        \"/** @constructor \\n @extends A */ function B() {}\\n\" +\n        \"/** @return number */\\n\" +\n        \"B.prototype.p = function() { return 1; }\\n\" +\n        \"/** @param {A} a\\n @param {B} b */\\n\" +\n        \"function f(a, b) {\\n\" +\n        \"  b.p();\\n\" +\n        \"  if (a === b) {\\n\" +\n        \"    b.p();\\n\" +\n        \"  }\\n\" +\n        \"}\");\n    Node nodeC = n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild();\n    JSType typeC = nodeC.getJSType();\n    assertTrue(typeC.isNumber());\n\n    Node nodeB = nodeC.getFirstChild().getFirstChild();\n    JSType typeB = nodeB.getJSType();\n    assertEquals(\"B\", typeB.toString());\n  }\n",
        "begin_line": 4919,
        "end_line": 4940,
        "comment": "",
        "child_ranges": [
            "(line 4920,col 5)-(line 4931,col 13)",
            "(line 4932,col 5)-(line 4933,col 39)",
            "(line 4934,col 5)-(line 4934,col 37)",
            "(line 4935,col 5)-(line 4935,col 33)",
            "(line 4937,col 5)-(line 4937,col 55)",
            "(line 4938,col 5)-(line 4938,col 37)",
            "(line 4939,col 5)-(line 4939,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
        "snippet": "  public void testAssignToUntypedVariable() throws Exception {\n    Node n = parseAndTypeCheck(\"var z; z = 1;\");\n\n    Node assign = n.getLastChild().getFirstChild();\n    Node node = assign.getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertEquals(\"number\", node.getJSType().toString());\n  }\n",
        "begin_line": 4942,
        "end_line": 4949,
        "comment": "",
        "child_ranges": [
            "(line 4943,col 5)-(line 4943,col 48)",
            "(line 4945,col 5)-(line 4945,col 51)",
            "(line 4946,col 5)-(line 4946,col 39)",
            "(line 4947,col 5)-(line 4947,col 50)",
            "(line 4948,col 5)-(line 4948,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
        "snippet": "  public void testAssignToUntypedProperty() throws Exception {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {}\\n\" +\n        \"Foo.prototype.a = 1;\" +\n        \"(new Foo).a;\");\n\n    Node node = n.getLastChild().getFirstChild();\n    assertFalse(node.getJSType().isUnknownType());\n    assertTrue(node.getJSType().isNumber());\n  }\n",
        "begin_line": 4951,
        "end_line": 4960,
        "comment": "",
        "child_ranges": [
            "(line 4952,col 5)-(line 4955,col 24)",
            "(line 4957,col 5)-(line 4957,col 49)",
            "(line 4958,col 5)-(line 4958,col 50)",
            "(line 4959,col 5)-(line 4959,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew1()",
        "snippet": "  public void testNew1() throws Exception {\n    testTypes(\"new 4\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4962,
        "end_line": 4964,
        "comment": "",
        "child_ranges": [
            "(line 4963,col 5)-(line 4963,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew2()",
        "snippet": "  public void testNew2() throws Exception {\n    testTypes(\"var Math = {}; new Math()\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4966,
        "end_line": 4968,
        "comment": "",
        "child_ranges": [
            "(line 4967,col 5)-(line 4967,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew3()",
        "snippet": "  public void testNew3() throws Exception {\n    testTypes(\"new Date()\");\n  }\n",
        "begin_line": 4970,
        "end_line": 4972,
        "comment": "",
        "child_ranges": [
            "(line 4971,col 5)-(line 4971,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew4()",
        "snippet": "  public void testNew4() throws Exception {\n    testTypes(\"/** @constructor */function A(){}; new A();\");\n  }\n",
        "begin_line": 4974,
        "end_line": 4976,
        "comment": "",
        "child_ranges": [
            "(line 4975,col 5)-(line 4975,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew5()",
        "snippet": "  public void testNew5() throws Exception {\n    testTypes(\"function A(){}; new A();\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 4978,
        "end_line": 4980,
        "comment": "",
        "child_ranges": [
            "(line 4979,col 5)-(line 4979,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew6()",
        "snippet": "  public void testNew6() throws Exception {\n    TypeCheckResult p =\n      parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\" +\n      \"var a = new A();\");\n\n    JSType aType = p.scope.getVar(\"a\").getType();\n    assertTrue(aType instanceof ObjectType);\n    ObjectType aObjectType = (ObjectType) aType;\n    assertEquals(\"A\", aObjectType.getConstructor().getReferenceName());\n  }\n",
        "begin_line": 4982,
        "end_line": 4991,
        "comment": "",
        "child_ranges": [
            "(line 4983,col 5)-(line 4985,col 26)",
            "(line 4987,col 5)-(line 4987,col 49)",
            "(line 4988,col 5)-(line 4988,col 44)",
            "(line 4989,col 5)-(line 4989,col 48)",
            "(line 4990,col 5)-(line 4990,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew7()",
        "snippet": "  public void testNew7() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"if (opt_constructor) { new opt_constructor; }\" +\n        \"}\");\n  }\n",
        "begin_line": 4993,
        "end_line": 4998,
        "comment": "",
        "child_ranges": [
            "(line 4994,col 5)-(line 4997,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew8()",
        "snippet": "  public void testNew8() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new opt_constructor;\" +\n        \"}\");\n  }\n",
        "begin_line": 5000,
        "end_line": 5005,
        "comment": "",
        "child_ranges": [
            "(line 5001,col 5)-(line 5004,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew9()",
        "snippet": "  public void testNew9() throws Exception {\n    testTypes(\"/** @param {Function} opt_constructor */\" +\n        \"function foo(opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5007,
        "end_line": 5012,
        "comment": "",
        "child_ranges": [
            "(line 5008,col 5)-(line 5011,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew10()",
        "snippet": "  public void testNew10() throws Exception {\n    testTypes(\"var goog = {};\" +\n        \"/** @param {Function} opt_constructor */\" +\n        \"goog.Foo = function (opt_constructor) {\" +\n        \"new (opt_constructor || Array);\" +\n        \"}\");\n  }\n",
        "begin_line": 5014,
        "end_line": 5020,
        "comment": "",
        "child_ranges": [
            "(line 5015,col 5)-(line 5019,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew11()",
        "snippet": "  public void testNew11() throws Exception {\n    testTypes(\"/** @param {Function} c1 */\" +\n        \"function f(c1) {\" +\n        \"  var c2 = function(){};\" +\n        \"  c1.prototype = new c2;\" +\n        \"}\", TypeCheck.NOT_A_CONSTRUCTOR);\n  }\n",
        "begin_line": 5022,
        "end_line": 5028,
        "comment": "",
        "child_ranges": [
            "(line 5023,col 5)-(line 5027,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew12()",
        "snippet": "  public void testNew12() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"var a = new Array();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertEquals(ARRAY_TYPE, a.getType());\n  }\n",
        "begin_line": 5030,
        "end_line": 5035,
        "comment": "",
        "child_ranges": [
            "(line 5031,col 5)-(line 5031,col 75)",
            "(line 5032,col 5)-(line 5032,col 32)",
            "(line 5034,col 5)-(line 5034,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew13()",
        "snippet": "  public void testNew13() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */function FooBar(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5037,
        "end_line": 5045,
        "comment": "",
        "child_ranges": [
            "(line 5038,col 5)-(line 5040,col 33)",
            "(line 5041,col 5)-(line 5041,col 32)",
            "(line 5043,col 5)-(line 5043,col 50)",
            "(line 5044,col 5)-(line 5044,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew14()",
        "snippet": "  public void testNew14() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"/** @constructor */var FooBar = function(){};\" +\n        \"var a = new FooBar();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"FooBar\", a.getType().toString());\n  }\n",
        "begin_line": 5047,
        "end_line": 5055,
        "comment": "",
        "child_ranges": [
            "(line 5048,col 5)-(line 5050,col 33)",
            "(line 5051,col 5)-(line 5051,col 32)",
            "(line 5053,col 5)-(line 5053,col 50)",
            "(line 5054,col 5)-(line 5054,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew15()",
        "snippet": "  public void testNew15() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function(){};\" +\n        \"var a = new goog.A();\");\n    Var a = p.scope.getVar(\"a\");\n\n    assertTrue(a.getType() instanceof ObjectType);\n    assertEquals(\"goog.A\", a.getType().toString());\n  }\n",
        "begin_line": 5057,
        "end_line": 5066,
        "comment": "",
        "child_ranges": [
            "(line 5058,col 5)-(line 5061,col 33)",
            "(line 5062,col 5)-(line 5062,col 32)",
            "(line 5064,col 5)-(line 5064,col 50)",
            "(line 5065,col 5)-(line 5065,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNew16()",
        "snippet": "  public void testNew16() throws Exception {\n    testTypes(\n        \"/** \\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @constructor \\n\" +\n        \" */\" +\n        \"function Foo(x) {}\" +\n        \"function g() { new Foo(1); }\",\n        \"actual parameter 1 of Foo does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5068,
        "end_line": 5079,
        "comment": "",
        "child_ranges": [
            "(line 5069,col 5)-(line 5078,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName1()",
        "snippet": "  public void testName1() throws Exception {\n    assertEquals(VOID_TYPE, testNameNode(\"undefined\"));\n  }\n",
        "begin_line": 5081,
        "end_line": 5083,
        "comment": "",
        "child_ranges": [
            "(line 5082,col 5)-(line 5082,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName2()",
        "snippet": "  public void testName2() throws Exception {\n    assertEquals(OBJECT_FUNCTION_TYPE, testNameNode(\"Object\"));\n  }\n",
        "begin_line": 5085,
        "end_line": 5087,
        "comment": "",
        "child_ranges": [
            "(line 5086,col 5)-(line 5086,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName3()",
        "snippet": "  public void testName3() throws Exception {\n    assertEquals(ARRAY_FUNCTION_TYPE, testNameNode(\"Array\"));\n  }\n",
        "begin_line": 5089,
        "end_line": 5091,
        "comment": "",
        "child_ranges": [
            "(line 5090,col 5)-(line 5090,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName4()",
        "snippet": "  public void testName4() throws Exception {\n    assertEquals(DATE_FUNCTION_TYPE, testNameNode(\"Date\"));\n  }\n",
        "begin_line": 5093,
        "end_line": 5095,
        "comment": "",
        "child_ranges": [
            "(line 5094,col 5)-(line 5094,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testName5()",
        "snippet": "  public void testName5() throws Exception {\n    assertEquals(REGEXP_FUNCTION_TYPE, testNameNode(\"RegExp\"));\n  }\n",
        "begin_line": 5097,
        "end_line": 5099,
        "comment": "",
        "child_ranges": [
            "(line 5098,col 5)-(line 5098,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
        "snippet": "  private JSType testNameNode(String name) {\n    Node node = Node.newString(Token.NAME, name);\n    Node parent = new Node(Token.SCRIPT, node);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, parent);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, parent);\n    return node.getJSType();\n  }\n",
        "begin_line": 5104,
        "end_line": 5114,
        "comment": "\n   * Type checks a NAME node and retrieve its type.\n   ",
        "child_ranges": [
            "(line 5105,col 5)-(line 5105,col 49)",
            "(line 5106,col 5)-(line 5106,col 47)",
            "(line 5108,col 5)-(line 5108,col 41)",
            "(line 5109,col 5)-(line 5109,col 66)",
            "(line 5110,col 5)-(line 5110,col 46)",
            "(line 5112,col 5)-(line 5112,col 52)",
            "(line 5113,col 5)-(line 5113,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation1()",
        "snippet": "  public void testBitOperation1() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ ~foo(); }\",\n        \"operator ~ cannot be applied to undefined\");\n  }\n",
        "begin_line": 5116,
        "end_line": 5119,
        "comment": "",
        "child_ranges": [
            "(line 5117,col 5)-(line 5118,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation2()",
        "snippet": "  public void testBitOperation2() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()<<3;}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 5121,
        "end_line": 5124,
        "comment": "",
        "child_ranges": [
            "(line 5122,col 5)-(line 5123,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation3()",
        "snippet": "  public void testBitOperation3() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3<<foo();}\",\n        \"operator << cannot be applied to undefined\");\n  }\n",
        "begin_line": 5126,
        "end_line": 5129,
        "comment": "",
        "child_ranges": [
            "(line 5127,col 5)-(line 5128,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation4()",
        "snippet": "  public void testBitOperation4() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = foo()>>>3;}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 5131,
        "end_line": 5134,
        "comment": "",
        "child_ranges": [
            "(line 5132,col 5)-(line 5133,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation5()",
        "snippet": "  public void testBitOperation5() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){var a = 3>>>foo();}\",\n        \"operator >>> cannot be applied to undefined\");\n  }\n",
        "begin_line": 5136,
        "end_line": 5139,
        "comment": "",
        "child_ranges": [
            "(line 5137,col 5)-(line 5138,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation6()",
        "snippet": "  public void testBitOperation6() throws Exception {\n    testTypes(\"/**@return {!Object}*/function foo(){var a = foo()&3;}\",\n        \"bad left operand to bitwise operator\\n\" +\n        \"found   : Object\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 5141,
        "end_line": 5146,
        "comment": "",
        "child_ranges": [
            "(line 5142,col 5)-(line 5145,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation7()",
        "snippet": "  public void testBitOperation7() throws Exception {\n    testTypes(\"var x = null; x |= undefined; x &= 3; x ^= '3'; x |= true;\");\n  }\n",
        "begin_line": 5148,
        "end_line": 5150,
        "comment": "",
        "child_ranges": [
            "(line 5149,col 5)-(line 5149,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation8()",
        "snippet": "  public void testBitOperation8() throws Exception {\n    testTypes(\"var x = void 0; x |= new Number(3);\");\n  }\n",
        "begin_line": 5152,
        "end_line": 5154,
        "comment": "",
        "child_ranges": [
            "(line 5153,col 5)-(line 5153,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBitOperation9()",
        "snippet": "  public void testBitOperation9() throws Exception {\n    testTypes(\"var x = void 0; x |= {};\",\n        \"bad right operand to bitwise operator\\n\" +\n        \"found   : {}\\n\" +\n        \"required: (boolean|null|number|string|undefined)\");\n  }\n",
        "begin_line": 5156,
        "end_line": 5161,
        "comment": "",
        "child_ranges": [
            "(line 5157,col 5)-(line 5160,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall1()",
        "snippet": "  public void testCall1() throws Exception {\n    testTypes(\"3();\", \"number expressions are not callable\");\n  }\n",
        "begin_line": 5163,
        "end_line": 5165,
        "comment": "",
        "child_ranges": [
            "(line 5164,col 5)-(line 5164,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall2()",
        "snippet": "  public void testCall2() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 5167,
        "end_line": 5172,
        "comment": "",
        "child_ranges": [
            "(line 5168,col 5)-(line 5171,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall3()",
        "snippet": "  public void testCall3() throws Exception {\n    // We are checking that an unresolved named type can successfully\n    // meet with a functional type to produce a callable type.\n    testTypes(\"/** @type {Function|undefined} */var opt_f;\" +\n        \"/** @type {some.unknown.type} */var f1;\" +\n        \"var f2 = opt_f || f1;\" +\n        \"f2();\",\n        \"Parse error. Unknown type some.unknown.type\");\n  }\n",
        "begin_line": 5174,
        "end_line": 5182,
        "comment": "",
        "child_ranges": [
            "(line 5177,col 5)-(line 5181,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall4()",
        "snippet": "  public void testCall4() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ bar('abc'); }\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5184,
        "end_line": 5189,
        "comment": "",
        "child_ranges": [
            "(line 5185,col 5)-(line 5188,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall5()",
        "snippet": "  public void testCall5() throws Exception {\n    testTypes(\"/**@param {!RegExp} a*/var foo = function bar(a){ foo('abc'); }\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5191,
        "end_line": 5196,
        "comment": "",
        "child_ranges": [
            "(line 5192,col 5)-(line 5195,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall6()",
        "snippet": "  public void testCall6() throws Exception {\n    testTypes(\"/** @param {!Number} foo*/function bar(foo){}\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: Number\");\n  }\n",
        "begin_line": 5198,
        "end_line": 5204,
        "comment": "",
        "child_ranges": [
            "(line 5199,col 5)-(line 5203,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall7()",
        "snippet": "  public void testCall7() throws Exception {\n    testTypes(\"/** @param {!RegExp} a*/var foo = function bar(a){};\" +\n        \"foo('abc');\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: RegExp\");\n  }\n",
        "begin_line": 5206,
        "end_line": 5212,
        "comment": "",
        "child_ranges": [
            "(line 5207,col 5)-(line 5211,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall8()",
        "snippet": "  public void testCall8() throws Exception {\n    testTypes(\"/** @type {Function|number} */var f;f();\",\n        \"(Function|number) expressions are \" +\n        \"not callable\");\n  }\n",
        "begin_line": 5214,
        "end_line": 5218,
        "comment": "",
        "child_ranges": [
            "(line 5215,col 5)-(line 5217,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall9()",
        "snippet": "  public void testCall9() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Foo = function() {};\" +\n        \"/** @param {!goog.Foo} a */ var bar = function(a){};\" +\n        \"bar('abc');\",\n        \"actual parameter 1 of bar does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: goog.Foo\");\n  }\n",
        "begin_line": 5220,
        "end_line": 5229,
        "comment": "",
        "child_ranges": [
            "(line 5221,col 5)-(line 5228,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall10()",
        "snippet": "  public void testCall10() throws Exception {\n    testTypes(\"/** @type {Function} */var f;f();\");\n  }\n",
        "begin_line": 5231,
        "end_line": 5233,
        "comment": "",
        "child_ranges": [
            "(line 5232,col 5)-(line 5232,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCall11()",
        "snippet": "  public void testCall11() throws Exception {\n    testTypes(\"var f = new Function(); f();\");\n  }\n",
        "begin_line": 5235,
        "end_line": 5237,
        "comment": "",
        "child_ranges": [
            "(line 5236,col 5)-(line 5236,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall1()",
        "snippet": "  public void testFunctionCall1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 3);\");\n  }\n",
        "begin_line": 5239,
        "end_line": 5243,
        "comment": "",
        "child_ranges": [
            "(line 5240,col 5)-(line 5242,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall2()",
        "snippet": "  public void testFunctionCall2() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ var foo = function(x) {};\" +\n        \"foo.call(null, 'bar');\",\n        \"actual parameter 2 of foo.call does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5245,
        "end_line": 5252,
        "comment": "",
        "child_ranges": [
            "(line 5246,col 5)-(line 5251,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall3()",
        "snippet": "  public void testFunctionCall3() throws Exception {\n    testTypes(\n        \"/** @param {number} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\");\n  }\n",
        "begin_line": 5254,
        "end_line": 5259,
        "comment": "",
        "child_ranges": [
            "(line 5255,col 5)-(line 5258,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall4()",
        "snippet": "  public void testFunctionCall4() throws Exception {\n    testTypes(\n        \"/** @param {string} x \\n * @constructor */ \" +\n        \"var Foo = function(x) { this.bar.call(null, x); };\" +\n        \"/** @type {function(number)} */ Foo.prototype.bar;\",\n        \"actual parameter 2 of this.bar.call \" +\n        \"does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5261,
        "end_line": 5270,
        "comment": "",
        "child_ranges": [
            "(line 5262,col 5)-(line 5269,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall5()",
        "snippet": "  public void testFunctionCall5() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.call(this, x); };\");\n  }\n",
        "begin_line": 5272,
        "end_line": 5276,
        "comment": "",
        "child_ranges": [
            "(line 5273,col 5)-(line 5275,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall6()",
        "snippet": "  public void testFunctionCall6() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @constructor */ \" +\n        \"var Foo = function(handler) { handler.apply(this, x); };\");\n  }\n",
        "begin_line": 5278,
        "end_line": 5282,
        "comment": "",
        "child_ranges": [
            "(line 5279,col 5)-(line 5281,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall7()",
        "snippet": "  public void testFunctionCall7() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.call(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 5284,
        "end_line": 5290,
        "comment": "",
        "child_ranges": [
            "(line 5285,col 5)-(line 5289,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionCall8()",
        "snippet": "  public void testFunctionCall8() throws Exception {\n    testTypes(\n        \"/** @param {Function} handler \\n * @param {Object} opt_context */ \" +\n        \"var Foo = function(handler, opt_context) { \" +\n        \"  handler.apply(opt_context, x);\" +\n        \"};\");\n  }\n",
        "begin_line": 5292,
        "end_line": 5298,
        "comment": "",
        "child_ranges": [
            "(line 5293,col 5)-(line 5297,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast2()",
        "snippet": "  public void testCast2() throws Exception {\n    // can upcast to a base type.\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n @extends {base} */function derived() {}\\n\" +\n        \"/** @type {base} */ var baz = new derived();\\n\");\n  }\n",
        "begin_line": 5300,
        "end_line": 5305,
        "comment": "",
        "child_ranges": [
            "(line 5302,col 5)-(line 5304,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast3()",
        "snippet": "  public void testCast3() throws Exception {\n    // cannot downcast\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = new base();\\n\",\n        \"initializing variable\\n\" +\n        \"found   : base\\n\" +\n        \"required: derived\");\n  }\n",
        "begin_line": 5307,
        "end_line": 5315,
        "comment": "",
        "child_ranges": [
            "(line 5309,col 5)-(line 5314,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast4()",
        "snippet": "  public void testCast4() throws Exception {\n    // downcast must be explicit\n    testTypes(\"/** @constructor */function base() {}\\n\" +\n        \"/** @constructor\\n * @extends {base} */function derived() {}\\n\" +\n        \"/** @type {!derived} */ var baz = \" +\n        \"/** @type {!derived} */(new base());\\n\");\n  }\n",
        "begin_line": 5317,
        "end_line": 5323,
        "comment": "",
        "child_ranges": [
            "(line 5319,col 5)-(line 5322,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast5()",
        "snippet": "  public void testCast5() throws Exception {\n    // cannot explicitly cast to an unrelated type\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor */function bar() {}\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\",\n        \"invalid cast - must be a subtype or supertype\\n\" +\n        \"from: bar\\n\" +\n        \"to  : foo\");\n  }\n",
        "begin_line": 5325,
        "end_line": 5333,
        "comment": "",
        "child_ranges": [
            "(line 5327,col 5)-(line 5332,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast6()",
        "snippet": "  public void testCast6() throws Exception {\n    // can explicitly cast to a subtype or supertype\n    testTypes(\"/** @constructor */function foo() {}\\n\" +\n        \"/** @constructor \\n @extends foo */function bar() {}\\n\" +\n        \"var baz = /** @type {!bar} */(new bar);\\n\" +\n        \"var baz = /** @type {!foo} */(new foo);\\n\" +\n        \"var baz = /** @type {bar} */(new bar);\\n\" +\n        \"var baz = /** @type {foo} */(new foo);\\n\" +\n        \"var baz = /** @type {!foo} */(new bar);\\n\" +\n        \"var baz = /** @type {!bar} */(new foo);\\n\" +\n        \"var baz = /** @type {foo} */(new bar);\\n\" +\n        \"var baz = /** @type {bar} */(new foo);\\n\");\n  }\n",
        "begin_line": 5335,
        "end_line": 5347,
        "comment": "",
        "child_ranges": [
            "(line 5337,col 5)-(line 5346,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast7()",
        "snippet": "  public void testCast7() throws Exception {\n    testTypes(\"var x = /** @type {foo} */ (new Object());\",\n        \"Parse error. Unknown type foo\");\n  }\n",
        "begin_line": 5349,
        "end_line": 5352,
        "comment": "",
        "child_ranges": [
            "(line 5350,col 5)-(line 5351,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast8()",
        "snippet": "  public void testCast8() throws Exception {\n    testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Parse error. Unknown type foo\");\n  }\n",
        "begin_line": 5354,
        "end_line": 5357,
        "comment": "",
        "child_ranges": [
            "(line 5355,col 5)-(line 5356,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast9()",
        "snippet": "  public void testCast9() throws Exception {\n    testTypes(\"var foo = {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Parse error. Unknown type foo\");\n  }\n",
        "begin_line": 5359,
        "end_line": 5363,
        "comment": "",
        "child_ranges": [
            "(line 5360,col 5)-(line 5362,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast10()",
        "snippet": "  public void testCast10() throws Exception {\n    testTypes(\"var foo = function() {};\" +\n        \"function f() { return /** @type {foo} */ (new Object()); }\",\n        \"Parse error. Unknown type foo\");\n  }\n",
        "begin_line": 5365,
        "end_line": 5369,
        "comment": "",
        "child_ranges": [
            "(line 5366,col 5)-(line 5368,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast11()",
        "snippet": "  public void testCast11() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Parse error. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5371,
        "end_line": 5375,
        "comment": "",
        "child_ranges": [
            "(line 5372,col 5)-(line 5374,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast12()",
        "snippet": "  public void testCast12() throws Exception {\n    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Parse error. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5377,
        "end_line": 5381,
        "comment": "",
        "child_ranges": [
            "(line 5378,col 5)-(line 5380,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast13()",
        "snippet": "  public void testCast13() throws Exception {\n    // Test to make sure that the forward-declaration still allows for\n    // a warning.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n        \"goog.foo = function() {};\" +\n        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n        \"Parse error. Unknown type goog.foo\");\n  }\n",
        "begin_line": 5383,
        "end_line": 5391,
        "comment": "",
        "child_ranges": [
            "(line 5386,col 5)-(line 5390,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast14()",
        "snippet": "  public void testCast14() throws Exception {\n    // Test to make sure that the forward-declaration still prevents\n    // some warnings.\n    testClosureTypes(\"var goog = {}; \" +\n        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n        null);\n  }\n",
        "begin_line": 5393,
        "end_line": 5400,
        "comment": "",
        "child_ranges": [
            "(line 5396,col 5)-(line 5399,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCast15()",
        "snippet": "  public void testCast15() throws Exception {\n    // This fixes a bug where a type cast on an object literal\n    // would cause a runtime cast exception if the node was visited\n    // more than once.\n    //\n    // Some code assumes that an object literal must have a object type,\n    // while because of the cast, it could have any type (including\n    // a union).\n    testTypes(\n        \"for (var i = 0; i < 10; i++) {\" +\n          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n          \"/** @param {boolean} x */ function f(x) {}\" +\n          \"f(x.foo);\" +\n          \"f([].foo);\" +\n        \"}\",\n        \"Property foo never defined on Array\");\n  }\n",
        "begin_line": 5402,
        "end_line": 5418,
        "comment": "",
        "child_ranges": [
            "(line 5410,col 5)-(line 5417,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNestedCasts()",
        "snippet": "  public void testNestedCasts() throws Exception {\n    testTypes(\"/** @constructor */var T = function() {};\\n\" +\n        \"/** @constructor */var V = function() {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {T|V}\\n\" +\n        \"*/\\n\" +\n        \"function f(b) { return b ? new T() : new V(); }\\n\" +\n        \"/**\\n\" +\n        \"* @param {boolean} b\\n\" +\n        \"* @return {boolean|undefined}\\n\" +\n        \"*/\\n\" +\n        \"function g(b) { return b ? true : undefined; }\\n\" +\n        \"/* @return {T} */\\n\" +\n        \"function h() {\\n\" +\n        \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5420,
        "end_line": 5437,
        "comment": "",
        "child_ranges": [
            "(line 5421,col 5)-(line 5436,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast1()",
        "snippet": "  public void testNativeCast1() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(String(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5439,
        "end_line": 5446,
        "comment": "",
        "child_ranges": [
            "(line 5440,col 5)-(line 5445,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast2()",
        "snippet": "  public void testNativeCast2() throws Exception {\n    testTypes(\n        \"/** @param {string} x */ function f(x) {}\" +\n        \"f(Number(true));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 5448,
        "end_line": 5455,
        "comment": "",
        "child_ranges": [
            "(line 5449,col 5)-(line 5454,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast3()",
        "snippet": "  public void testNativeCast3() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Boolean(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : boolean\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5457,
        "end_line": 5464,
        "comment": "",
        "child_ranges": [
            "(line 5458,col 5)-(line 5463,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNativeCast4()",
        "snippet": "  public void testNativeCast4() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"f(Error(''));\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : Error\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 5466,
        "end_line": 5473,
        "comment": "",
        "child_ranges": [
            "(line 5467,col 5)-(line 5472,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadConstructorCall()",
        "snippet": "  public void testBadConstructorCall() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo();\",\n        \"Constructor function (this:Foo): undefined should be called \" +\n        \"with the \\\"new\\\" keyword\");\n  }\n",
        "begin_line": 5475,
        "end_line": 5481,
        "comment": "",
        "child_ranges": [
            "(line 5476,col 5)-(line 5480,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeof()",
        "snippet": "  public void testTypeof() throws Exception {\n    testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n  }\n",
        "begin_line": 5483,
        "end_line": 5485,
        "comment": "",
        "child_ranges": [
            "(line 5484,col 5)-(line 5484,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType1()",
        "snippet": "  public void testConstructorType1() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\" +\n        \"/**@type{!Foo}*/var f = new Date();\",\n        \"initializing variable\\n\" +\n        \"found   : Date\\n\" +\n        \"required: Foo\");\n  }\n",
        "begin_line": 5487,
        "end_line": 5493,
        "comment": "",
        "child_ranges": [
            "(line 5488,col 5)-(line 5492,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType2()",
        "snippet": "  public void testConstructorType2() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\");\n  }\n",
        "begin_line": 5495,
        "end_line": 5501,
        "comment": "",
        "child_ranges": [
            "(line 5496,col 5)-(line 5500,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType3()",
        "snippet": "  public void testConstructorType3() throws Exception {\n    // Reverse the declaration order so that we know that Foo is getting set\n    // even on an out-of-order declaration sequence.\n    testTypes(\"/**@type{Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{Number}*/var n = f.bar;\" +\n        \"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\");\n  }\n",
        "begin_line": 5503,
        "end_line": 5511,
        "comment": "",
        "child_ranges": [
            "(line 5506,col 5)-(line 5510,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType4()",
        "snippet": "  public void testConstructorType4() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){\\n\" +\n        \"/**@type{!Number}*/this.bar = new Number(5);\\n\" +\n        \"}\\n\" +\n        \"/**@type{!Foo}*/var f = new Foo();\\n\" +\n        \"/**@type{!String}*/var n = f.bar;\",\n        \"initializing variable\\n\" +\n        \"found   : Number\\n\" +\n        \"required: String\");\n  }\n",
        "begin_line": 5513,
        "end_line": 5522,
        "comment": "",
        "child_ranges": [
            "(line 5514,col 5)-(line 5521,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType5()",
        "snippet": "  public void testConstructorType5() throws Exception {\n    testTypes(\"/**@constructor*/function Foo(){}\\n\" +\n        \"if (Foo){}\\n\");\n  }\n",
        "begin_line": 5524,
        "end_line": 5527,
        "comment": "",
        "child_ranges": [
            "(line 5525,col 5)-(line 5526,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType6()",
        "snippet": "  public void testConstructorType6() throws Exception {\n    testTypes(\"/** @constructor */\\n\" +\n        \"function bar() {}\\n\" +\n        \"function _foo() {\\n\" +\n        \" /** @param {bar} x */\\n\" +\n        \"  function f(x) {}\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 5529,
        "end_line": 5536,
        "comment": "",
        "child_ranges": [
            "(line 5530,col 5)-(line 5535,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testConstructorType7()",
        "snippet": "  public void testConstructorType7() throws Exception {\n    TypeCheckResult p =\n        parseAndTypeCheckWithScope(\"/** @constructor */function A(){};\");\n\n    JSType type = p.scope.getVar(\"A\").getType();\n    assertTrue(type instanceof FunctionType);\n    FunctionType fType = (FunctionType) type;\n    assertEquals(\"A\", fType.getReferenceName());\n  }\n",
        "begin_line": 5538,
        "end_line": 5546,
        "comment": "",
        "child_ranges": [
            "(line 5539,col 5)-(line 5540,col 73)",
            "(line 5542,col 5)-(line 5542,col 48)",
            "(line 5543,col 5)-(line 5543,col 45)",
            "(line 5544,col 5)-(line 5544,col 45)",
            "(line 5545,col 5)-(line 5545,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType1()",
        "snippet": "  public void testAnonymousType1() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @constructor */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5548,
        "end_line": 5552,
        "comment": "",
        "child_ranges": [
            "(line 5549,col 5)-(line 5551,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType2()",
        "snippet": "  public void testAnonymousType2() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @interface */\\n\" +\n        \"f().bar = function() {};\");\n  }\n",
        "begin_line": 5554,
        "end_line": 5558,
        "comment": "",
        "child_ranges": [
            "(line 5555,col 5)-(line 5557,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnonymousType3()",
        "snippet": "  public void testAnonymousType3() throws Exception {\n    testTypes(\"function f() {}\" +\n        \"/** @enum */\\n\" +\n        \"f().bar = {FOO: 1};\");\n  }\n",
        "begin_line": 5560,
        "end_line": 5564,
        "comment": "",
        "child_ranges": [
            "(line 5561,col 5)-(line 5563,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang1()",
        "snippet": "  public void testBang1() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : (Object|null)\\n\" +\n        \"required: Object\");\n  }\n",
        "begin_line": 5566,
        "end_line": 5572,
        "comment": "",
        "child_ranges": [
            "(line 5567,col 5)-(line 5571,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang2()",
        "snippet": "  public void testBang2() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return x ? x : new Object(); }\");\n  }\n",
        "begin_line": 5574,
        "end_line": 5577,
        "comment": "",
        "child_ranges": [
            "(line 5575,col 5)-(line 5576,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang3()",
        "snippet": "  public void testBang3() throws Exception {\n    testTypes(\"/** @param {Object} x\\n@return {!Object} */\\n\" +\n        \"function f(x) { return /** @type {!Object} */ (x); }\");\n  }\n",
        "begin_line": 5579,
        "end_line": 5582,
        "comment": "",
        "child_ranges": [
            "(line 5580,col 5)-(line 5581,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang4()",
        "snippet": "  public void testBang4() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) {\\n\" +\n        \"if (typeof x != 'undefined') { return x == y; }\\n\" +\n        \"else { return x != y; }\\n}\");\n  }\n",
        "begin_line": 5584,
        "end_line": 5589,
        "comment": "",
        "child_ranges": [
            "(line 5585,col 5)-(line 5588,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang5()",
        "snippet": "  public void testBang5() throws Exception {\n    testTypes(\"/**@param {Object} x\\n@param {Object} y\\n@return {boolean}*/\\n\" +\n        \"function f(x, y) { return !!x && x == y; }\");\n  }\n",
        "begin_line": 5591,
        "end_line": 5594,
        "comment": "",
        "child_ranges": [
            "(line 5592,col 5)-(line 5593,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang6()",
        "snippet": "  public void testBang6() throws Exception {\n    testTypes(\"/** @param {Object?} x\\n@return {Object} */\\n\" +\n        \"function f(x) { return x; }\");\n  }\n",
        "begin_line": 5596,
        "end_line": 5599,
        "comment": "",
        "child_ranges": [
            "(line 5597,col 5)-(line 5598,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBang7()",
        "snippet": "  public void testBang7() throws Exception {\n    testTypes(\"/**@param {(Object,string,null)} x\\n\" +\n        \"@return {(Object,string)}*/function f(x) { return x; }\");\n  }\n",
        "begin_line": 5601,
        "end_line": 5604,
        "comment": "",
        "child_ranges": [
            "(line 5602,col 5)-(line 5603,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
        "snippet": "  public void testDefinePropertyOnNullableObject1() throws Exception {\n    testTypes(\"/** @type {Object} */ var n = {};\\n\" +\n        \"/** @type {number} */ n.x = 1;\\n\" +\n        \"/** @return {boolean} */function f() { return n.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5606,
        "end_line": 5613,
        "comment": "",
        "child_ranges": [
            "(line 5607,col 5)-(line 5612,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
        "snippet": "  public void testDefinePropertyOnNullableObject2() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @param {T} t\\n@return {boolean} */function f(t) {\\n\" +\n        \"t.x = 1; return t.x; }\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: boolean\");\n  }\n",
        "begin_line": 5615,
        "end_line": 5622,
        "comment": "",
        "child_ranges": [
            "(line 5616,col 5)-(line 5621,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
        "snippet": "  public void testUnknownConstructorInstanceType1() throws Exception {\n    testTypes(\"/** @return Array */ function g(f) { return new f(); }\");\n  }\n",
        "begin_line": 5624,
        "end_line": 5626,
        "comment": "",
        "child_ranges": [
            "(line 5625,col 5)-(line 5625,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
        "snippet": "  public void testUnknownConstructorInstanceType2() throws Exception {\n    testTypes(\"function g(f) { return /** @type Array */ new f(); }\");\n  }\n",
        "begin_line": 5628,
        "end_line": 5630,
        "comment": "",
        "child_ranges": [
            "(line 5629,col 5)-(line 5629,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
        "snippet": "  public void testUnknownConstructorInstanceType3() throws Exception {\n    testTypes(\"function g(f) { var x = new f(); x.a = 1; return x; }\");\n  }\n",
        "begin_line": 5632,
        "end_line": 5634,
        "comment": "",
        "child_ranges": [
            "(line 5633,col 5)-(line 5633,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
        "snippet": "  public void testUnknownPrototypeChain() throws Exception {\n    testTypes(\"/**\\n\" +\n              \"* @param {Object} co\\n\" +\n              \" * @return {Object}\\n\" +\n              \" */\\n\" +\n              \"function inst(co) {\\n\" +\n              \" /** @constructor */\\n\" +\n              \" var c = function() {};\\n\" +\n              \" c.prototype = co.prototype;\\n\" +\n              \" return new c;\\n\" +\n              \"}\");\n  }\n",
        "begin_line": 5636,
        "end_line": 5647,
        "comment": "",
        "child_ranges": [
            "(line 5637,col 5)-(line 5646,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNamespacedConstructor()",
        "snippet": "  public void testNamespacedConstructor() throws Exception {\n    Node root = parseAndTypeCheck(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.MyClass = function() {};\" +\n        \"/** @return {!goog.MyClass} */ \" +\n        \"function foo() { return new goog.MyClass(); }\");\n\n    JSType typeOfFoo = root.getLastChild().getJSType();\n    assert(typeOfFoo instanceof FunctionType);\n\n    JSType retType = ((FunctionType) typeOfFoo).getReturnType();\n    assert(retType instanceof ObjectType);\n    assertEquals(\"goog.MyClass\", ((ObjectType) retType).getReferenceName());\n  }\n",
        "begin_line": 5649,
        "end_line": 5662,
        "comment": "",
        "child_ranges": [
            "(line 5650,col 5)-(line 5654,col 57)",
            "(line 5656,col 5)-(line 5656,col 55)",
            "(line 5657,col 5)-(line 5657,col 46)",
            "(line 5659,col 5)-(line 5659,col 64)",
            "(line 5660,col 5)-(line 5660,col 42)",
            "(line 5661,col 5)-(line 5661,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testComplexNamespace()",
        "snippet": "  public void testComplexNamespace() throws Exception {\n    String js =\n      \"var goog = {};\" +\n      \"goog.foo = {};\" +\n      \"goog.foo.bar = 5;\";\n\n    TypeCheckResult p = parseAndTypeCheckWithScope(js);\n\n    // goog type in the scope\n    JSType googScopeType = p.scope.getVar(\"goog\").getType();\n    assertTrue(googScopeType instanceof ObjectType);\n    assertTrue(\"foo property not present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"foo\"));\n    assertFalse(\"bar property present on goog type\",\n        ((ObjectType) googScopeType).hasProperty(\"bar\"));\n\n    // goog type on the VAR node\n    Node varNode = p.root.getFirstChild();\n    assertEquals(Token.VAR, varNode.getType());\n    JSType googNodeType = varNode.getFirstChild().getJSType();\n    assertTrue(googNodeType instanceof ObjectType);\n\n    // goog scope type and goog type on VAR node must be the same\n    assertTrue(googScopeType == googNodeType);\n\n    // goog type on the left of the GETPROP node (under fist ASSIGN)\n    Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo1.getType());\n    assertEquals(\"goog\", getpropFoo1.getFirstChild().getString());\n    JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo1Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo1Type == googScopeType);\n\n    // the foo property should be defined on goog\n    JSType googFooType = ((ObjectType) googScopeType).getPropertyType(\"foo\");\n    assertTrue(googFooType instanceof ObjectType);\n\n    // goog type on the left of the GETPROP lower level node\n    // (under second ASSIGN)\n    Node getpropFoo2 = varNode.getNext().getNext()\n        .getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.GETPROP, getpropFoo2.getType());\n    assertEquals(\"goog\", getpropFoo2.getFirstChild().getString());\n    JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType();\n    assertTrue(googGetpropFoo2Type instanceof ObjectType);\n\n    // still the same type as the one on the variable\n    assertTrue(googGetpropFoo2Type == googScopeType);\n\n    // goog.foo type on the left of the top level GETPROP node\n    // (under second ASSIGN)\n    JSType googFooGetprop2Type = getpropFoo2.getJSType();\n    assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",\n        googFooGetprop2Type instanceof ObjectType);\n    ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type;\n    assertFalse(\"foo property present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"foo\"));\n    assertTrue(\"bar property not present on goog.foo type\",\n        googFooGetprop2ObjectType.hasProperty(\"bar\"));\n    assertEquals(\"bar property on goog.foo type incorrectly inferred\",\n        NUMBER_TYPE, googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n  }\n",
        "begin_line": 5664,
        "end_line": 5727,
        "comment": "",
        "child_ranges": [
            "(line 5665,col 5)-(line 5668,col 26)",
            "(line 5670,col 5)-(line 5670,col 55)",
            "(line 5673,col 5)-(line 5673,col 60)",
            "(line 5674,col 5)-(line 5674,col 52)",
            "(line 5675,col 5)-(line 5676,col 57)",
            "(line 5677,col 5)-(line 5678,col 57)",
            "(line 5681,col 5)-(line 5681,col 42)",
            "(line 5682,col 5)-(line 5682,col 47)",
            "(line 5683,col 5)-(line 5683,col 62)",
            "(line 5684,col 5)-(line 5684,col 51)",
            "(line 5687,col 5)-(line 5687,col 46)",
            "(line 5690,col 5)-(line 5690,col 73)",
            "(line 5691,col 5)-(line 5691,col 55)",
            "(line 5692,col 5)-(line 5692,col 66)",
            "(line 5693,col 5)-(line 5693,col 73)",
            "(line 5694,col 5)-(line 5694,col 58)",
            "(line 5697,col 5)-(line 5697,col 53)",
            "(line 5700,col 5)-(line 5700,col 77)",
            "(line 5701,col 5)-(line 5701,col 50)",
            "(line 5705,col 5)-(line 5706,col 57)",
            "(line 5707,col 5)-(line 5707,col 55)",
            "(line 5708,col 5)-(line 5708,col 66)",
            "(line 5709,col 5)-(line 5709,col 73)",
            "(line 5710,col 5)-(line 5710,col 58)",
            "(line 5713,col 5)-(line 5713,col 53)",
            "(line 5717,col 5)-(line 5717,col 57)",
            "(line 5718,col 5)-(line 5719,col 51)",
            "(line 5720,col 5)-(line 5720,col 76)",
            "(line 5721,col 5)-(line 5722,col 54)",
            "(line 5723,col 5)-(line 5724,col 54)",
            "(line 5725,col 5)-(line 5726,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype.m1 = 5\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5729,
        "end_line": 5739,
        "comment": "",
        "child_ranges": [
            "(line 5731,col 5)-(line 5733,col 30)",
            "(line 5735,col 5)-(line 5735,col 55)",
            "(line 5736,col 5)-(line 5737,col 43)",
            "(line 5738,col 5)-(line 5738,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"goog.A = /** @constructor */function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5741,
        "end_line": 5749,
        "comment": "",
        "child_ranges": [
            "(line 5743,col 5)-(line 5746,col 54)",
            "(line 5748,col 5)-(line 5748,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
        "snippet": "  public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2()\n      throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.A = function() {};\" +\n        \"/** @type number */goog.A.prototype.m1 = 5\");\n\n    testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n  }\n",
        "begin_line": 5751,
        "end_line": 5759,
        "comment": "",
        "child_ranges": [
            "(line 5753,col 5)-(line 5756,col 54)",
            "(line 5758,col 5)-(line 5758,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
        "snippet": "  private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(\n      TypeCheckResult p) {\n    ObjectType goog = (ObjectType) p.scope.getVar(\"goog\").getType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, goog.getPropertiesCount());\n    JSType googA = goog.getPropertyType(\"A\");\n    assertNotNull(googA);\n    assertTrue(googA instanceof FunctionType);\n    FunctionType googAFunction = (FunctionType) googA;\n    ObjectType classA = googAFunction.getInstanceType();\n    assertEquals(NATIVE_PROPERTIES_COUNT + 1, classA.getPropertiesCount());\n    checkObjectType(classA, \"m1\", NUMBER_TYPE);\n  }\n",
        "begin_line": 5761,
        "end_line": 5772,
        "comment": "",
        "child_ranges": [
            "(line 5763,col 5)-(line 5763,col 68)",
            "(line 5764,col 5)-(line 5764,col 73)",
            "(line 5765,col 5)-(line 5765,col 45)",
            "(line 5766,col 5)-(line 5766,col 25)",
            "(line 5767,col 5)-(line 5767,col 46)",
            "(line 5768,col 5)-(line 5768,col 54)",
            "(line 5769,col 5)-(line 5769,col 56)",
            "(line 5770,col 5)-(line 5770,col 75)",
            "(line 5771,col 5)-(line 5771,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
        "snippet": "  public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 2,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5774,
        "end_line": 5785,
        "comment": "",
        "child_ranges": [
            "(line 5776,col 5)-(line 5778,col 43)",
            "(line 5780,col 5)-(line 5780,col 55)",
            "(line 5781,col 5)-(line 5782,col 43)",
            "(line 5783,col 5)-(line 5783,col 53)",
            "(line 5784,col 5)-(line 5784,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
        "snippet": "  public void testDontAddMethodsIfNoConstructor()\n      throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true}\");\n\n    JSType functionAType = js1Node.getFirstChild().getJSType();\n    assertEquals(\"function (): undefined\", functionAType.toString());\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n    assertEquals(UNKNOWN_TYPE,\n        U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n  }\n",
        "begin_line": 5787,
        "end_line": 5799,
        "comment": "",
        "child_ranges": [
            "(line 5789,col 5)-(line 5791,col 43)",
            "(line 5793,col 5)-(line 5793,col 63)",
            "(line 5794,col 5)-(line 5794,col 69)",
            "(line 5795,col 5)-(line 5796,col 49)",
            "(line 5797,col 5)-(line 5798,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionAssignement()",
        "snippet": "  public void testFunctionAssignement() throws Exception {\n    testTypes(\"/**\" +\n        \"* @param {string} ph0\" +\n        \"* @param {string} ph1\" +\n        \"* @return {string}\" +\n        \"*/\" +\n        \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return ''}\" +\n        \"/** @type {Function} */\" +\n        \"var MSG_CALENDAR_ADD_ERROR = MSG_CALENDAR_ACCESS_ERROR;\");\n  }\n",
        "begin_line": 5801,
        "end_line": 5810,
        "comment": "",
        "child_ranges": [
            "(line 5802,col 5)-(line 5809,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
        "snippet": "  public void testAddMethodsPrototypeTwoWays() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {}\" +\n        \"A.prototype = {m1: 5, m2: true};\" +\n        \"A.prototype.m3 = 'third property!';\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(\"A\", instanceType.toString());\n    assertEquals(NATIVE_PROPERTIES_COUNT + 3,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m2\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m3\", STRING_TYPE);\n  }\n",
        "begin_line": 5812,
        "end_line": 5825,
        "comment": "",
        "child_ranges": [
            "(line 5813,col 5)-(line 5816,col 47)",
            "(line 5818,col 5)-(line 5818,col 55)",
            "(line 5819,col 5)-(line 5819,col 47)",
            "(line 5820,col 5)-(line 5821,col 43)",
            "(line 5822,col 5)-(line 5822,col 53)",
            "(line 5823,col 5)-(line 5823,col 54)",
            "(line 5824,col 5)-(line 5824,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
        "snippet": "  public void testPrototypePropertyTypes() throws Exception {\n    Node js1Node = parseAndTypeCheck(\n        \"/** @constructor */function A() {\\n\" +\n        \"  /** @type string */ this.m1;\\n\" +\n        \"  /** @type Object? */ this.m2 = {};\\n\" +\n        \"  /** @type boolean */ this.m3;\\n\" +\n        \"}\\n\" +\n        \"/** @type string */ A.prototype.m4;\\n\" +\n        \"/** @type number */ A.prototype.m5 = 0;\\n\" +\n        \"/** @type boolean */ A.prototype.m6;\\n\");\n\n    ObjectType instanceType = getInstanceType(js1Node);\n    assertEquals(NATIVE_PROPERTIES_COUNT + 6,\n        instanceType.getPropertiesCount());\n    checkObjectType(instanceType, \"m1\", STRING_TYPE);\n    checkObjectType(instanceType, \"m2\",\n        createUnionType(OBJECT_TYPE, NULL_TYPE));\n    checkObjectType(instanceType, \"m3\", BOOLEAN_TYPE);\n    checkObjectType(instanceType, \"m4\", STRING_TYPE);\n    checkObjectType(instanceType, \"m5\", NUMBER_TYPE);\n    checkObjectType(instanceType, \"m6\", BOOLEAN_TYPE);\n  }\n",
        "begin_line": 5827,
        "end_line": 5848,
        "comment": "",
        "child_ranges": [
            "(line 5828,col 5)-(line 5836,col 50)",
            "(line 5838,col 5)-(line 5838,col 55)",
            "(line 5839,col 5)-(line 5840,col 43)",
            "(line 5841,col 5)-(line 5841,col 53)",
            "(line 5842,col 5)-(line 5843,col 49)",
            "(line 5844,col 5)-(line 5844,col 54)",
            "(line 5845,col 5)-(line 5845,col 53)",
            "(line 5846,col 5)-(line 5846,col 53)",
            "(line 5847,col 5)-(line 5847,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
        "snippet": "  public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n    Node node = parseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n    assertEquals(STRING_TYPE, node.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5850,
        "end_line": 5853,
        "comment": "",
        "child_ranges": [
            "(line 5851,col 5)-(line 5851,col 53)",
            "(line 5852,col 5)-(line 5852,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
        "snippet": "  public void testDeclareBuiltInConstructor() throws Exception {\n    // Built-in prototype properties should be accessible\n    // even if the built-in constructor is declared.\n    Node node = parseAndTypeCheck(\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"(new String(\\\"x\\\")).charAt(0)\");\n    assertEquals(STRING_TYPE, node.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5855,
        "end_line": 5862,
        "comment": "",
        "child_ranges": [
            "(line 5858,col 5)-(line 5860,col 41)",
            "(line 5861,col 5)-(line 5861,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
        "snippet": "  public void testExtendBuiltInType1() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n1 = parseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n    assertEquals(STRING_TYPE, n1.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5864,
        "end_line": 5875,
        "comment": "",
        "child_ranges": [
            "(line 5865,col 5)-(line 5872,col 70)",
            "(line 5873,col 5)-(line 5873,col 78)",
            "(line 5874,col 5)-(line 5874,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
        "snippet": "  public void testExtendBuiltInType2() throws Exception {\n    String externs =\n        \"/** @constructor */ var String = function(opt_str) {};\\n\" +\n        \"/**\\n\" +\n        \"* @param {number} start\\n\" +\n        \"* @param {number} opt_length\\n\"  +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"String.prototype.substr = function(start, opt_length) {};\\n\";\n    Node n2 = parseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n    assertEquals(STRING_TYPE, n2.getLastChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 5877,
        "end_line": 5888,
        "comment": "",
        "child_ranges": [
            "(line 5878,col 5)-(line 5885,col 70)",
            "(line 5886,col 5)-(line 5886,col 64)",
            "(line 5887,col 5)-(line 5887,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction1()",
        "snippet": "  public void testExtendFunction1() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(new Function()).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5890,
        "end_line": 5896,
        "comment": "",
        "child_ranges": [
            "(line 5891,col 5)-(line 5893,col 33)",
            "(line 5894,col 5)-(line 5894,col 62)",
            "(line 5895,col 5)-(line 5895,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testExtendFunction2()",
        "snippet": "  public void testExtendFunction2() throws Exception {\n    Node n = parseAndTypeCheck(\"/**@return {number}*/Function.prototype.f = \" +\n        \"function() { return 1; };\\n\" +\n        \"(function() {}).f();\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertEquals(NUMBER_TYPE, type);\n  }\n",
        "begin_line": 5898,
        "end_line": 5904,
        "comment": "",
        "child_ranges": [
            "(line 5899,col 5)-(line 5901,col 32)",
            "(line 5902,col 5)-(line 5902,col 62)",
            "(line 5903,col 5)-(line 5903,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck1()",
        "snippet": "  public void testInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5906,
        "end_line": 5911,
        "comment": "",
        "child_ranges": [
            "(line 5907,col 5)-(line 5910,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck2()",
        "snippet": "  public void testInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"property foo not defined on any superclass of Sub\");\n  }\n",
        "begin_line": 5913,
        "end_line": 5919,
        "comment": "",
        "child_ranges": [
            "(line 5914,col 5)-(line 5918,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck3()",
        "snippet": "  public void testInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5921,
        "end_line": 5929,
        "comment": "",
        "child_ranges": [
            "(line 5922,col 5)-(line 5928,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck4()",
        "snippet": "  public void testInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5931,
        "end_line": 5937,
        "comment": "",
        "child_ranges": [
            "(line 5932,col 5)-(line 5936,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck5()",
        "snippet": "  public void testInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on superclass Root; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5939,
        "end_line": 5948,
        "comment": "",
        "child_ranges": [
            "(line 5940,col 5)-(line 5947,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck6()",
        "snippet": "  public void testInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 5950,
        "end_line": 5957,
        "comment": "",
        "child_ranges": [
            "(line 5951,col 5)-(line 5956,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck7()",
        "snippet": "  public void testInheritanceCheck7() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"goog.Sub.prototype.foo = 5;\",\n        \"property foo already defined on superclass goog.Super; \" +\n        \"use @override to override it\");\n  }\n",
        "begin_line": 5959,
        "end_line": 5968,
        "comment": "",
        "child_ranges": [
            "(line 5960,col 5)-(line 5967,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck8()",
        "snippet": "  public void testInheritanceCheck8() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = 5;\");\n  }\n",
        "begin_line": 5970,
        "end_line": 5977,
        "comment": "",
        "child_ranges": [
            "(line 5971,col 5)-(line 5976,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
        "snippet": "  public void testInheritanceCheck9_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"Super.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 5979,
        "end_line": 5986,
        "comment": "",
        "child_ranges": [
            "(line 5980,col 5)-(line 5985,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
        "snippet": "  public void testInheritanceCheck9_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 5988,
        "end_line": 5995,
        "comment": "",
        "child_ranges": [
            "(line 5989,col 5)-(line 5994,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
        "snippet": "  public void testInheritanceCheck9_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @return number */Super.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 5997,
        "end_line": 6008,
        "comment": "",
        "child_ranges": [
            "(line 5998,col 5)-(line 6007,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
        "snippet": "  public void testInheritanceCheck10_1() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"Root.prototype.foo = function() { return 3; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\");\n  }\n",
        "begin_line": 6010,
        "end_line": 6018,
        "comment": "",
        "child_ranges": [
            "(line 6011,col 5)-(line 6017,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
        "snippet": "  public void testInheritanceCheck10_2() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo =\\n\" +\n        \"function() {};\");\n  }\n",
        "begin_line": 6020,
        "end_line": 6028,
        "comment": "",
        "child_ranges": [
            "(line 6021,col 5)-(line 6027,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
        "snippet": "  public void testInheritanceCheck10_3() throws Exception {\n    testTypes(\n        \"/** @constructor */function Root() {};\" +\n        \"/** @return number */Root.prototype.foo = function() { return 1; };\" +\n        \"/** @constructor\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n @return string */Sub.prototype.foo =\\n\" +\n        \"function() { return \\\"some string\\\" };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Root\\n\" +\n        \"original: function (this:Root): number\\n\" +\n        \"override: function (this:Sub): string\");\n  }\n",
        "begin_line": 6030,
        "end_line": 6042,
        "comment": "",
        "child_ranges": [
            "(line 6031,col 5)-(line 6041,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
        "snippet": "  public void testInterfaceInheritanceCheck11() throws Exception {\n    testTypes(\n        \"/** @constructor */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @extends {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 6044,
        "end_line": 6055,
        "comment": "",
        "child_ranges": [
            "(line 6045,col 5)-(line 6054,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck12()",
        "snippet": "  public void testInheritanceCheck12() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */goog.Super = function() {};\" +\n        \"goog.Super.prototype.foo = 3;\" +\n        \"/** @constructor\\n @extends {goog.Super} */goog.Sub = function() {};\" +\n        \"/** @override */goog.Sub.prototype.foo = \\\"some string\\\";\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from superclass goog.Super\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 6057,
        "end_line": 6068,
        "comment": "",
        "child_ranges": [
            "(line 6058,col 5)-(line 6067,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck13()",
        "snippet": "  public void testInheritanceCheck13() throws Exception {\n    testTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Parse error. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 6070,
        "end_line": 6076,
        "comment": "",
        "child_ranges": [
            "(line 6071,col 5)-(line 6075,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInheritanceCheck14()",
        "snippet": "  public void testInheritanceCheck14() throws Exception {\n    testClosureTypes(\n        \"var goog = {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Missing} */\\n\" +\n        \"goog.Super = function() {};\\n\" +\n        \"/** @constructor\\n @extends {goog.Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        \"Parse error. Unknown type goog.Missing\");\n  }\n",
        "begin_line": 6078,
        "end_line": 6086,
        "comment": "",
        "child_ranges": [
            "(line 6079,col 5)-(line 6085,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
        "snippet": "  public void testInterfaceInheritanceCheck1() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"Sub.prototype.foo = function() {};\",\n        \"property foo already defined on interface Super; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 6118,
        "end_line": 6126,
        "comment": "",
        "child_ranges": [
            "(line 6119,col 5)-(line 6125,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
        "snippet": "  public void testInterfaceInheritanceCheck2() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @desc description */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\");\n  }\n",
        "begin_line": 6128,
        "end_line": 6134,
        "comment": "",
        "child_ranges": [
            "(line 6129,col 5)-(line 6133,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
        "snippet": "  public void testInterfaceInheritanceCheck3() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @return {number} */Sub.prototype.foo = function() { return 1;};\",\n        \"property foo already defined on interface Root; use @override to \" +\n        \"override it\");\n  }\n",
        "begin_line": 6136,
        "end_line": 6145,
        "comment": "",
        "child_ranges": [
            "(line 6137,col 5)-(line 6144,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
        "snippet": "  public void testInterfaceInheritanceCheck4() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return {number} */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n * @return {number} */Sub.prototype.foo =\\n\" +\n        \"function() { return 1;};\");\n  }\n",
        "begin_line": 6147,
        "end_line": 6155,
        "comment": "",
        "child_ranges": [
            "(line 6148,col 5)-(line 6154,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
        "snippet": "  public void testInterfaceInheritanceCheck5() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @return string */Super.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 6157,
        "end_line": 6168,
        "comment": "",
        "child_ranges": [
            "(line 6158,col 5)-(line 6167,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
        "snippet": "  public void testInterfaceInheritanceCheck6() throws Exception {\n    testTypes(\n        \"/** @interface */function Root() {};\" +\n        \"/** @return string */Root.prototype.foo = function() {};\" +\n        \"/** @interface\\n @extends {Root} */function Super() {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n @return number */Sub.prototype.foo =\\n\" +\n        \"function() { return 1; };\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Root\\n\" +\n        \"original: function (this:Root): string\\n\" +\n        \"override: function (this:Sub): number\");\n  }\n",
        "begin_line": 6170,
        "end_line": 6182,
        "comment": "",
        "child_ranges": [
            "(line 6171,col 5)-(line 6181,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
        "snippet": "  public void testInterfaceInheritanceCheck7() throws Exception {\n    testTypes(\n        \"/** @interface */function Super() {};\" +\n        \"/** @param {number} bar */Super.prototype.foo = function(bar) {};\" +\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override\\n  @param {string} bar */Sub.prototype.foo =\\n\" +\n        \"function(bar) {};\",\n        \"mismatch of the foo property type and the type of the property it \" +\n        \"overrides from interface Super\\n\" +\n        \"original: function (this:Super, number): undefined\\n\" +\n        \"override: function (this:Sub, string): undefined\");\n  }\n",
        "begin_line": 6184,
        "end_line": 6195,
        "comment": "",
        "child_ranges": [
            "(line 6185,col 5)-(line 6194,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
        "snippet": "  public void testInterfaceInheritanceCheck8() throws Exception {\n    testTypes(\n        \"/** @constructor\\n @implements {Super} */function Sub() {};\" +\n        \"/** @override */Sub.prototype.foo = function() {};\",\n        new String[] {\n          \"Parse error. Unknown type Super\",\n          \"property foo not defined on any superclass of Sub\"\n        });\n  }\n",
        "begin_line": 6197,
        "end_line": 6205,
        "comment": "",
        "child_ranges": [
            "(line 6198,col 5)-(line 6204,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
        "snippet": "  public void testInterfacePropertyNotImplemented() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor\\n @implements {Int} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 6207,
        "end_line": 6213,
        "comment": "",
        "child_ranges": [
            "(line 6208,col 5)-(line 6212,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
        "snippet": "  public void testInterfacePropertyNotImplemented2() throws Exception {\n    testTypes(\n        \"/** @interface */function Int() {};\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @interface \\n @extends {Int} */function Int2() {};\" +\n        \"/** @constructor\\n @implements {Int2} */function Foo() {};\",\n        \"property foo on interface Int is not implemented by type Foo\");\n  }\n",
        "begin_line": 6215,
        "end_line": 6222,
        "comment": "",
        "child_ranges": [
            "(line 6216,col 5)-(line 6221,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
        "snippet": "  public void testStubConstructorImplementingInterface() throws Exception {\n    // This does not throw a warning for unimplemented property because Foo is\n    // just a stub.\n    testTypes(\"/** @interface */ function Int() {}\\n\" +\n        \"/** @desc description */Int.prototype.foo = function() {};\" +\n        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\");\n  }\n",
        "begin_line": 6224,
        "end_line": 6230,
        "comment": "",
        "child_ranges": [
            "(line 6227,col 5)-(line 6229,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() throws Exception {\n    Node n = parseAndTypeCheck(\"var a = {m1: 7, m2: 'hello'}\");\n\n    Node nameNode = n.getFirstChild().getFirstChild();\n    Node objectNode = nameNode.getFirstChild();\n\n    // node extraction\n    assertEquals(Token.NAME, nameNode.getType());\n    assertEquals(Token.OBJECTLIT, objectNode.getType());\n\n    // value's type\n    ObjectType objectType =\n        (ObjectType) objectNode.getJSType();\n    assertEquals(NUMBER_TYPE, objectType.getPropertyType(\"m1\"));\n    assertEquals(STRING_TYPE, objectType.getPropertyType(\"m2\"));\n\n    // variable's type\n    assertEquals(objectType, nameNode.getJSType());\n  }\n",
        "begin_line": 6232,
        "end_line": 6250,
        "comment": "",
        "child_ranges": [
            "(line 6233,col 5)-(line 6233,col 63)",
            "(line 6235,col 5)-(line 6235,col 54)",
            "(line 6236,col 5)-(line 6236,col 47)",
            "(line 6239,col 5)-(line 6239,col 49)",
            "(line 6240,col 5)-(line 6240,col 56)",
            "(line 6243,col 5)-(line 6244,col 44)",
            "(line 6245,col 5)-(line 6245,col 64)",
            "(line 6246,col 5)-(line 6246,col 64)",
            "(line 6249,col 5)-(line 6249,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
        "snippet": "  public void testObjectLiteralDeclaration1() throws Exception {\n    testTypes(\n        \"var x = {\" +\n        \"/** @type {boolean} */ abc: true,\" +\n        \"/** @type {number} */ 'def': 0,\" +\n        \"/** @type {string} */ 3: 'fgh'\" +\n        \"};\");\n  }\n",
        "begin_line": 6252,
        "end_line": 6259,
        "comment": "",
        "child_ranges": [
            "(line 6253,col 5)-(line 6258,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
        "snippet": "  public void testCallDateConstructorAsFunction() throws Exception {\n    // ECMA-262 15.9.2: When Date is called as a function rather than as a\n    // constructor, it returns a string.\n    Node n = parseAndTypeCheck(\"Date()\");\n    assertEquals(STRING_TYPE, n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6261,
        "end_line": 6266,
        "comment": "",
        "child_ranges": [
            "(line 6264,col 5)-(line 6264,col 41)",
            "(line 6265,col 5)-(line 6265,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
        "snippet": "  public void testCallErrorConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Error('x')\");\n    assertEquals(ERROR_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6271,
        "end_line": 6275,
        "comment": "",
        "child_ranges": [
            "(line 6272,col 5)-(line 6272,col 45)",
            "(line 6273,col 5)-(line 6274,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
        "snippet": "  public void testCallArrayConstructorAsFunction() throws Exception {\n    Node n = parseAndTypeCheck(\"Array()\");\n    assertEquals(ARRAY_TYPE,\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 6277,
        "end_line": 6281,
        "comment": "",
        "child_ranges": [
            "(line 6278,col 5)-(line 6278,col 42)",
            "(line 6279,col 5)-(line 6280,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
        "snippet": "  public void testPropertyTypeOfUnionType() throws Exception {\n    testTypes(\"var a = {};\" +\n        \"/** @constructor */ a.N = function() {};\\n\" +\n        \"a.N.prototype.p = 1;\\n\" +\n        \"/** @constructor */ a.S = function() {};\\n\" +\n        \"a.S.prototype.p = 'a';\\n\" +\n        \"/** @param {!a.N|!a.S} x\\n@return {string} */\\n\" +\n        \"var f = function(x) { return x.p; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6283,
        "end_line": 6294,
        "comment": "",
        "child_ranges": [
            "(line 6284,col 5)-(line 6293,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
        "snippet": "  public void testAnnotatedPropertyOnInterface1() throws Exception {\n    // For interfaces we must allow function definitions that don't have a\n    // return statement, even though they declare a returned type.\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() {};\");\n  }\n",
        "begin_line": 6327,
        "end_line": 6332,
        "comment": "",
        "child_ranges": [
            "(line 6330,col 5)-(line 6331,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
        "snippet": "  public void testAnnotatedPropertyOnInterface2() throws Exception {\n    testTypes(\"/** @interface */ u.T = function() {};\\n\" +\n        \"/** @return {number} */ u.T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 6334,
        "end_line": 6337,
        "comment": "",
        "child_ranges": [
            "(line 6335,col 5)-(line 6336,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
        "snippet": "  public void testAnnotatedPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = function() { };\");\n  }\n",
        "begin_line": 6339,
        "end_line": 6342,
        "comment": "",
        "child_ranges": [
            "(line 6340,col 5)-(line 6341,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
        "snippet": "  public void testAnnotatedPropertyOnInterface4() throws Exception {\n    testTypes(\n        CLOSURE_DEFS +\n        \"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */ T.prototype.f = goog.abstractMethod;\");\n  }\n",
        "begin_line": 6344,
        "end_line": 6349,
        "comment": "",
        "child_ranges": [
            "(line 6345,col 5)-(line 6348,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @desc x does something */u.T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 6363,
        "end_line": 6366,
        "comment": "",
        "child_ranges": [
            "(line 6364,col 5)-(line 6365,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
        "snippet": "  public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @desc x does something */T.prototype.x = function() {};\");\n  }\n",
        "begin_line": 6368,
        "end_line": 6371,
        "comment": "",
        "child_ranges": [
            "(line 6369,col 5)-(line 6370,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
        "snippet": "  public void testDataPropertyOnInterface1() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\");\n  }\n",
        "begin_line": 6381,
        "end_line": 6384,
        "comment": "",
        "child_ranges": [
            "(line 6382,col 5)-(line 6383,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
        "snippet": "  public void testDataPropertyOnInterface2() throws Exception {\n    reportMissingOverrides = CheckLevel.OFF;\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 6386,
        "end_line": 6399,
        "comment": "",
        "child_ranges": [
            "(line 6387,col 5)-(line 6387,col 44)",
            "(line 6388,col 5)-(line 6398,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
        "snippet": "  public void testDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x;\\n\" +\n        \"/** @constructor \\n\" +\n        \" *  @implements {T} \\n\" +\n        \" */\\n\" +\n        \"function C() {}\\n\" +\n        \"/** @override */\\n\" +\n        \"C.prototype.x = 'foo';\",\n        \"mismatch of the x property type and the type of the property it \" +\n        \"overrides from interface T\\n\" +\n        \"original: number\\n\" +\n        \"override: string\");\n  }\n",
        "begin_line": 6401,
        "end_line": 6414,
        "comment": "",
        "child_ranges": [
            "(line 6402,col 5)-(line 6413,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
        "snippet": "  public void testWarnDataPropertyOnInterface3() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @type {number} */u.T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6416,
        "end_line": 6421,
        "comment": "",
        "child_ranges": [
            "(line 6417,col 5)-(line 6420,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
        "snippet": "  public void testWarnDataPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = 1;\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\");\n  }\n",
        "begin_line": 6423,
        "end_line": 6428,
        "comment": "",
        "child_ranges": [
            "(line 6424,col 5)-(line 6427,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n    testTypes(\"/** @interface */ u.T = function () {};\\n\" +\n        \"/** @param {Number} foo */u.T.prototype.x =\\n\" +\n        \"function() {};\",\n        \"parameter foo does not appear in u.T.prototype.x's parameter list\");\n  }\n",
        "begin_line": 6459,
        "end_line": 6464,
        "comment": "",
        "child_ranges": [
            "(line 6460,col 5)-(line 6463,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @type {number} */T.prototype.x = function() { };\",\n        \"assignment to property x of T.prototype\\n\" +\n        \"found   : function (): undefined\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6466,
        "end_line": 6472,
        "comment": "",
        "child_ranges": [
            "(line 6467,col 5)-(line 6471,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
        "snippet": "  public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"/** @return {number} */T.prototype.x = 1\",\n        \"interface members can only be empty property declarations, \"\n        + \"empty functions, or goog.abstractMethod\"\n        );\n  }\n",
        "begin_line": 6474,
        "end_line": 6480,
        "comment": "",
        "child_ranges": [
            "(line 6475,col 5)-(line 6479,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
        "snippet": "  public void testInterfaceNonEmptyFunction() throws Exception {\n    testTypes(\"/** @interface */ function T() {};\\n\" +\n        \"T.prototype.x = function() { return 'foo'; }\",\n        \"interface member functions must have an empty body\"\n        );\n  }\n",
        "begin_line": 6482,
        "end_line": 6487,
        "comment": "",
        "child_ranges": [
            "(line 6483,col 5)-(line 6486,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
        "snippet": "  public void testDoubleNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @interface */ I1.I2.I3 = function() {};\\n\");\n  }\n",
        "begin_line": 6489,
        "end_line": 6493,
        "comment": "",
        "child_ranges": [
            "(line 6490,col 5)-(line 6492,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
        "snippet": "  public void testStaticDataPropertyOnNestedInterface() throws Exception {\n    testTypes(\"/** @interface */ var I1 = function() {};\\n\" +\n              \"/** @interface */ I1.I2 = function() {};\\n\" +\n              \"/** @type {number} */ I1.I2.x = 1;\\n\");\n  }\n",
        "begin_line": 6495,
        "end_line": 6499,
        "comment": "",
        "child_ranges": [
            "(line 6496,col 5)-(line 6498,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
        "snippet": "  public void testInterfaceInstantiation() throws Exception {\n    testTypes(\"/** @interface */var f; new f\",\n              \"cannot instantiate non-constructor\");\n  }\n",
        "begin_line": 6501,
        "end_line": 6504,
        "comment": "",
        "child_ranges": [
            "(line 6502,col 5)-(line 6503,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypeLoop()",
        "snippet": "  public void testPrototypeLoop() throws Exception {\n    testClosureTypesMultipleWarnings(\n        suppressMissingProperty(\"foo\") +\n        \"/** @constructor \\n * @extends {T} */var T = function() {};\" +\n        \"alert((new T).foo);\",\n        Lists.newArrayList(\n            \"Parse error. Cycle detected in inheritance chain of type T\",\n            \"Could not resolve type in @extends tag of T\"));\n  }\n",
        "begin_line": 6506,
        "end_line": 6514,
        "comment": "",
        "child_ranges": [
            "(line 6507,col 5)-(line 6513,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
        "snippet": "  public void testDirectPrototypeAssign() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @type {Array} */ Bar.prototype = new Foo()\",\n        \"assignment to property prototype of Bar\\n\" +\n        \"found   : Foo\\n\" +\n        \"required: (Array|null)\");\n  }\n",
        "begin_line": 6516,
        "end_line": 6524,
        "comment": "",
        "child_ranges": [
            "(line 6517,col 5)-(line 6523,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
        "snippet": "  public void testResolutionViaRegistry1() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6529,
        "end_line": 6540,
        "comment": "",
        "child_ranges": [
            "(line 6530,col 5)-(line 6539,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
        "snippet": "  public void testResolutionViaRegistry2() throws Exception {\n    testTypes(\n        \"/** @constructor */ u.T = function() {\" +\n        \"  this.a = 0; };\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6542,
        "end_line": 6554,
        "comment": "",
        "child_ranges": [
            "(line 6543,col 5)-(line 6553,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
        "snippet": "  public void testResolutionViaRegistry3() throws Exception {\n    testTypes(\"/** @constructor */ u.T = function() {};\\n\" +\n        \"/** @type {(number|string)} */ u.T.prototype.a = 0;\\n\" +\n        \"/**\\n\" +\n        \"* @param {u.T} t\\n\" +\n        \"* @return {string}\\n\" +\n        \"*/\\n\" +\n        \"var f = function(t) { return t.a; };\",\n        \"inconsistent return type\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6556,
        "end_line": 6567,
        "comment": "",
        "child_ranges": [
            "(line 6557,col 5)-(line 6566,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
        "snippet": "  public void testResolutionViaRegistry4() throws Exception {\n    testTypes(\"/** @constructor */ u.A = function() {};\\n\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.A = function() {}\\n;\" +\n        \"/**\\n* @constructor\\n* @extends {u.A}\\n*/\\nu.A.B = function() {};\\n\" +\n        \"var ab = new u.A.B();\\n\" +\n        \"/** @type {!u.A} */ var a = ab;\\n\" +\n        \"/** @type {!u.A.A} */ var aa = ab;\\n\",\n        \"initializing variable\\n\" +\n        \"found   : u.A.B\\n\" +\n        \"required: u.A.A\");\n  }\n",
        "begin_line": 6569,
        "end_line": 6579,
        "comment": "",
        "child_ranges": [
            "(line 6570,col 5)-(line 6578,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
        "snippet": "  public void testResolutionViaRegistry5() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ u.T = function() {}; u.T\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof FunctionType);\n    assertEquals(\"u.T\",\n        ((FunctionType) type).getInstanceType().getReferenceName());\n  }\n",
        "begin_line": 6581,
        "end_line": 6588,
        "comment": "",
        "child_ranges": [
            "(line 6582,col 5)-(line 6582,col 79)",
            "(line 6583,col 5)-(line 6583,col 62)",
            "(line 6584,col 5)-(line 6584,col 38)",
            "(line 6585,col 5)-(line 6585,col 45)",
            "(line 6586,col 5)-(line 6587,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
        "snippet": "  public void testGatherProperyWithoutAnnotation1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ var T = function() {};\" +\n        \"/** @type {!T} */var t; t.x; t;\");\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Sets.newHashSet(objectType),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6590,
        "end_line": 6601,
        "comment": "",
        "child_ranges": [
            "(line 6591,col 5)-(line 6592,col 43)",
            "(line 6593,col 5)-(line 6593,col 62)",
            "(line 6594,col 5)-(line 6594,col 38)",
            "(line 6595,col 5)-(line 6595,col 43)",
            "(line 6596,col 5)-(line 6596,col 46)",
            "(line 6597,col 5)-(line 6597,col 45)",
            "(line 6598,col 5)-(line 6600,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
        "snippet": "  public void testGatherProperyWithoutAnnotation2() throws Exception {\n    TypeCheckResult ns =\n        parseAndTypeCheckWithScope(\"/** @type {!Object} */var t; t.x; t;\");\n    Node n = ns.root;\n    Scope s = ns.scope;\n    JSType type = n.getLastChild().getLastChild().getJSType();\n    assertFalse(type.isUnknownType());\n    assertEquals(type, OBJECT_TYPE);\n    assertTrue(type instanceof ObjectType);\n    ObjectType objectType = (ObjectType) type;\n    assertFalse(objectType.hasProperty(\"x\"));\n    assertEquals(\n        Sets.newHashSet(OBJECT_TYPE),\n        registry.getTypesWithProperty(\"x\"));\n  }\n",
        "begin_line": 6603,
        "end_line": 6617,
        "comment": "",
        "child_ranges": [
            "(line 6604,col 5)-(line 6605,col 75)",
            "(line 6606,col 5)-(line 6606,col 21)",
            "(line 6607,col 5)-(line 6607,col 23)",
            "(line 6608,col 5)-(line 6608,col 62)",
            "(line 6609,col 5)-(line 6609,col 38)",
            "(line 6610,col 5)-(line 6610,col 36)",
            "(line 6611,col 5)-(line 6611,col 43)",
            "(line 6612,col 5)-(line 6612,col 46)",
            "(line 6613,col 5)-(line 6613,col 45)",
            "(line 6614,col 5)-(line 6616,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
        "snippet": "  public void testFunctionMasksVariableBug() throws Exception {\n    testTypes(\"var x = 4; var f = function x(b) { return b ? 1 : x(true); };\",\n        \"function x masks variable (IE bug)\");\n  }\n",
        "begin_line": 6619,
        "end_line": 6622,
        "comment": "",
        "child_ranges": [
            "(line 6620,col 5)-(line 6621,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa1()",
        "snippet": "  public void testDfa1() throws Exception {\n    testTypes(\"var x = null;\\n x = 1;\\n /** @type number */ var y = x;\");\n  }\n",
        "begin_line": 6624,
        "end_line": 6626,
        "comment": "",
        "child_ranges": [
            "(line 6625,col 5)-(line 6625,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa2()",
        "snippet": "  public void testDfa2() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\nvar x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6628,
        "end_line": 6632,
        "comment": "",
        "child_ranges": [
            "(line 6629,col 5)-(line 6631,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa3()",
        "snippet": "  public void testDfa3() throws Exception {\n    testTypes(\"function u() {}\\n\" +\n        \"/** @return {number} */ function f() {\\n\" +\n        \"/** @type {number|string} */ var x = 'todo';\\n\" +\n        \"if (u()) { x = 1; } else { x = 2; } return x;\\n}\");\n  }\n",
        "begin_line": 6634,
        "end_line": 6639,
        "comment": "",
        "child_ranges": [
            "(line 6635,col 5)-(line 6638,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa4()",
        "snippet": "  public void testDfa4() throws Exception {\n    testTypes(\"/** @param {Date?} d */ function f(d) {\\n\" +\n        \"if (!d) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = d;\\n}\");\n  }\n",
        "begin_line": 6641,
        "end_line": 6645,
        "comment": "",
        "child_ranges": [
            "(line 6642,col 5)-(line 6644,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa5()",
        "snippet": "  public void testDfa5() throws Exception {\n    testTypes(\"/** @return {string?} */ function u() {return 'a';}\\n\" +\n        \"/** @param {string?} x\\n@return {string} */ function f(x) {\\n\" +\n        \"while (!x) { x = u(); }\\nreturn x;\\n}\");\n  }\n",
        "begin_line": 6647,
        "end_line": 6651,
        "comment": "",
        "child_ranges": [
            "(line 6648,col 5)-(line 6650,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa6()",
        "snippet": "  public void testDfa6() throws Exception {\n    testTypes(\"/** @return {Object?} */ function u() {return {};}\\n\" +\n        \"/** @param {Object?} x */ function f(x) {\\n\" +\n        \"while (x) { x = u(); if (!x) { x = u(); } }\\n}\");\n  }\n",
        "begin_line": 6653,
        "end_line": 6657,
        "comment": "",
        "child_ranges": [
            "(line 6654,col 5)-(line 6656,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa7()",
        "snippet": "  public void testDfa7() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {Date?} */ T.prototype.x = null;\\n\" +\n        \"/** @param {!T} t */ function f(t) {\\n\" +\n        \"if (!t.x) { return; }\\n\" +\n        \"/** @type {!Date} */ var e = t.x;\\n}\");\n  }\n",
        "begin_line": 6659,
        "end_line": 6665,
        "comment": "",
        "child_ranges": [
            "(line 6660,col 5)-(line 6664,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa8()",
        "snippet": "  public void testDfa8() throws Exception {\n    testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n        \"/** @type {number|string} */ T.prototype.x = '';\\n\" +\n        \"function u() {}\\n\" +\n        \"/** @param {!T} t\\n@return {number} */ function f(t) {\\n\" +\n        \"if (u()) { t.x = 1; } else { t.x = 2; } return t.x;\\n}\");\n  }\n",
        "begin_line": 6667,
        "end_line": 6673,
        "comment": "",
        "child_ranges": [
            "(line 6668,col 5)-(line 6672,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa9()",
        "snippet": "  public void testDfa9() throws Exception {\n    testTypes(\"function f() {\\n/** @type {string?} */var x;\\nx = null;\\n\" +\n        \"if (x == null) { return 0; } else { return 1; } }\",\n        \"condition always evaluates to true\\n\" +\n        \"left : null\\n\" +\n        \"right: null\");\n  }\n",
        "begin_line": 6675,
        "end_line": 6681,
        "comment": "",
        "child_ranges": [
            "(line 6676,col 5)-(line 6680,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa10()",
        "snippet": "  public void testDfa10() throws Exception {\n    testTypes(\"/** @param {null} x */ function g(x) {}\" +\n        \"/** @param {string?} x */function f(x) {\\n\" +\n        \"if (!x) { x = ''; }\\n\" +\n        \"if (g(x)) { return 0; } else { return 1; } }\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: null\");\n  }\n",
        "begin_line": 6683,
        "end_line": 6691,
        "comment": "",
        "child_ranges": [
            "(line 6684,col 5)-(line 6690,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa11()",
        "snippet": "  public void testDfa11() throws Exception {\n    testTypes(\"/** @param {string} opt_x\\n@return {string} */\\n\" +\n        \"function f(opt_x) { if (!opt_x) { \" +\n        \"throw new Error('x cannot be empty'); } return opt_x; }\");\n  }\n",
        "begin_line": 6693,
        "end_line": 6697,
        "comment": "",
        "child_ranges": [
            "(line 6694,col 5)-(line 6696,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa12()",
        "snippet": "  public void testDfa12() throws Exception {\n    testTypes(\"/** @param {string} x \\n * @constructor \\n */\" +\n        \"var Bar = function(x) {};\" +\n        \"/** @param {string} x */ function g(x) { return true; }\" +\n        \"/** @param {string|number} opt_x */ \" +\n        \"function f(opt_x) { \" +\n        \"  if (opt_x) { new Bar(g(opt_x) && 'x'); }\" +\n        \"}\",\n        \"actual parameter 1 of g does not match formal parameter\\n\" +\n        \"found   : (number|string)\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6699,
        "end_line": 6710,
        "comment": "",
        "child_ranges": [
            "(line 6700,col 5)-(line 6709,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDfa13()",
        "snippet": "  public void testDfa13() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {string} x \\n\" +\n        \" * @param {number} y \\n\" +\n        \" * @param {number} z \\n\" +\n        \" */\" +\n        \"function g(x, y, z) {}\" +\n        \"function f() { \" +\n        \"  var x = 'a'; g(x, x = 3, x);\" +\n        \"}\");\n  }\n",
        "begin_line": 6712,
        "end_line": 6723,
        "comment": "",
        "child_ranges": [
            "(line 6713,col 5)-(line 6722,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
        "snippet": "  public void testTypeInferenceWithCast1() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6725,
        "end_line": 6731,
        "comment": "",
        "child_ranges": [
            "(line 6726,col 5)-(line 6730,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
        "snippet": "  public void testTypeInferenceWithCast2() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return null;}\" +\n        \"/**@param {number?} x\\n@return {number?}*/function f(x) {return x;}\" +\n        \"/**@return {number?}*/function g(x) {\" +\n        \"var y; y = /**@type {number?}*/(u(x)); return f(y);}\");\n  }\n",
        "begin_line": 6733,
        "end_line": 6739,
        "comment": "",
        "child_ranges": [
            "(line 6734,col 5)-(line 6738,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
        "snippet": "  public void testTypeInferenceWithCast3() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x));}\");\n  }\n",
        "begin_line": 6741,
        "end_line": 6746,
        "comment": "",
        "child_ranges": [
            "(line 6742,col 5)-(line 6745,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
        "snippet": "  public void testTypeInferenceWithCast4() throws Exception {\n    testTypes(\n        \"/**@return {(number,null,undefined)}*/function u(x) {return 1;}\" +\n        \"/**@return {number}*/function g(x) {\" +\n        \"return /**@type {number}*/(u(x)) && 1;}\");\n  }\n",
        "begin_line": 6748,
        "end_line": 6753,
        "comment": "",
        "child_ranges": [
            "(line 6749,col 5)-(line 6752,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
        "snippet": "  public void testTypeInferenceWithCast5() throws Exception {\n    testTypes(\n        \"/** @param {number} x */ function foo(x) {}\" +\n        \"/** @param {{length:*}} y */ function bar(y) {\" +\n        \"  /** @type {string} */ y.length;\" +\n        \"  foo(y.length);\" +\n        \"}\",\n        \"actual parameter 1 of foo does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6755,
        "end_line": 6765,
        "comment": "",
        "child_ranges": [
            "(line 6756,col 5)-(line 6764,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
        "snippet": "  public void testTypeInferenceWithClosure1() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x == null;\" +\n        \"}\");\n  }\n",
        "begin_line": 6767,
        "end_line": 6775,
        "comment": "",
        "child_ranges": [
            "(line 6768,col 5)-(line 6774,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
        "snippet": "  public void testTypeInferenceWithClosure2() throws Exception {\n    testTypes(\n        \"/** @return {boolean} */\" +\n        \"function f() {\" +\n        \"  /** @type {?string} */ var x = null;\" +\n        \"  function g() { x = 'y'; } g(); \" +\n        \"  return x === 3;\" +\n        \"}\",\n        \"condition always evaluates to the same value\\n\" +\n        \"left : (null|string)\\n\" +\n        \"right: number\");\n  }\n",
        "begin_line": 6777,
        "end_line": 6788,
        "comment": "",
        "child_ranges": [
            "(line 6778,col 5)-(line 6787,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardPropertyReference()",
        "snippet": "  public void testForwardPropertyReference() throws Exception {\n    testTypes(\"/** @constructor */ var Foo = function() { this.init(); };\" +\n        \"/** @return {string} */\" +\n        \"Foo.prototype.getString = function() {\" +\n        \"  return this.number_;\" +\n        \"};\" +\n        \"Foo.prototype.init = function() {\" +\n        \"  /** @type {number} */\" +\n        \"  this.number_ = 3;\" +\n        \"};\",\n        \"inconsistent return type\\n\" +\n        \"found   : number\\n\" +\n        \"required: string\");\n  }\n",
        "begin_line": 6790,
        "end_line": 6803,
        "comment": "",
        "child_ranges": [
            "(line 6791,col 5)-(line 6802,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
        "snippet": "  public void testNoForwardTypeDeclaration() throws Exception {\n    testTypes(\n        \"/** @param {MyType} x */ function f(x) {}\",\n        \"Parse error. Unknown type MyType\");\n  }\n",
        "begin_line": 6805,
        "end_line": 6809,
        "comment": "",
        "child_ranges": [
            "(line 6806,col 5)-(line 6808,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
        "snippet": "  public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n    // To better support third-party code, we do not warn when\n    // there are no braces around an unknown type name.\n    testTypes(\"/** @return The result. */ function f() {}\");\n  }\n",
        "begin_line": 6811,
        "end_line": 6815,
        "comment": "",
        "child_ranges": [
            "(line 6814,col 5)-(line 6814,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
        "snippet": "  public void testForwardTypeDeclaration1() throws Exception {\n    testClosureTypes(\n        // malformed addDependency calls shouldn't cause a crash\n        \"goog.addDependency();\" +\n        \"goog.addDependency('y', [goog]);\" +\n\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x \\n * @return {number} */\" +\n        \"function f(x) { return 3; }\", null);\n  }\n",
        "begin_line": 6817,
        "end_line": 6826,
        "comment": "",
        "child_ranges": [
            "(line 6818,col 5)-(line 6825,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
        "snippet": "  public void testForwardTypeDeclaration2() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { }\" +\n        \"f(3);\", null);\n  }\n",
        "begin_line": 6828,
        "end_line": 6833,
        "comment": "",
        "child_ranges": [
            "(line 6829,col 5)-(line 6832,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
        "snippet": "  public void testForwardTypeDeclaration3() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(3);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (MyType|null)\");\n  }\n",
        "begin_line": 6835,
        "end_line": 6844,
        "comment": "",
        "child_ranges": [
            "(line 6836,col 5)-(line 6843,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
        "snippet": "  public void testForwardTypeDeclaration4() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/** @param {MyType} x */ function f(x) { return x; }\" +\n        \"/** @constructor */ var MyType = function() {};\" +\n        \"f(new MyType());\",\n        null);\n  }\n",
        "begin_line": 6846,
        "end_line": 6853,
        "comment": "",
        "child_ranges": [
            "(line 6847,col 5)-(line 6852,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
        "snippet": "  public void testForwardTypeDeclaration5() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @extends {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        \"Could not resolve type in @extends tag of YourType\");\n  }\n",
        "begin_line": 6855,
        "end_line": 6864,
        "comment": "",
        "child_ranges": [
            "(line 6856,col 5)-(line 6863,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
        "snippet": "  public void testForwardTypeDeclaration6() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"goog.addDependency('zzz.js', ['MyType'], []);\" +\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @implements {MyType}\\n\" +\n        \" */ var YourType = function() {};\" +\n        \"/** @override */ YourType.prototype.method = function() {};\",\n        Lists.newArrayList(\n            \"Could not resolve type in @implements tag of YourType\",\n            \"property method not defined on any superclass of YourType\"));\n  }\n",
        "begin_line": 6866,
        "end_line": 6877,
        "comment": "",
        "child_ranges": [
            "(line 6867,col 5)-(line 6876,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMalformedOldTypeDef()",
        "snippet": "  public void testMalformedOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 6879,
        "end_line": 6884,
        "comment": "",
        "child_ranges": [
            "(line 6880,col 5)-(line 6883,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMalformedOldTypeDef2()",
        "snippet": "  public void testMalformedOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @typedef {boolean} */ goog.Bar = goog.typedef\",\n        \"Typedef for goog.Bar does not have any type information\");\n  }\n",
        "begin_line": 6886,
        "end_line": 6891,
        "comment": "",
        "child_ranges": [
            "(line 6887,col 5)-(line 6890,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateOldTypeDef()",
        "snippet": "  public void testDuplicateOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef\",\n        \"variable goog.Bar redefined with type number, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (this:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6893,
        "end_line": 6901,
        "comment": "",
        "child_ranges": [
            "(line 6894,col 5)-(line 6900,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef1()",
        "snippet": "  public void testOldTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6903,
        "end_line": 6909,
        "comment": "",
        "child_ranges": [
            "(line 6904,col 5)-(line 6908,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef2()",
        "snippet": "  public void testOldTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6911,
        "end_line": 6920,
        "comment": "",
        "child_ranges": [
            "(line 6912,col 5)-(line 6919,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testOldTypeDef3()",
        "snippet": "  public void testOldTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number} */ var Bar = goog.typedef;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6922,
        "end_line": 6931,
        "comment": "",
        "child_ranges": [
            "(line 6923,col 5)-(line 6930,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularOldTypeDef()",
        "snippet": "  public void testCircularOldTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.typedef = true;\" +\n        \"/** @type {number|Array.<goog.Bar>} */ goog.Bar = goog.typedef;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 6933,
        "end_line": 6939,
        "comment": "",
        "child_ranges": [
            "(line 6934,col 5)-(line 6938,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
        "snippet": "  public void testDuplicateTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @constructor */ goog.Bar = function() {};\" +\n        \"/** @typedef {number} */ goog.Bar;\",\n        \"variable goog.Bar redefined with type None, \" +\n        \"original definition at [testcode]:1 \" +\n        \"with type function (this:goog.Bar): undefined\");\n  }\n",
        "begin_line": 6941,
        "end_line": 6949,
        "comment": "",
        "child_ranges": [
            "(line 6942,col 5)-(line 6948,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef1()",
        "snippet": "  public void testTypeDef1() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3);\");\n  }\n",
        "begin_line": 6951,
        "end_line": 6957,
        "comment": "",
        "child_ranges": [
            "(line 6952,col 5)-(line 6956,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef2()",
        "snippet": "  public void testTypeDef2() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6959,
        "end_line": 6968,
        "comment": "",
        "child_ranges": [
            "(line 6960,col 5)-(line 6967,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef3()",
        "snippet": "  public void testTypeDef3() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number} */ var Bar;\" +\n        \"/** @param {Bar} x */ function f(x) {}\" +\n        \"f('3');\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : string\\n\" +\n        \"required: number\");\n  }\n",
        "begin_line": 6970,
        "end_line": 6979,
        "comment": "",
        "child_ranges": [
            "(line 6971,col 5)-(line 6978,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef4()",
        "snippet": "  public void testTypeDef4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 6981,
        "end_line": 6991,
        "comment": "",
        "child_ranges": [
            "(line 6982,col 5)-(line 6990,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeDef5()",
        "snippet": "  public void testTypeDef5() throws Exception {\n    // Notice that the error message is slightly different than\n    // the one for testTypeDef4, even though they should be the same.\n    // This is an implementation detail necessary for NamedTypes work out\n    // ok, and it should change if NamedTypes ever go away.\n    testTypes(\n        \"/** @param {AB} x */ function f(x) {}\" +\n        \"/** @constructor */ function A() {}\" +\n        \"/** @constructor */ function B() {}\" +\n        \"/** @typedef {(A|B)} */ var AB;\" +\n        \"f(new A()); f(new B()); f(1);\",\n        \"actual parameter 1 of f does not match formal parameter\\n\" +\n        \"found   : number\\n\" +\n        \"required: (A|B|null)\");\n  }\n",
        "begin_line": 6993,
        "end_line": 7007,
        "comment": "",
        "child_ranges": [
            "(line 6998,col 5)-(line 7006,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testCircularTypeDef()",
        "snippet": "  public void testCircularTypeDef() throws Exception {\n    testTypes(\n        \"var goog = {};\" +\n        \"/** @typedef {number|Array.<goog.Bar>} */ goog.Bar;\" +\n        \"/** @param {goog.Bar} x */ function f(x) {}\" +\n        \"f(3); f([3]); f([[3]]);\");\n  }\n",
        "begin_line": 7009,
        "end_line": 7015,
        "comment": "",
        "child_ranges": [
            "(line 7010,col 5)-(line 7014,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent1()",
        "snippet": "  public void testGetTypedPercent1() throws Exception {\n    String js = \"var id = function(x) { return x; }\\n\" +\n                \"var id2 = function(x) { return id(x); }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7017,
        "end_line": 7021,
        "comment": "",
        "child_ranges": [
            "(line 7018,col 5)-(line 7019,col 58)",
            "(line 7020,col 5)-(line 7020,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent2()",
        "snippet": "  public void testGetTypedPercent2() throws Exception {\n    String js = \"var x = {}; x.y = 1;\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7023,
        "end_line": 7026,
        "comment": "",
        "child_ranges": [
            "(line 7024,col 5)-(line 7024,col 39)",
            "(line 7025,col 5)-(line 7025,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent3()",
        "snippet": "  public void testGetTypedPercent3() throws Exception {\n    String js = \"var f = function(x) { x.a = x.b; }\";\n    assertEquals(50.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7028,
        "end_line": 7031,
        "comment": "",
        "child_ranges": [
            "(line 7029,col 5)-(line 7029,col 53)",
            "(line 7030,col 5)-(line 7030,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testGetTypedPercent4()",
        "snippet": "  public void testGetTypedPercent4() throws Exception {\n    String js = \"var n = {};\\n /** @constructor */ n.T = function() {};\\n\" +\n        \"/** @type n.T */ var x = new n.T();\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7033,
        "end_line": 7037,
        "comment": "",
        "child_ranges": [
            "(line 7034,col 5)-(line 7035,col 46)",
            "(line 7036,col 5)-(line 7036,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
        "snippet": "  private double getTypedPercent(String js) throws Exception {\n    Node n = compiler.parseTestCode(js);\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    TypeCheck t = makeTypeCheck();\n    t.processForTesting(null, n);\n    return t.getTypedPercent();\n  }\n",
        "begin_line": 7039,
        "end_line": 7049,
        "comment": "",
        "child_ranges": [
            "(line 7040,col 5)-(line 7040,col 40)",
            "(line 7042,col 5)-(line 7042,col 41)",
            "(line 7043,col 5)-(line 7043,col 61)",
            "(line 7044,col 5)-(line 7044,col 46)",
            "(line 7046,col 5)-(line 7046,col 34)",
            "(line 7047,col 5)-(line 7047,col 33)",
            "(line 7048,col 5)-(line 7048,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(com.google.javascript.rhino.Node)",
        "snippet": "  private ObjectType getInstanceType(Node js1Node) {\n    JSType type = js1Node.getFirstChild().getJSType();\n    assertNotNull(type);\n    assertTrue(type instanceof FunctionType);\n    FunctionType functionType = (FunctionType) type;\n    assertTrue(functionType.isConstructor());\n    return functionType.getInstanceType();\n  }\n",
        "begin_line": 7051,
        "end_line": 7058,
        "comment": "",
        "child_ranges": [
            "(line 7052,col 5)-(line 7052,col 54)",
            "(line 7053,col 5)-(line 7053,col 24)",
            "(line 7054,col 5)-(line 7054,col 45)",
            "(line 7055,col 5)-(line 7055,col 52)",
            "(line 7056,col 5)-(line 7056,col 45)",
            "(line 7057,col 5)-(line 7057,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
        "snippet": "  public void testPrototypePropertyReference() throws Exception {\n    TypeCheckResult p = parseAndTypeCheckWithScope(\"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.bar = function(a){};\\n\"\n        + \"/** @param {Foo} f */\\n\"\n        + \"function baz(f) {\\n\"\n        + \"  Foo.prototype.bar.call(f, 3);\\n\"\n        + \"}\");\n    assertEquals(0, compiler.getErrorCount());\n    assertEquals(0, compiler.getWarningCount());\n\n    assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n    FunctionType fooType = (FunctionType) p.scope.getVar(\"Foo\").getType();\n    assertEquals(\"function (this:Foo, number): undefined\",\n                 fooType.getPrototype().getPropertyType(\"bar\").toString());\n  }\n",
        "begin_line": 7060,
        "end_line": 7077,
        "comment": "",
        "child_ranges": [
            "(line 7061,col 5)-(line 7069,col 15)",
            "(line 7070,col 5)-(line 7070,col 46)",
            "(line 7071,col 5)-(line 7071,col 48)",
            "(line 7073,col 5)-(line 7073,col 72)",
            "(line 7074,col 5)-(line 7074,col 74)",
            "(line 7075,col 5)-(line 7076,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
        "snippet": "  public void testResolvingNamedTypes() throws Exception {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"var Foo = function() {}\\n\"\n        + \"/** @param {number} a */\\n\"\n        + \"Foo.prototype.foo = function(a) {\\n\"\n        + \"  return this.baz().toString();\\n\"\n        + \"};\\n\"\n        + \"/** @return {Baz} */\\n\"\n        + \"Foo.prototype.baz = function() { return new Baz(); };\\n\"\n        + \"/** @constructor\\n\"\n        + \"  * @extends Foo */\\n\"\n        + \"var Bar = function() {};\"\n        + \"/** @constructor */\\n\"\n        + \"var Baz = function() {};\";\n    assertEquals(100.0, getTypedPercent(js), 0.1);\n  }\n",
        "begin_line": 7079,
        "end_line": 7095,
        "comment": "",
        "child_ranges": [
            "(line 7080,col 5)-(line 7093,col 37)",
            "(line 7094,col 5)-(line 7094,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty1()",
        "snippet": "  public void testMissingProperty1() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.a = 3; };\");\n  }\n",
        "begin_line": 7097,
        "end_line": 7102,
        "comment": "",
        "child_ranges": [
            "(line 7098,col 5)-(line 7101,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty2()",
        "snippet": "  public void testMissingProperty2() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7104,
        "end_line": 7110,
        "comment": "",
        "child_ranges": [
            "(line 7105,col 5)-(line 7109,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty3()",
        "snippet": "  public void testMissingProperty3() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).a = 3;\");\n  }\n",
        "begin_line": 7112,
        "end_line": 7117,
        "comment": "",
        "child_ranges": [
            "(line 7113,col 5)-(line 7116,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty4()",
        "snippet": "  public void testMissingProperty4() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"(new Foo).b = 3;\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7119,
        "end_line": 7125,
        "comment": "",
        "child_ranges": [
            "(line 7120,col 5)-(line 7124,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty5()",
        "snippet": "  public void testMissingProperty5() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor */ function Bar() { this.a = 3; };\",\n        \"Property a never defined on Foo\");\n  }\n",
        "begin_line": 7127,
        "end_line": 7133,
        "comment": "",
        "child_ranges": [
            "(line 7128,col 5)-(line 7132,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty6()",
        "snippet": "  public void testMissingProperty6() throws Exception {\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"/** @constructor \\n * @extends {Foo} */ \" +\n        \"function Bar() { this.a = 3; };\");\n  }\n",
        "begin_line": 7135,
        "end_line": 7141,
        "comment": "",
        "child_ranges": [
            "(line 7136,col 5)-(line 7140,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty7()",
        "snippet": "  public void testMissingProperty7() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return obj.impossible; }\",\n        \"Property impossible never defined on Object\");\n  }\n",
        "begin_line": 7143,
        "end_line": 7148,
        "comment": "",
        "child_ranges": [
            "(line 7144,col 5)-(line 7147,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty8()",
        "snippet": "  public void testMissingProperty8() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return typeof obj.impossible; }\");\n  }\n",
        "begin_line": 7150,
        "end_line": 7154,
        "comment": "",
        "child_ranges": [
            "(line 7151,col 5)-(line 7153,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty9()",
        "snippet": "  public void testMissingProperty9() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { if (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 7156,
        "end_line": 7160,
        "comment": "",
        "child_ranges": [
            "(line 7157,col 5)-(line 7159,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty10()",
        "snippet": "  public void testMissingProperty10() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { while (obj.impossible) { return true; } }\");\n  }\n",
        "begin_line": 7162,
        "end_line": 7166,
        "comment": "",
        "child_ranges": [
            "(line 7163,col 5)-(line 7165,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty11()",
        "snippet": "  public void testMissingProperty11() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n  }\n",
        "begin_line": 7168,
        "end_line": 7172,
        "comment": "",
        "child_ranges": [
            "(line 7169,col 5)-(line 7171,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty12()",
        "snippet": "  public void testMissingProperty12() throws Exception {\n    testTypes(\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { do { } while (obj.impossible); }\");\n  }\n",
        "begin_line": 7174,
        "end_line": 7178,
        "comment": "",
        "child_ranges": [
            "(line 7175,col 5)-(line 7177,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty13()",
        "snippet": "  public void testMissingProperty13() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n  }\n",
        "begin_line": 7180,
        "end_line": 7185,
        "comment": "",
        "child_ranges": [
            "(line 7181,col 5)-(line 7184,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty14()",
        "snippet": "  public void testMissingProperty14() throws Exception {\n    testTypes(\n        \"var goog = {}; goog.isDef = function(x) { return false; };\" +\n        \"/** @param {Object} obj */\" +\n        \"function foo(obj) { return goog.isNull(obj.impossible); }\",\n        \"Property isNull never defined on goog\");\n  }\n",
        "begin_line": 7187,
        "end_line": 7193,
        "comment": "",
        "child_ranges": [
            "(line 7188,col 5)-(line 7192,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty15()",
        "snippet": "  public void testMissingProperty15() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { x.foo(); } }\");\n  }\n",
        "begin_line": 7195,
        "end_line": 7199,
        "comment": "",
        "child_ranges": [
            "(line 7196,col 5)-(line 7198,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty16()",
        "snippet": "  public void testMissingProperty16() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo(); if (x.foo) {} }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 7201,
        "end_line": 7206,
        "comment": "",
        "child_ranges": [
            "(line 7202,col 5)-(line 7205,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty17()",
        "snippet": "  public void testMissingProperty17() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (typeof x.foo == 'function') { x.foo(); } }\");\n  }\n",
        "begin_line": 7208,
        "end_line": 7212,
        "comment": "",
        "child_ranges": [
            "(line 7209,col 5)-(line 7211,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty18()",
        "snippet": "  public void testMissingProperty18() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n  }\n",
        "begin_line": 7214,
        "end_line": 7218,
        "comment": "",
        "child_ranges": [
            "(line 7215,col 5)-(line 7217,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty19()",
        "snippet": "  public void testMissingProperty19() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\n        \"Property foo never defined on Object\");\n  }\n",
        "begin_line": 7220,
        "end_line": 7225,
        "comment": "",
        "child_ranges": [
            "(line 7221,col 5)-(line 7224,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty20()",
        "snippet": "  public void testMissingProperty20() throws Exception {\n    // NOTE(nicksantos): In the else branch, we know that x.foo is a\n    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could\n    // do some more sophisticated analysis here. Obviously, if x.foo is false,\n    // then x.foo cannot possibly be called. For example, you could imagine a\n    // VagueType that was like UnknownType, but had some constraints on it\n    // so that we knew it could never be a function.\n    //\n    // For now, we just punt on this issue.\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { if (x.foo) { } else { x.foo(); } }\");\n  }\n",
        "begin_line": 7227,
        "end_line": 7239,
        "comment": "",
        "child_ranges": [
            "(line 7236,col 5)-(line 7238,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty21()",
        "snippet": "  public void testMissingProperty21() throws Exception {\n    testTypes(\n        \"/** @param {Object} x */\" +\n        \"function f(x) { x.foo && x.foo(); }\");\n  }\n",
        "begin_line": 7241,
        "end_line": 7245,
        "comment": "",
        "child_ranges": [
            "(line 7242,col 5)-(line 7244,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty22()",
        "snippet": "  public void testMissingProperty22() throws Exception {\n    testTypes(\n        \"/** @param {Object} x \\n * @return {boolean} */\" +\n        \"function f(x) { return x.foo ? x.foo() : true; }\");\n  }\n",
        "begin_line": 7247,
        "end_line": 7251,
        "comment": "",
        "child_ranges": [
            "(line 7248,col 5)-(line 7250,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty23()",
        "snippet": "  public void testMissingProperty23() throws Exception {\n    testTypes(\n        \"function f(x) { x.impossible(); }\",\n        \"Property impossible never defined on x\");\n  }\n",
        "begin_line": 7253,
        "end_line": 7257,
        "comment": "",
        "child_ranges": [
            "(line 7254,col 5)-(line 7256,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty24()",
        "snippet": "  public void testMissingProperty24() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {MissingType} x */\" +\n        \"function f(x) { x.impossible(); }\", null);\n  }\n",
        "begin_line": 7259,
        "end_line": 7264,
        "comment": "",
        "child_ranges": [
            "(line 7260,col 5)-(line 7263,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty25()",
        "snippet": "  public void testMissingProperty25() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"(new FooAlias()).bar();\");\n  }\n",
        "begin_line": 7266,
        "end_line": 7272,
        "comment": "",
        "child_ranges": [
            "(line 7267,col 5)-(line 7271,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty26()",
        "snippet": "  public void testMissingProperty26() throws Exception {\n    testTypes(\n        \"/** @constructor */ var Foo = function() {};\" +\n        \"/** @constructor */ var FooAlias = Foo;\" +\n        \"FooAlias.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 7274,
        "end_line": 7280,
        "comment": "",
        "child_ranges": [
            "(line 7275,col 5)-(line 7279,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty27()",
        "snippet": "  public void testMissingProperty27() throws Exception {\n    testClosureTypes(\n        \"goog.addDependency('zzz.js', ['MissingType'], []);\" +\n        \"/** @param {?MissingType} x */\" +\n        \"function f(x) {\" +\n        \"  for (var parent = x; parent; parent = parent.getParent()) {}\" +\n        \"}\", null);\n  }\n",
        "begin_line": 7282,
        "end_line": 7289,
        "comment": "",
        "child_ranges": [
            "(line 7283,col 5)-(line 7288,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty28()",
        "snippet": "  public void testMissingProperty28() throws Exception {\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foo;\" +\n        \"}\");\n    testTypes(\n        \"function f(obj) {\" +\n        \"  /** @type {*} */ obj.foo;\" +\n        \"  return obj.foox;\" +\n        \"}\",\n        \"Property foox never defined on obj\");\n  }\n",
        "begin_line": 7291,
        "end_line": 7303,
        "comment": "",
        "child_ranges": [
            "(line 7292,col 5)-(line 7296,col 13)",
            "(line 7297,col 5)-(line 7302,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty29()",
        "snippet": "  public void testMissingProperty29() throws Exception {\n    // This used to emit a warning.\n    testTypes(\n        // externs\n        \"/** @constructor */ var Foo;\" +\n        \"Foo.prototype.opera;\" +\n        \"Foo.prototype.opera.postError;\",\n        \"\",\n        null,\n        false);\n  }\n",
        "begin_line": 7305,
        "end_line": 7315,
        "comment": "",
        "child_ranges": [
            "(line 7307,col 5)-(line 7314,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty30()",
        "snippet": "  public void testMissingProperty30() throws Exception {\n    testTypes(\n        \"/** @return {*} */\" +\n        \"function f() {\" +\n        \" return {};\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Object} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 7317,
        "end_line": 7325,
        "comment": "",
        "child_ranges": [
            "(line 7318,col 5)-(line 7324,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty31()",
        "snippet": "  public void testMissingProperty31() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Array} y */ function g(y) { return y.a; }\");\n  }\n",
        "begin_line": 7327,
        "end_line": 7335,
        "comment": "",
        "child_ranges": [
            "(line 7328,col 5)-(line 7334,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty32()",
        "snippet": "  public void testMissingProperty32() throws Exception {\n    testTypes(\n        \"/** @return {Array|number} */\" +\n        \"function f() {\" +\n        \" return [];\" +\n        \"}\" +\n        \"f().a = 3;\" +\n        \"/** @param {Date} y */ function g(y) { return y.a; }\",\n        \"Property a never defined on Date\");\n  }\n",
        "begin_line": 7337,
        "end_line": 7346,
        "comment": "",
        "child_ranges": [
            "(line 7338,col 5)-(line 7345,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty33()",
        "snippet": "  public void testMissingProperty33() throws Exception {\n    testTypes(\n      \"/** @param {Object} x */\" +\n      \"function f(x) { !x.foo || x.foo(); }\");\n  }\n",
        "begin_line": 7348,
        "end_line": 7352,
        "comment": "",
        "child_ranges": [
            "(line 7349,col 5)-(line 7351,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty34()",
        "snippet": "  public void testMissingProperty34() throws Exception {\n    testTypes(\n        \"/** @fileoverview \\n * @suppress {missingProperties} */\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.bar = function() { return this.a; };\" +\n        \"Foo.prototype.baz = function() { this.b = 3; };\");\n  }\n",
        "begin_line": 7354,
        "end_line": 7360,
        "comment": "",
        "child_ranges": [
            "(line 7355,col 5)-(line 7359,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty35()",
        "snippet": "  public void testMissingProperty35() throws Exception {\n    // Bar has specialProp defined, so Bar|Baz may have specialProp defined.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @constructor */ function Bar() {}\" +\n        \"/** @constructor */ function Baz() {}\" +\n        \"/** @param {Foo|Bar} x */ function f(x) { x.specialProp = 1; }\" +\n        \"/** @param {Bar|Baz} x */ function g(x) { return x.specialProp; }\");\n  }\n",
        "begin_line": 7362,
        "end_line": 7370,
        "comment": "",
        "child_ranges": [
            "(line 7364,col 5)-(line 7369,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testMissingProperty36()",
        "snippet": "  public void testMissingProperty36() throws Exception {\n    // Foo has baz defined, and SubFoo has bar defined, so some objects with\n    // bar may have baz.\n    testTypes(\n        \"/** @constructor */ function Foo() {}\" +\n        \"Foo.prototype.baz = 0;\" +\n        \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n        \"SubFoo.prototype.bar = 0;\" +\n        \"/** @param {{bar: number}} x */ function f(x) { return x.baz; }\");\n  }\n",
        "begin_line": 7372,
        "end_line": 7381,
        "comment": "",
        "child_ranges": [
            "(line 7375,col 5)-(line 7380,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends1()",
        "snippet": "  public void testLends1() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends */ ({bar: 1}));\",\n        \"Parse error. missing object name in @lends tag\");\n  }\n",
        "begin_line": 7383,
        "end_line": 7389,
        "comment": "",
        "child_ranges": [
            "(line 7384,col 5)-(line 7388,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends2()",
        "snippet": "  public void testLends2() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foob} */ ({bar: 1}));\",\n        \"Variable Foob not declared before @lends annotation.\");\n  }\n",
        "begin_line": 7391,
        "end_line": 7397,
        "comment": "",
        "child_ranges": [
            "(line 7392,col 5)-(line 7396,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends3()",
        "snippet": "  public void testLends3() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert(Foo.bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 7399,
        "end_line": 7406,
        "comment": "",
        "child_ranges": [
            "(line 7400,col 5)-(line 7405,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends4()",
        "snippet": "  public void testLends4() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\" +\n        \"alert(Foo.bar);\");\n  }\n",
        "begin_line": 7408,
        "end_line": 7414,
        "comment": "",
        "child_ranges": [
            "(line 7409,col 5)-(line 7413,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends5()",
        "snippet": "  public void testLends5() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, {bar: 1});\" +\n        \"alert((new Foo()).bar);\",\n        \"Property bar never defined on Foo\");\n  }\n",
        "begin_line": 7416,
        "end_line": 7423,
        "comment": "",
        "child_ranges": [
            "(line 7417,col 5)-(line 7422,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends6()",
        "snippet": "  public void testLends6() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype} */ ({bar: 1}));\" +\n        \"alert((new Foo()).bar);\");\n  }\n",
        "begin_line": 7425,
        "end_line": 7431,
        "comment": "",
        "child_ranges": [
            "(line 7426,col 5)-(line 7430,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends7()",
        "snippet": "  public void testLends7() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {Foo.prototype|Foo} */ ({bar: 1}));\",\n        \"Parse error. expected closing }\");\n  }\n",
        "begin_line": 7433,
        "end_line": 7439,
        "comment": "",
        "child_ranges": [
            "(line 7434,col 5)-(line 7438,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends8()",
        "snippet": "  public void testLends8() throws Exception {\n    testTypes(\n        \"function extend(x, y) {}\" +\n        \"/** @type {number} */ var Foo = 3;\" +\n        \"extend(Foo, /** @lends {Foo} */ ({bar: 1}));\",\n        \"May only lend properties to object types. Foo has type number.\");\n  }\n",
        "begin_line": 7441,
        "end_line": 7447,
        "comment": "",
        "child_ranges": [
            "(line 7442,col 5)-(line 7446,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testLends9()",
        "snippet": "  public void testLends9() throws Exception {\n    testClosureTypesMultipleWarnings(\n        \"function extend(x, y) {}\" +\n        \"/** @constructor */ function Foo() {}\" +\n        \"extend(Foo, /** @lends {!Foo} */ ({bar: 1}));\",\n        Lists.newArrayList(\n            \"Parse error. expected closing }\",\n            \"Parse error. missing object name in @lends tag\"));\n  }\n",
        "begin_line": 7449,
        "end_line": 7457,
        "comment": "",
        "child_ranges": [
            "(line 7450,col 5)-(line 7456,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
        "snippet": "  public void testDeclaredNativeTypeEquality() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Object() {};\");\n    assertEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),\n                 n.getFirstChild().getJSType());\n  }\n",
        "begin_line": 7459,
        "end_line": 7463,
        "comment": "",
        "child_ranges": [
            "(line 7460,col 5)-(line 7460,col 76)",
            "(line 7461,col 5)-(line 7462,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUndefinedVar()",
        "snippet": "  public void testUndefinedVar() throws Exception {\n    Node n = parseAndTypeCheck(\"var undefined;\");\n    assertEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),\n                 n.getFirstChild().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7465,
        "end_line": 7469,
        "comment": "",
        "child_ranges": [
            "(line 7466,col 5)-(line 7466,col 49)",
            "(line 7467,col 5)-(line 7468,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug1()",
        "snippet": "  public void testFlowScopeBug1() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @param {number} a \\n\"\n        + \"* @param {number} b */\\n\"\n        + \"function f(a, b) {\\n\"\n        + \"/** @type number */\"\n        + \"var i = 0;\"\n        + \"for (; (i + a) < b; ++i) {}}\");\n\n    // check the type of the add node for i + f\n    assertEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),\n        n.getFirstChild().getLastChild().getLastChild().getFirstChild()\n        .getNext().getFirstChild().getJSType());\n  }\n",
        "begin_line": 7471,
        "end_line": 7483,
        "comment": "",
        "child_ranges": [
            "(line 7472,col 5)-(line 7477,col 42)",
            "(line 7480,col 5)-(line 7482,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFlowScopeBug2()",
        "snippet": "  public void testFlowScopeBug2() throws Exception {\n    Node n = parseAndTypeCheck(\"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.hi = false;\"\n        + \"function foo(a, b) {\\n\"\n        + \"  /** @type Array */\"\n        + \"  var arr;\"\n        + \"  /** @type number */\"\n        + \"  var iter;\"\n        + \"  for (iter = 0; iter < arr.length; ++ iter) {\"\n        + \"    /** @type Foo */\"\n        + \"    var afoo = arr[iter];\"\n        + \"    afoo;\"\n        + \"  }\"\n        + \"}\");\n\n    // check the type of afoo when referenced\n    assertEquals(registry.createNullableType(registry.getType(\"Foo\")),\n        n.getLastChild().getLastChild().getLastChild().getLastChild()\n        .getLastChild().getLastChild().getJSType());\n  }\n",
        "begin_line": 7485,
        "end_line": 7504,
        "comment": "",
        "child_ranges": [
            "(line 7486,col 5)-(line 7498,col 15)",
            "(line 7501,col 5)-(line 7503,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
        "snippet": "  public void testAddSingletonGetter() {\n    Node n = parseAndTypeCheck(\n        \"/** @constructor */ function Foo() {};\\n\" +\n        \"goog.addSingletonGetter(Foo);\");\n    ObjectType o = (ObjectType) n.getFirstChild().getJSType();\n    assertEquals(\"function (): Foo\",\n        o.getPropertyType(\"getInstance\").toString());\n    assertEquals(\"Foo\", o.getPropertyType(\"instance_\").toString());\n  }\n",
        "begin_line": 7506,
        "end_line": 7514,
        "comment": "",
        "child_ranges": [
            "(line 7507,col 5)-(line 7509,col 41)",
            "(line 7510,col 5)-(line 7510,col 62)",
            "(line 7511,col 5)-(line 7512,col 53)",
            "(line 7513,col 5)-(line 7513,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
        "snippet": "  public void testTypeCheckStandaloneAST() throws Exception {\n    Node n = compiler.parseTestCode(\"function Foo() { }\");\n    typeCheck(n);\n    TypedScopeCreator scopeCreator = new TypedScopeCreator(compiler);\n    Scope topScope = scopeCreator.createScope(n, null);\n\n    Node second = compiler.parseTestCode(\"new Foo\");\n\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, second);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry, topScope, scopeCreator, CheckLevel.WARNING, CheckLevel.OFF)\n        .process(null, second);\n\n    assertEquals(1, compiler.getWarningCount());\n    assertEquals(\"cannot instantiate non-constructor\",\n        compiler.getWarnings()[0].description);\n  }\n",
        "begin_line": 7516,
        "end_line": 7538,
        "comment": "",
        "child_ranges": [
            "(line 7517,col 5)-(line 7517,col 58)",
            "(line 7518,col 5)-(line 7518,col 17)",
            "(line 7519,col 5)-(line 7519,col 69)",
            "(line 7520,col 5)-(line 7520,col 55)",
            "(line 7522,col 5)-(line 7522,col 52)",
            "(line 7524,col 5)-(line 7524,col 41)",
            "(line 7525,col 5)-(line 7525,col 66)",
            "(line 7526,col 5)-(line 7526,col 46)",
            "(line 7528,col 5)-(line 7533,col 31)",
            "(line 7535,col 5)-(line 7535,col 48)",
            "(line 7536,col 5)-(line 7537,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
        "snippet": "  public void testUpdateParameterTypeOnClosure() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {*=} opt_value\\n\" +\n        \"* @return {?}\\n\" +\n        \"*/\\n\" +\n        \"function Object(opt_value) {}\\n\" +\n        \"/**\\n\" +\n        \"* @constructor\\n\" +\n        \"* @param {...*} var_args\\n\" +\n        \"*/\\n\" +\n        \"function Function(var_args) {}\\n\" +\n        \"/**\\n\" +\n        \"* @type {Function}\\n\" +\n        \"*/\\n\" +\n        // The line below sets JSDocInfo on Object so that the type of the\n        // argument to function f has JSDoc through its prototype chain.\n        \"Object.prototype.constructor = function() {};\\n\",\n        \"/**\\n\" +\n        \"* @param {function(): boolean} fn\\n\" +\n        \"*/\\n\" +\n        \"function f(fn) {}\\n\" +\n        \"f(function(g) { });\\n\",\n        null,\n        false);\n  }\n",
        "begin_line": 7540,
        "end_line": 7566,
        "comment": "",
        "child_ranges": [
            "(line 7541,col 5)-(line 7565,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType1()",
        "snippet": "  public void testBadTemplateType1() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {T} y\\n\" +\n        \"* @param {function(this:T, ...)} z\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y, z) {}\\n\" +\n        \"f(this, this, function() {});\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n  }\n",
        "begin_line": 7568,
        "end_line": 7579,
        "comment": "",
        "child_ranges": [
            "(line 7569,col 5)-(line 7578,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType2()",
        "snippet": "  public void testBadTemplateType2() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @param {T} x\\n\" +\n        \"* @param {function(this:T, ...)} y\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x, y) {}\\n\" +\n        \"f(0, function() {});\",\n        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(), true);\n  }\n",
        "begin_line": 7581,
        "end_line": 7591,
        "comment": "",
        "child_ranges": [
            "(line 7582,col 5)-(line 7590,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType3()",
        "snippet": "  public void testBadTemplateType3() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \" * @param {T} x\\n\" +\n        \" * @template T\\n\" +\n        \"*/\\n\" +\n        \"function f(x) {}\\n\" +\n        \"f(this);\",\n        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(), true);\n  }\n",
        "begin_line": 7593,
        "end_line": 7602,
        "comment": "",
        "child_ranges": [
            "(line 7594,col 5)-(line 7601,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType4()",
        "snippet": "  public void testBadTemplateType4() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 7604,
        "end_line": 7612,
        "comment": "",
        "child_ranges": [
            "(line 7605,col 5)-(line 7611,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testBadTemplateType5()",
        "snippet": "  public void testBadTemplateType5() throws Exception {\n    testTypes(\n        \"/**\\n\" +\n        \"* @template T\\n\" +\n        \"* @return {T}\\n\" +\n        \"*/\\n\" +\n        \"function f() {}\\n\" +\n        \"f();\",\n        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n  }\n",
        "begin_line": 7614,
        "end_line": 7623,
        "comment": "",
        "child_ranges": [
            "(line 7615,col 5)-(line 7622,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralUndefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralUndefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; });\",\n        \"Function literal argument refers to undefined this argument\");\n  }\n",
        "begin_line": 7625,
        "end_line": 7635,
        "comment": "",
        "child_ranges": [
            "(line 7626,col 5)-(line 7634,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
        "snippet": "  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n    testTypes(\"\"\n        + \"/**\\n\"\n        + \" * @param {function(this:T, ...)?} fn\\n\"\n        + \" * @param {?T} opt_obj\\n\"\n        + \" * @template T\\n\"\n        + \" */\\n\"\n        + \"function baz(fn, opt_obj) {}\\n\"\n        + \"baz(function() { this; }, {});\");\n  }\n",
        "begin_line": 7637,
        "end_line": 7646,
        "comment": "",
        "child_ranges": [
            "(line 7638,col 5)-(line 7645,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testActiveXObject()",
        "snippet": "  public void testActiveXObject() throws Exception {\n    testTypes(\n        \"/** @type {Object} */ var x = new ActiveXObject();\" +\n        \"/** @type { {impossibleProperty} } */ var y = new ActiveXObject();\");\n  }\n",
        "begin_line": 7648,
        "end_line": 7652,
        "comment": "",
        "child_ranges": [
            "(line 7649,col 5)-(line 7651,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.checkObjectType(com.google.javascript.rhino.jstype.ObjectType, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void checkObjectType(ObjectType objectType, String propertyName,\n        JSType expectedType) {\n    assertTrue(\"Expected \" + objectType.getReferenceName() +\n        \" to have property \" +\n        propertyName, objectType.hasProperty(propertyName));\n    assertEquals(\"Expected \" + objectType.getReferenceName() +\n        \"'s property \" +\n        propertyName + \" to have type \" + expectedType,\n        expectedType, objectType.getPropertyType(propertyName));\n  }\n",
        "begin_line": 7654,
        "end_line": 7663,
        "comment": "",
        "child_ranges": [
            "(line 7656,col 5)-(line 7658,col 60)",
            "(line 7659,col 5)-(line 7662,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
        "snippet": "  private void testTypes(String js) throws Exception {\n    testTypes(js, (String) null);\n  }\n",
        "begin_line": 7665,
        "end_line": 7667,
        "comment": "",
        "child_ranges": [
            "(line 7666,col 5)-(line 7666,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testTypes(String js, String description) throws Exception {\n    testTypes(js, description, false);\n  }\n",
        "begin_line": 7669,
        "end_line": 7671,
        "comment": "",
        "child_ranges": [
            "(line 7670,col 5)-(line 7670,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testTypes(String js, DiagnosticType type) throws Exception {\n    testTypes(js, type.format(), false);\n  }\n",
        "begin_line": 7673,
        "end_line": 7675,
        "comment": "",
        "child_ranges": [
            "(line 7674,col 5)-(line 7674,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
        "snippet": "  private void testClosureTypes(String js, String description)\n      throws Exception {\n    testClosureTypesMultipleWarnings(js,\n        description == null ? null : Lists.newArrayList(description));\n  }\n",
        "begin_line": 7677,
        "end_line": 7681,
        "comment": "",
        "child_ranges": [
            "(line 7679,col 5)-(line 7680,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List<java.lang.String>)",
        "snippet": "  private void testClosureTypesMultipleWarnings(\n      String js, List<String> descriptions) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    Node externs = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externs, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    // For processing goog.addDependency for forward typedefs.\n    new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)\n        .process(null, n);\n\n    CodingConvention convention = compiler.getCodingConvention();\n    new TypeCheck(compiler,\n        new ClosureReverseAbstractInterpreter(\n            convention, registry).append(\n                new SemanticReverseAbstractInterpreter(\n                    convention, registry))\n            .getFirst(),\n        registry)\n        .processForTesting(null, n);\n\n    assertEquals(0, compiler.getErrorCount());\n\n    if (descriptions == null) {\n      assertEquals(\n          \"unexpected warning(s) : \" +\n          Joiner.on(\", \").join(compiler.getWarnings()),\n          0, compiler.getWarningCount());\n    } else {\n      assertEquals(descriptions.size(), compiler.getWarningCount());\n      for (int i = 0; i < descriptions.size(); i++) {\n        assertEquals(descriptions.get(i),\n            compiler.getWarnings()[i].description);\n      }\n    }\n  }\n",
        "begin_line": 7683,
        "end_line": 7722,
        "comment": "",
        "child_ranges": [
            "(line 7685,col 5)-(line 7685,col 40)",
            "(line 7686,col 5)-(line 7686,col 41)",
            "(line 7687,col 5)-(line 7687,col 61)",
            "(line 7688,col 5)-(line 7688,col 46)",
            "(line 7690,col 5)-(line 7692,col 37)",
            "(line 7695,col 5)-(line 7696,col 26)",
            "(line 7698,col 5)-(line 7698,col 65)",
            "(line 7699,col 5)-(line 7706,col 36)",
            "(line 7708,col 5)-(line 7708,col 46)",
            "(line 7710,col 5)-(line 7721,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String js, String description, boolean isError)\n      throws Exception {\n    testTypes(DEFAULT_EXTERNS, js, description, isError);\n  }\n",
        "begin_line": 7724,
        "end_line": 7727,
        "comment": "",
        "child_ranges": [
            "(line 7726,col 5)-(line 7726,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
        "snippet": "  void testTypes(String externs, String js, String description, boolean isError)\n      throws Exception {\n    Node n = parseAndTypeCheck(externs, js);\n\n    JSError[] errors = compiler.getErrors();\n    if (description != null && isError) {\n      assertTrue(\"expected an error\", errors.length > 0);\n      assertEquals(description, errors[0].description);\n      errors = Arrays.asList(errors).subList(1, errors.length).toArray(\n          new JSError[errors.length - 1]);\n    }\n    if (errors.length > 0) {\n      fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n    }\n\n    JSError[] warnings = compiler.getWarnings();\n    if (description != null && !isError) {\n      assertTrue(\"expected a warning\", warnings.length > 0);\n      assertEquals(description, warnings[0].description);\n      warnings = Arrays.asList(warnings).subList(1, warnings.length).toArray(\n          new JSError[warnings.length - 1]);\n    }\n    if (warnings.length > 0) {\n      fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n    }\n  }\n",
        "begin_line": 7729,
        "end_line": 7754,
        "comment": "",
        "child_ranges": [
            "(line 7731,col 5)-(line 7731,col 44)",
            "(line 7733,col 5)-(line 7733,col 44)",
            "(line 7734,col 5)-(line 7739,col 5)",
            "(line 7740,col 5)-(line 7742,col 5)",
            "(line 7744,col 5)-(line 7744,col 48)",
            "(line 7745,col 5)-(line 7750,col 5)",
            "(line 7751,col 5)-(line 7753,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String js) {\n    return parseAndTypeCheck(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7759,
        "end_line": 7761,
        "comment": "\n   * Parses and type checks the JavaScript code.\n   ",
        "child_ranges": [
            "(line 7760,col 5)-(line 7760,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
        "snippet": "  private Node parseAndTypeCheck(String externs, String js) {\n    return parseAndTypeCheckWithScope(externs, js).root;\n  }\n",
        "begin_line": 7763,
        "end_line": 7765,
        "comment": "",
        "child_ranges": [
            "(line 7764,col 5)-(line 7764,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(String js) {\n    return parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n  }\n",
        "begin_line": 7771,
        "end_line": 7773,
        "comment": "\n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
        "child_ranges": [
            "(line 7772,col 5)-(line 7772,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
        "snippet": "  private TypeCheckResult parseAndTypeCheckWithScope(\n      String externs, String js) {\n    compiler.init(\n        Lists.newArrayList(JSSourceFile.fromCode(\"[externs]\", externs)),\n        Lists.newArrayList(JSSourceFile.fromCode(\"[testcode]\", js)),\n        compiler.getOptions());\n\n    Node n = compiler.getInput(\"[testcode]\").getAstRoot(compiler);\n    Node externsNode = compiler.getInput(\"[externs]\").getAstRoot(compiler);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    assertEquals(\"parsing error: \" +\n        Joiner.on(\", \").join(compiler.getErrors()),\n        0, compiler.getErrorCount());\n\n    Scope s = makeTypeCheck().processForTesting(externsNode, n);\n    return new TypeCheckResult(n, s);\n  }\n",
        "begin_line": 7775,
        "end_line": 7793,
        "comment": "",
        "child_ranges": [
            "(line 7777,col 5)-(line 7780,col 31)",
            "(line 7782,col 5)-(line 7782,col 66)",
            "(line 7783,col 5)-(line 7783,col 75)",
            "(line 7784,col 5)-(line 7784,col 65)",
            "(line 7785,col 5)-(line 7785,col 46)",
            "(line 7787,col 5)-(line 7789,col 37)",
            "(line 7791,col 5)-(line 7791,col 64)",
            "(line 7792,col 5)-(line 7792,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(com.google.javascript.rhino.Node)",
        "snippet": "  private Node typeCheck(Node n) {\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    makeTypeCheck().processForTesting(null, n);\n    return n;\n  }\n",
        "begin_line": 7795,
        "end_line": 7802,
        "comment": "",
        "child_ranges": [
            "(line 7796,col 5)-(line 7796,col 45)",
            "(line 7797,col 5)-(line 7797,col 65)",
            "(line 7798,col 5)-(line 7798,col 46)",
            "(line 7800,col 5)-(line 7800,col 47)",
            "(line 7801,col 5)-(line 7801,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
        "snippet": "  private TypeCheck makeTypeCheck() {\n    return new TypeCheck(\n        compiler,\n        new SemanticReverseAbstractInterpreter(\n            compiler.getCodingConvention(), registry),\n        registry,\n        reportMissingOverrides,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 7804,
        "end_line": 7812,
        "comment": "",
        "child_ranges": [
            "(line 7805,col 5)-(line 7811,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
        "snippet": "  void testTypes(String js, String[] warnings) throws Exception {\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    Node externsNode = new Node(Token.BLOCK);\n    Node externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\n\n    makeTypeCheck().processForTesting(null, n);\n    assertEquals(0, compiler.getErrorCount());\n    if (warnings != null) {\n      assertEquals(warnings.length, compiler.getWarningCount());\n      JSError[] messages = compiler.getWarnings();\n      for (int i = 0; i < warnings.length && i < compiler.getWarningCount();\n           i++) {\n        assertEquals(warnings[i], messages[i].description);\n      }\n    } else {\n      assertEquals(0, compiler.getWarningCount());\n    }\n  }\n",
        "begin_line": 7814,
        "end_line": 7832,
        "comment": "",
        "child_ranges": [
            "(line 7815,col 5)-(line 7815,col 40)",
            "(line 7816,col 5)-(line 7816,col 46)",
            "(line 7817,col 5)-(line 7817,col 45)",
            "(line 7818,col 5)-(line 7818,col 65)",
            "(line 7820,col 5)-(line 7820,col 47)",
            "(line 7821,col 5)-(line 7821,col 46)",
            "(line 7822,col 5)-(line 7831,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String...)",
        "snippet": "  String suppressMissingProperty(String ... props) {\n    String result = \"function dummy(x) { \";\n    for (String prop : props) {\n      result += \"x.\" + prop + \" = 3;\";\n    }\n    return result + \"}\";\n  }\n",
        "begin_line": 7834,
        "end_line": 7840,
        "comment": "",
        "child_ranges": [
            "(line 7835,col 5)-(line 7835,col 43)",
            "(line 7836,col 5)-(line 7838,col 5)",
            "(line 7839,col 5)-(line 7839,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheckTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult.TypeCheckResult(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "    private TypeCheckResult(Node root, Scope scope) {\n      this.root = root;\n      this.scope = scope;\n    }\n",
        "begin_line": 7846,
        "end_line": 7849,
        "comment": "",
        "child_ranges": [
            "(line 7847,col 7)-(line 7847,col 23)",
            "(line 7848,col 7)-(line 7848,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    return options;\n  }\n",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 61,col 5)-(line 61,col 52)",
            "(line 62,col 5)-(line 63,col 65)",
            "(line 64,col 5)-(line 64,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.TypeCheckTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 30)",
            "(line 70,col 5)-(line 70,col 39)",
            "(line 71,col 5)-(line 71,col 42)",
            "(line 72,col 5)-(line 72,col 16)"
        ]
    }
]