[
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestCompiler.class);\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.TestCompiler(java.lang.String)",
        "snippet": "    public TestCompiler(String name) {\n        super(name);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        originalDateTimeZone = DateTimeZone.getDefault();\n        DateTimeZone.setDefault(DateTimeZone.UTC);\n    }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 57)",
            "(line 80,col 9)-(line 80,col 50)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeZone.setDefault(originalDateTimeZone);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 54)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.testDateTimeZoneBuilder()",
        "snippet": "    public void testDateTimeZoneBuilder() throws Exception {\n        // test multithreading, issue #18\n        getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n        final DateTimeZone[] zone = new DateTimeZone[1];\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n            }\n        });\n        t.start();\n        t.join();\n        assertNotNull(zone[0]);\n    }\n",
        "begin_line": 88,
        "end_line": 100,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 70)",
            "(line 91,col 9)-(line 91,col 56)",
            "(line 92,col 9)-(line 96,col 11)",
            "(line 97,col 9)-(line 97,col 18)",
            "(line 98,col 9)-(line 98,col 17)",
            "(line 99,col 9)-(line 99,col 31)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.Anonymous-c48b3e2e-1da4-4625-b2af-02560affd7a8.run()",
        "snippet": "            public void run() {\n                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n            }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 94,col 17)-(line 94,col 88)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.getTestDataTimeZoneBuilder()",
        "snippet": "    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {\n         return new DateTimeZoneBuilder()\n             .addCutover(1601, 'w', 1, 1, 1, false, 7200000)\n             .setStandardOffset(3600000)\n             .addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)\n             .addRecurringSavings(\"\", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);\n    }    \n",
        "begin_line": 102,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 103,col 10)-(line 107,col 99)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.testCompile()",
        "snippet": "    public void testCompile() throws Exception {\n        Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);\n        DateTimeZone tz = provider.getZone(\"America/Los_Angeles\");\n\n        assertEquals(\"America/Los_Angeles\", tz.getID());\n        assertEquals(false, tz.isFixed());\n        TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n        TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n    }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 69)",
            "(line 113,col 9)-(line 113,col 66)",
            "(line 115,col 9)-(line 115,col 56)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 117,col 9)-(line 117,col 85)",
            "(line 118,col 9)-(line 118,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.compileAndLoad(java.lang.String)",
        "snippet": "    private Provider compileAndLoad(String data) throws Exception {\n        File tempDir = createDataFile(data);\n        File destDir = makeTempDir();\n\n        ZoneInfoCompiler.main(new String[] {\n            \"-src\", tempDir.getAbsolutePath(),\n            \"-dst\", destDir.getAbsolutePath(),\n            \"tzdata\"\n        });\n\n        // Mark all files to be deleted on exit.\n        deleteOnExit(destDir);\n\n        return new ZoneInfoProvider(destDir);\n    }\n",
        "begin_line": 121,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 44)",
            "(line 123,col 9)-(line 123,col 37)",
            "(line 125,col 9)-(line 129,col 11)",
            "(line 132,col 9)-(line 132,col 30)",
            "(line 134,col 9)-(line 134,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.createDataFile(java.lang.String)",
        "snippet": "    private File createDataFile(String data) throws IOException {\n        File tempDir = makeTempDir();\n\n        File tempFile = new File(tempDir, \"tzdata\");\n        tempFile.deleteOnExit();\n\n        InputStream in = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));\n\n        FileOutputStream out = new FileOutputStream(tempFile);\n        byte[] buf = new byte[1000];\n        int amt;\n        while ((amt = in.read(buf)) > 0) {\n            out.write(buf, 0, amt);\n        }\n        out.close();\n        in.close();\n\n        return tempDir;\n    }\n",
        "begin_line": 137,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 138,col 9)-(line 138,col 37)",
            "(line 140,col 9)-(line 140,col 52)",
            "(line 141,col 9)-(line 141,col 32)",
            "(line 143,col 9)-(line 143,col 74)",
            "(line 145,col 9)-(line 145,col 62)",
            "(line 146,col 9)-(line 146,col 36)",
            "(line 147,col 9)-(line 147,col 16)",
            "(line 148,col 9)-(line 150,col 9)",
            "(line 151,col 9)-(line 151,col 20)",
            "(line 152,col 9)-(line 152,col 19)",
            "(line 154,col 9)-(line 154,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.makeTempDir()",
        "snippet": "    private File makeTempDir() {\n        File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n        tempDir = new File(tempDir, \"joda-test-\" + (new java.util.Random().nextInt() & 0xffffff));\n        tempDir.mkdirs();\n        tempDir.deleteOnExit();\n        return tempDir;\n    }\n",
        "begin_line": 157,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 158,col 9)-(line 158,col 70)",
            "(line 159,col 9)-(line 159,col 98)",
            "(line 160,col 9)-(line 160,col 25)",
            "(line 161,col 9)-(line 161,col 31)",
            "(line 162,col 9)-(line 162,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.deleteOnExit(java.io.File)",
        "snippet": "    private void deleteOnExit(File tempFile) {\n        tempFile.deleteOnExit();\n        if (tempFile.isDirectory()) {\n            File[] files = tempFile.listFiles();\n            for (int i=0; i<files.length; i++) {\n                deleteOnExit(files[i]);\n            }\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 32)",
            "(line 167,col 9)-(line 172,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_2400_fromDay()",
        "snippet": "    public void test_2400_fromDay() {\n        StringTokenizer st = new StringTokenizer(\"Apr Sun>=1  24:00\");\n        DateTimeOfYear test = new DateTimeOfYear(st);\n        assertEquals(4, test.iMonthOfYear);  // Apr\n        assertEquals(2, test.iDayOfMonth);   // 2nd\n        assertEquals(1, test.iDayOfWeek);    // Mon\n        assertEquals(0, test.iMillisOfDay);  // 00:00\n        assertEquals(true, test.iAdvanceDayOfWeek);\n    }\n",
        "begin_line": 176,
        "end_line": 184,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 177,col 9)-(line 177,col 70)",
            "(line 178,col 9)-(line 178,col 53)",
            "(line 179,col 9)-(line 179,col 43)",
            "(line 180,col 9)-(line 180,col 42)",
            "(line 181,col 9)-(line 181,col 41)",
            "(line 182,col 9)-(line 182,col 43)",
            "(line 183,col 9)-(line 183,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_2400_last()",
        "snippet": "    public void test_2400_last() {\n        StringTokenizer st = new StringTokenizer(\"Mar lastSun 24:00\");\n        DateTimeOfYear test = new DateTimeOfYear(st);\n        assertEquals(4, test.iMonthOfYear);  // Apr\n        assertEquals(1, test.iDayOfMonth);   // 1st\n        assertEquals(1, test.iDayOfWeek);    // Mon\n        assertEquals(0, test.iMillisOfDay);  // 00:00\n        assertEquals(false, test.iAdvanceDayOfWeek);\n    }\n",
        "begin_line": 186,
        "end_line": 194,
        "comment": "",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 70)",
            "(line 188,col 9)-(line 188,col 53)",
            "(line 189,col 9)-(line 189,col 43)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 191,col 9)-(line 191,col 41)",
            "(line 192,col 9)-(line 192,col 43)",
            "(line 193,col 9)-(line 193,col 52)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_Amman_2003()",
        "snippet": "    public void test_Amman_2003() {\n        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n        DateTime dt = new DateTime(2003, 3, 1, 0, 0, zone);\n        long next = zone.nextTransition(dt.getMillis());\n        assertEquals(next, new DateTime(2003, 3, 28, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n    }\n",
        "begin_line": 196,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 61)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 56)",
            "(line 200,col 9)-(line 200,col 104)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_Amman_2004()",
        "snippet": "    public void test_Amman_2004() {\n        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n        DateTime dt = new DateTime(2004, 3, 1, 0, 0, zone);\n        long next = zone.nextTransition(dt.getMillis());\n        assertEquals(next, new DateTime(2004, 3, 26, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n    }\n",
        "begin_line": 203,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 61)",
            "(line 205,col 9)-(line 205,col 59)",
            "(line 206,col 9)-(line 206,col 56)",
            "(line 207,col 9)-(line 207,col 104)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_Amman_2005()",
        "snippet": "    public void test_Amman_2005() {\n        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n        DateTime dt = new DateTime(2005, 3, 1, 0, 0, zone);\n        long next = zone.nextTransition(dt.getMillis());\n        assertEquals(next, new DateTime(2005, 4, 1, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n    }\n",
        "begin_line": 210,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 61)",
            "(line 212,col 9)-(line 212,col 59)",
            "(line 213,col 9)-(line 213,col 56)",
            "(line 214,col 9)-(line 214,col 103)"
        ]
    },
    {
        "class_name": "org.joda.time.tz.TestCompiler",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/tz/TestCompiler.java",
        "signature": "org.joda.time.tz.TestCompiler.test_Amman_2006()",
        "snippet": "    public void test_Amman_2006() {\n        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n        DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone);\n        long next = zone.nextTransition(dt.getMillis());\n        assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n    }\n",
        "begin_line": 217,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 218,col 9)-(line 218,col 61)",
            "(line 219,col 9)-(line 219,col 59)",
            "(line 220,col 9)-(line 220,col 56)",
            "(line 221,col 9)-(line 221,col 104)"
        ]
    }
]