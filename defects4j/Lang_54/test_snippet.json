[
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.LocaleUtilsTest(java.lang.String)",
        "snippet": "    public LocaleUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "\n     * Constructor.\n     * \n     * @param name\n     ",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Main.\n     * @param args\n     ",
        "child_ranges": [
            "(line 65,col 9)-(line 65,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(LocaleUtilsTest.class);\n        suite.setName(\"LocaleUtilsTest Tests\");\n        return suite;\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "\n     * Run the test cases as a suite.\n     * @return the Test\n     ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 63)",
            "(line 74,col 9)-(line 74,col 47)",
            "(line 75,col 9)-(line 75,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.setUp()",
        "snippet": "    public void setUp() throws Exception {\n        super.setUp();\n\n        // Testing #LANG-304. Must be called before availableLocaleSet is called.\n        LocaleUtils.isAvailableLocale(Locale.getDefault());\n    }\n",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 22)",
            "(line 82,col 9)-(line 82,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new LocaleUtils());\n        Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n    }\n",
        "begin_line": 89,
        "end_line": 96,
        "comment": "\n     * Test that constructors are public, and work, etc.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 41)",
            "(line 91,col 9)-(line 91,col 73)",
            "(line 92,col 9)-(line 92,col 37)",
            "(line 93,col 9)-(line 93,col 70)",
            "(line 94,col 9)-(line 94,col 80)",
            "(line 95,col 9)-(line 95,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String)",
        "snippet": "    private void assertValidToLocale(String language) {\n        Locale locale = LocaleUtils.toLocale(language);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        //country and variant are empty\n        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }\n",
        "begin_line": 104,
        "end_line": 111,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param language  the language string\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 55)",
            "(line 106,col 9)-(line 106,col 46)",
            "(line 107,col 9)-(line 107,col 53)",
            "(line 109,col 9)-(line 109,col 85)",
            "(line 110,col 9)-(line 110,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(String localeString, String language, String country) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        //variant is empty\n        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n    }\n",
        "begin_line": 120,
        "end_line": 127,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     ",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 59)",
            "(line 122,col 9)-(line 122,col 46)",
            "(line 123,col 9)-(line 123,col 53)",
            "(line 124,col 9)-(line 124,col 51)",
            "(line 126,col 9)-(line 126,col 85)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertValidToLocale(\n            String localeString, String language, \n            String country, String variant) {\n        Locale locale = LocaleUtils.toLocale(localeString);\n        assertNotNull(\"valid locale\", locale);\n        assertEquals(language, locale.getLanguage());\n        assertEquals(country, locale.getCountry());\n        assertEquals(variant, locale.getVariant());\n        \n    }\n",
        "begin_line": 137,
        "end_line": 146,
        "comment": "\n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     * @param variant of the resulting Locale\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 59)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 53)",
            "(line 143,col 9)-(line 143,col 51)",
            "(line 144,col 9)-(line 144,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part()",
        "snippet": "    public void testToLocale_1Part() {\n        assertEquals(null, LocaleUtils.toLocale((String) null));\n        \n        assertValidToLocale(\"us\");\n        assertValidToLocale(\"fr\");\n        assertValidToLocale(\"de\");\n        assertValidToLocale(\"zh\");\n        // Valid format but lang doesnt exist, should make instance anyway\n        assertValidToLocale(\"qq\");\n        \n        try {\n            LocaleUtils.toLocale(\"Us\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"US\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"u#\");\n            fail(\"Should fail if not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        \n        try {\n            LocaleUtils.toLocale(\"u\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n       \n        try {\n            LocaleUtils.toLocale(\"uuu\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n\n        try {\n            LocaleUtils.toLocale(\"uu_U\");\n            fail(\"Must be 2 chars if less than 5\");\n        } catch (IllegalArgumentException iae) {}\n    }        \n",
        "begin_line": 151,
        "end_line": 192,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 152,col 9)-(line 152,col 64)",
            "(line 154,col 9)-(line 154,col 34)",
            "(line 155,col 9)-(line 155,col 34)",
            "(line 156,col 9)-(line 156,col 34)",
            "(line 157,col 9)-(line 157,col 34)",
            "(line 159,col 9)-(line 159,col 34)",
            "(line 161,col 9)-(line 164,col 49)",
            "(line 165,col 9)-(line 168,col 49)",
            "(line 169,col 9)-(line 172,col 49)",
            "(line 173,col 9)-(line 176,col 49)",
            "(line 178,col 9)-(line 181,col 49)",
            "(line 183,col 9)-(line 186,col 49)",
            "(line 188,col 9)-(line 191,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part()",
        "snippet": "    public void testToLocale_2Part() {\n        assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n        //valid though doesnt exist\n        assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n        \n        try {\n            LocaleUtils.toLocale(\"us-EN\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_En\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_en\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_eN\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uS_EN\");\n            fail(\"Should fail first part not lowercase\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"us_E3\");\n            fail(\"Should fail second part not uppercase\");\n        } catch (IllegalArgumentException iae) {}\n    }        \n",
        "begin_line": 197,
        "end_line": 226,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 198,col 49)",
            "(line 200,col 9)-(line 200,col 49)",
            "(line 202,col 9)-(line 205,col 49)",
            "(line 206,col 9)-(line 209,col 49)",
            "(line 210,col 9)-(line 213,col 49)",
            "(line 214,col 9)-(line 217,col 49)",
            "(line 218,col 9)-(line 221,col 49)",
            "(line 222,col 9)-(line 225,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part()",
        "snippet": "    public void testToLocale_3Part() {\n        assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n        // this isn't pretty, but was caused by a jdk bug it seems\n        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n        } else {\n            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\n            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\n        }\n        \n        try {\n            LocaleUtils.toLocale(\"us_EN-a\");\n            fail(\"Should fail as not underscore\");\n        } catch (IllegalArgumentException iae) {}\n        try {\n            LocaleUtils.toLocale(\"uu_UU_\");\n            fail(\"Must be 3, 5 or 7+ in length\");\n        } catch (IllegalArgumentException iae) {}\n    }\n",
        "begin_line": 231,
        "end_line": 251,
        "comment": "\n     * Test toLocale() method.\n     ",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 56)",
            "(line 235,col 9)-(line 241,col 9)",
            "(line 243,col 9)-(line 246,col 49)",
            "(line 247,col 9)-(line 250,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLocaleLookupList(java.util.Locale, java.util.Locale, java.util.Locale[])",
        "snippet": "    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n        List localeList = defaultLocale == null ?\n                LocaleUtils.localeLookupList(locale) :\n                LocaleUtils.localeLookupList(locale, defaultLocale);\n        \n        assertEquals(expected.length, localeList.size());\n        assertEquals(Arrays.asList(expected), localeList);\n        assertUnmodifiableCollection(localeList);\n    }\n",
        "begin_line": 261,
        "end_line": 269,
        "comment": "\n     * Helper method for local lookups.\n     *\n     * @param locale  the input locale\n     * @param defaultLocale  the input default locale\n     * @param expected  expected results\n     ",
        "child_ranges": [
            "(line 262,col 9)-(line 264,col 68)",
            "(line 266,col 9)-(line 266,col 57)",
            "(line 267,col 9)-(line 267,col 58)",
            "(line 268,col 9)-(line 268,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale()",
        "snippet": "    public void testLocaleLookupList_Locale() {\n        assertLocaleLookupList(null, null, new Locale[0]);\n        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, null,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n    }        \n",
        "begin_line": 275,
        "end_line": 289,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 58)",
            "(line 277,col 9)-(line 277,col 73)",
            "(line 278,col 9)-(line 278,col 73)",
            "(line 279,col 9)-(line 279,col 73)",
            "(line 280,col 9)-(line 283,col 28)",
            "(line 284,col 9)-(line 288,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale()",
        "snippet": "    public void testLocaleLookupList_LocaleLocale() {\n        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n                new Locale[]{LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n                new Locale[]{LOCALE_EN});\n        \n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n            new Locale[]{\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        \n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ});\n        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n            new Locale[] {\n                LOCALE_EN_US_ZZZZ,\n                LOCALE_EN_US,\n                LOCALE_EN,\n                LOCALE_QQ_ZZ});\n        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n            new Locale[] {\n                LOCALE_FR_CA,\n                LOCALE_FR,\n                LOCALE_EN});\n    }\n",
        "begin_line": 294,
        "end_line": 342,
        "comment": "\n     * Test localeLookupList() method.\n     ",
        "child_ranges": [
            "(line 295,col 9)-(line 296,col 41)",
            "(line 297,col 9)-(line 298,col 41)",
            "(line 300,col 9)-(line 303,col 28)",
            "(line 304,col 9)-(line 308,col 28)",
            "(line 309,col 9)-(line 313,col 31)",
            "(line 315,col 9)-(line 319,col 28)",
            "(line 320,col 9)-(line 324,col 28)",
            "(line 325,col 9)-(line 330,col 28)",
            "(line 331,col 9)-(line 336,col 31)",
            "(line 337,col 9)-(line 341,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList()",
        "snippet": "    public void testAvailableLocaleList() {\n        List list = LocaleUtils.availableLocaleList();\n        List list2 = LocaleUtils.availableLocaleList();\n        assertNotNull(list);\n        assertSame(list, list2);\n        assertUnmodifiableCollection(list);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        assertEquals(jdkLocaleList, list);\n    }\n",
        "begin_line": 348,
        "end_line": 358,
        "comment": "\n     * Test availableLocaleList() method.\n     ",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 54)",
            "(line 350,col 9)-(line 350,col 55)",
            "(line 351,col 9)-(line 351,col 28)",
            "(line 352,col 9)-(line 352,col 32)",
            "(line 353,col 9)-(line 353,col 43)",
            "(line 355,col 9)-(line 355,col 63)",
            "(line 356,col 9)-(line 356,col 59)",
            "(line 357,col 9)-(line 357,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet()",
        "snippet": "    public void testAvailableLocaleSet() {\n        Set set = LocaleUtils.availableLocaleSet();\n        Set set2 = LocaleUtils.availableLocaleSet();\n        assertNotNull(set);\n        assertSame(set, set2);\n        assertUnmodifiableCollection(set);\n        \n        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n        Set jdkLocaleSet = new HashSet(jdkLocaleList);\n        assertEquals(jdkLocaleSet, set);\n    }\n",
        "begin_line": 364,
        "end_line": 375,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 365,col 9)-(line 365,col 51)",
            "(line 366,col 9)-(line 366,col 52)",
            "(line 367,col 9)-(line 367,col 27)",
            "(line 368,col 9)-(line 368,col 30)",
            "(line 369,col 9)-(line 369,col 42)",
            "(line 371,col 9)-(line 371,col 63)",
            "(line 372,col 9)-(line 372,col 59)",
            "(line 373,col 9)-(line 373,col 54)",
            "(line 374,col 9)-(line 374,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale()",
        "snippet": "    public void testIsAvailableLocale() {\n        Set set = LocaleUtils.availableLocaleSet();\n        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n    }\n",
        "begin_line": 381,
        "end_line": 390,
        "comment": "\n     * Test availableLocaleSet() method.\n     ",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 51)",
            "(line 383,col 9)-(line 383,col 88)",
            "(line 384,col 9)-(line 384,col 94)",
            "(line 385,col 9)-(line 385,col 104)",
            "(line 386,col 9)-(line 386,col 88)",
            "(line 387,col 9)-(line 387,col 94)",
            "(line 388,col 9)-(line 388,col 88)",
            "(line 389,col 9)-(line 389,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertLanguageByCountry(String country, String[] languages) {\n        List list = LocaleUtils.languagesByCountry(country);\n        List list2 = LocaleUtils.languagesByCountry(country);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < languages.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(country, locale.getCountry());\n                if (languages[i].equals(locale.getLanguage())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + languages[i]\n                        + \" for country: \" + country);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n",
        "begin_line": 402,
        "end_line": 429,
        "comment": "\n     * Make sure the language by country is correct. It checks that \n     * the LocaleUtils.languagesByCountry(country) call contains the \n     * array of languages passed in. It may contain more due to JVM \n     * variations.\n     *\n     * @param country\n     * @param languages array of languages that should be returned\n     ",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 60)",
            "(line 404,col 9)-(line 404,col 61)",
            "(line 405,col 9)-(line 405,col 28)",
            "(line 406,col 9)-(line 406,col 32)",
            "(line 408,col 9)-(line 427,col 9)",
            "(line 428,col 9)-(line 428,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry()",
        "snippet": "    public void testLanguagesByCountry() {\n        assertLanguageByCountry(null, new String[0]);\n        assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n        assertLanguageByCountry(\"ZZ\", new String[0]);\n        assertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n    }\n",
        "begin_line": 434,
        "end_line": 439,
        "comment": "\n     * Test languagesByCountry() method.\n     ",
        "child_ranges": [
            "(line 435,col 9)-(line 435,col 53)",
            "(line 436,col 9)-(line 436,col 58)",
            "(line 437,col 9)-(line 437,col 53)",
            "(line 438,col 9)-(line 438,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertCountriesByLanguage(java.lang.String, java.lang.String[])",
        "snippet": "    private void assertCountriesByLanguage(String language, String[] countries) {\n        List list = LocaleUtils.countriesByLanguage(language);\n        List list2 = LocaleUtils.countriesByLanguage(language);\n        assertNotNull(list);\n        assertSame(list, list2);\n        //search through langauges\n        for (int i = 0; i < countries.length; i++) {\n            Iterator iterator = list.iterator();\n            boolean found = false;\n            // see if it was returned by the set\n            while (iterator.hasNext()) {\n                Locale locale = (Locale) iterator.next();\n                // should have an en empty variant\n                assertTrue(locale.getVariant() == null\n                        || locale.getVariant().length() == 0);\n                assertEquals(language, locale.getLanguage());\n                if (countries[i].equals(locale.getCountry())) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                fail(\"Cound not find language: \" + countries[i]\n                        + \" for country: \" + language);\n            }\n        }\n        assertUnmodifiableCollection(list);\n    }\n",
        "begin_line": 452,
        "end_line": 479,
        "comment": "\n     * Make sure the country by language is correct. It checks that \n     * the LocaleUtils.countryByLanguage(language) call contains the \n     * array of countries passed in. It may contain more due to JVM \n     * variations.\n     *\n     *\n     * @param language\n     * @param countries array of countries that should be returned\n     ",
        "child_ranges": [
            "(line 453,col 9)-(line 453,col 62)",
            "(line 454,col 9)-(line 454,col 63)",
            "(line 455,col 9)-(line 455,col 28)",
            "(line 456,col 9)-(line 456,col 32)",
            "(line 458,col 9)-(line 477,col 9)",
            "(line 478,col 9)-(line 478,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testCountriesByLanguage()",
        "snippet": "    public void testCountriesByLanguage() {\n        assertCountriesByLanguage(null, new String[0]);\n        assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n        assertCountriesByLanguage(\"zz\", new String[0]);\n        assertCountriesByLanguage(\"it\", new String[]{\"IT\", \"CH\"});\n    }\n",
        "begin_line": 484,
        "end_line": 489,
        "comment": "\n     * Test countriesByLanguage() method.\n     ",
        "child_ranges": [
            "(line 485,col 9)-(line 485,col 55)",
            "(line 486,col 9)-(line 486,col 78)",
            "(line 487,col 9)-(line 487,col 55)",
            "(line 488,col 9)-(line 488,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.assertUnmodifiableCollection(java.util.Collection)",
        "snippet": "    private static void assertUnmodifiableCollection(Collection coll) {\n        try {\n            coll.add(\"Unmodifiable\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 494,
        "end_line": 499,
        "comment": "\n     * @param coll  the collection to check\n     ",
        "child_ranges": [
            "(line 495,col 9)-(line 498,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.LocaleUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
        "signature": "org.apache.commons.lang.LocaleUtilsTest.testLang328()",
        "snippet": "    public void testLang328() {\n        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n    }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": "\n     * Tests #LANG-328 - only language+variant\n     ",
        "child_ranges": [
            "(line 505,col 9)-(line 505,col 60)"
        ]
    }
]